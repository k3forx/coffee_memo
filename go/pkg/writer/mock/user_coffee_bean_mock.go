// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_coffee_bean.go

// Package writer is a generated GoMock package.
package writer

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/k3forx/coffee_memo/pkg/model"
)

// MockUserCoffeeBean is a mock of UserCoffeeBean interface.
type MockUserCoffeeBean struct {
	ctrl     *gomock.Controller
	recorder *MockUserCoffeeBeanMockRecorder
}

// MockUserCoffeeBeanMockRecorder is the mock recorder for MockUserCoffeeBean.
type MockUserCoffeeBeanMockRecorder struct {
	mock *MockUserCoffeeBean
}

// NewMockUserCoffeeBean creates a new mock instance.
func NewMockUserCoffeeBean(ctrl *gomock.Controller) *MockUserCoffeeBean {
	mock := &MockUserCoffeeBean{ctrl: ctrl}
	mock.recorder = &MockUserCoffeeBeanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCoffeeBean) EXPECT() *MockUserCoffeeBeanMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserCoffeeBean) Create(ctx context.Context, coffeeBean *model.UserCoffeeBean, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, coffeeBean, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserCoffeeBeanMockRecorder) Create(ctx, coffeeBean, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserCoffeeBean)(nil).Create), ctx, coffeeBean, user)
}

// DeleteByID mocks base method.
func (m *MockUserCoffeeBean) DeleteByID(ctx context.Context, coffeeBean *model.UserCoffeeBean) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, coffeeBean)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockUserCoffeeBeanMockRecorder) DeleteByID(ctx, coffeeBean interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockUserCoffeeBean)(nil).DeleteByID), ctx, coffeeBean)
}

// UpdateByID mocks base method.
func (m *MockUserCoffeeBean) UpdateByID(ctx context.Context, userCoffeeBean *model.UserCoffeeBean) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, userCoffeeBean)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockUserCoffeeBeanMockRecorder) UpdateByID(ctx, userCoffeeBean interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockUserCoffeeBean)(nil).UpdateByID), ctx, userCoffeeBean)
}
