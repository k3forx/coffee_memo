// Code generated by MockGen. DO NOT EDIT.
// Source: ./coffee_bean.go

// Package writer is a generated GoMock package.
package writer

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/k3forx/coffee_memo/pkg/model"
)

// MockCoffeeBean is a mock of CoffeeBean interface.
type MockCoffeeBean struct {
	ctrl     *gomock.Controller
	recorder *MockCoffeeBeanMockRecorder
}

// MockCoffeeBeanMockRecorder is the mock recorder for MockCoffeeBean.
type MockCoffeeBeanMockRecorder struct {
	mock *MockCoffeeBean
}

// NewMockCoffeeBean creates a new mock instance.
func NewMockCoffeeBean(ctrl *gomock.Controller) *MockCoffeeBean {
	mock := &MockCoffeeBean{ctrl: ctrl}
	mock.recorder = &MockCoffeeBeanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoffeeBean) EXPECT() *MockCoffeeBeanMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCoffeeBean) Create(ctx context.Context, coffeeBean *model.CoffeeBean) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, coffeeBean)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCoffeeBeanMockRecorder) Create(ctx, coffeeBean interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCoffeeBean)(nil).Create), ctx, coffeeBean)
}
