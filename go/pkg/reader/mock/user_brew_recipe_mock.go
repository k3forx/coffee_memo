// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_brew_recipe.go

// Package reader is a generated GoMock package.
package reader

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/k3forx/coffee_memo/pkg/model"
)

// MockUserBrewRecipe is a mock of UserBrewRecipe interface.
type MockUserBrewRecipe struct {
	ctrl     *gomock.Controller
	recorder *MockUserBrewRecipeMockRecorder
}

// MockUserBrewRecipeMockRecorder is the mock recorder for MockUserBrewRecipe.
type MockUserBrewRecipeMockRecorder struct {
	mock *MockUserBrewRecipe
}

// NewMockUserBrewRecipe creates a new mock instance.
func NewMockUserBrewRecipe(ctrl *gomock.Controller) *MockUserBrewRecipe {
	mock := &MockUserBrewRecipe{ctrl: ctrl}
	mock.recorder = &MockUserBrewRecipeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserBrewRecipe) EXPECT() *MockUserBrewRecipeMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockUserBrewRecipe) GetByID(ctx context.Context, userBrewRecipeID int) (model.UserBrewRecipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, userBrewRecipeID)
	ret0, _ := ret[0].(model.UserBrewRecipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserBrewRecipeMockRecorder) GetByID(ctx, userBrewRecipeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserBrewRecipe)(nil).GetByID), ctx, userBrewRecipeID)
}
