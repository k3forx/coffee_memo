// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_coffee_bean.go

// Package reader is a generated GoMock package.
package reader

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/k3forx/coffee_memo/pkg/model"
)

// MockUserCoffeeBean is a mock of UserCoffeeBean interface.
type MockUserCoffeeBean struct {
	ctrl     *gomock.Controller
	recorder *MockUserCoffeeBeanMockRecorder
}

// MockUserCoffeeBeanMockRecorder is the mock recorder for MockUserCoffeeBean.
type MockUserCoffeeBeanMockRecorder struct {
	mock *MockUserCoffeeBean
}

// NewMockUserCoffeeBean creates a new mock instance.
func NewMockUserCoffeeBean(ctrl *gomock.Controller) *MockUserCoffeeBean {
	mock := &MockUserCoffeeBean{ctrl: ctrl}
	mock.recorder = &MockUserCoffeeBeanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCoffeeBean) EXPECT() *MockUserCoffeeBeanMockRecorder {
	return m.recorder
}

// GetAllByUserID mocks base method.
func (m *MockUserCoffeeBean) GetAllByUserID(ctx context.Context, userID int) ([]model.UserCoffeeBean, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserID", ctx, userID)
	ret0, _ := ret[0].([]model.UserCoffeeBean)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserID indicates an expected call of GetAllByUserID.
func (mr *MockUserCoffeeBeanMockRecorder) GetAllByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserID", reflect.TypeOf((*MockUserCoffeeBean)(nil).GetAllByUserID), ctx, userID)
}

// GetByID mocks base method.
func (m *MockUserCoffeeBean) GetByID(ctx context.Context, id int) (model.UserCoffeeBean, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(model.UserCoffeeBean)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserCoffeeBeanMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserCoffeeBean)(nil).GetByID), ctx, id)
}

// GetByIDWithUser mocks base method.
func (m *MockUserCoffeeBean) GetByIDWithUser(ctx context.Context, id int) (model.UserCoffeeBean, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDWithUser", ctx, id)
	ret0, _ := ret[0].(model.UserCoffeeBean)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDWithUser indicates an expected call of GetByIDWithUser.
func (mr *MockUserCoffeeBeanMockRecorder) GetByIDWithUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDWithUser", reflect.TypeOf((*MockUserCoffeeBean)(nil).GetByIDWithUser), ctx, id)
}
