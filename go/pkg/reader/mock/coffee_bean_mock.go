// Code generated by MockGen. DO NOT EDIT.
// Source: ./coffee_bean.go

// Package reader is a generated GoMock package.
package reader

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/k3forx/coffee_memo/pkg/model"
)

// MockCoffeeBean is a mock of CoffeeBean interface.
type MockCoffeeBean struct {
	ctrl     *gomock.Controller
	recorder *MockCoffeeBeanMockRecorder
}

// MockCoffeeBeanMockRecorder is the mock recorder for MockCoffeeBean.
type MockCoffeeBeanMockRecorder struct {
	mock *MockCoffeeBean
}

// NewMockCoffeeBean creates a new mock instance.
func NewMockCoffeeBean(ctrl *gomock.Controller) *MockCoffeeBean {
	mock := &MockCoffeeBean{ctrl: ctrl}
	mock.recorder = &MockCoffeeBeanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoffeeBean) EXPECT() *MockCoffeeBeanMockRecorder {
	return m.recorder
}

// GetAllByUserID mocks base method.
func (m *MockCoffeeBean) GetAllByUserID(ctx context.Context, userID int) ([]model.UserCoffeeBean, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserID", ctx, userID)
	ret0, _ := ret[0].([]model.UserCoffeeBean)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserID indicates an expected call of GetAllByUserID.
func (mr *MockCoffeeBeanMockRecorder) GetAllByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserID", reflect.TypeOf((*MockCoffeeBean)(nil).GetAllByUserID), ctx, userID)
}

// GetByID mocks base method.
func (m *MockCoffeeBean) GetByID(ctx context.Context, coffeeBeanID int) (model.UserCoffeeBean, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, coffeeBeanID)
	ret0, _ := ret[0].(model.UserCoffeeBean)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCoffeeBeanMockRecorder) GetByID(ctx, coffeeBeanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCoffeeBean)(nil).GetByID), ctx, coffeeBeanID)
}

// GetByIDWithUser mocks base method.
func (m *MockCoffeeBean) GetByIDWithUser(ctx context.Context, coffeeBeanID int) (model.UserCoffeeBean, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDWithUser", ctx, coffeeBeanID)
	ret0, _ := ret[0].(model.UserCoffeeBean)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDWithUser indicates an expected call of GetByIDWithUser.
func (mr *MockCoffeeBeanMockRecorder) GetByIDWithUser(ctx, coffeeBeanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDWithUser", reflect.TypeOf((*MockCoffeeBean)(nil).GetByIDWithUser), ctx, coffeeBeanID)
}
