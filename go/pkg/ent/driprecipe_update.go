// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k3forx/coffee_memo/pkg/ent/driprecipe"
	"github.com/k3forx/coffee_memo/pkg/ent/predicate"
)

// DripRecipeUpdate is the builder for updating DripRecipe entities.
type DripRecipeUpdate struct {
	config
	hooks    []Hook
	mutation *DripRecipeMutation
}

// Where appends a list predicates to the DripRecipeUpdate builder.
func (dru *DripRecipeUpdate) Where(ps ...predicate.DripRecipe) *DripRecipeUpdate {
	dru.mutation.Where(ps...)
	return dru
}

// SetUserID sets the "user_id" field.
func (dru *DripRecipeUpdate) SetUserID(i int32) *DripRecipeUpdate {
	dru.mutation.ResetUserID()
	dru.mutation.SetUserID(i)
	return dru
}

// AddUserID adds i to the "user_id" field.
func (dru *DripRecipeUpdate) AddUserID(i int32) *DripRecipeUpdate {
	dru.mutation.AddUserID(i)
	return dru
}

// SetCoffeeBeanID sets the "coffee_bean_id" field.
func (dru *DripRecipeUpdate) SetCoffeeBeanID(i int32) *DripRecipeUpdate {
	dru.mutation.ResetCoffeeBeanID()
	dru.mutation.SetCoffeeBeanID(i)
	return dru
}

// AddCoffeeBeanID adds i to the "coffee_bean_id" field.
func (dru *DripRecipeUpdate) AddCoffeeBeanID(i int32) *DripRecipeUpdate {
	dru.mutation.AddCoffeeBeanID(i)
	return dru
}

// SetCoffeeBeanWeight sets the "coffee_bean_weight" field.
func (dru *DripRecipeUpdate) SetCoffeeBeanWeight(f float32) *DripRecipeUpdate {
	dru.mutation.ResetCoffeeBeanWeight()
	dru.mutation.SetCoffeeBeanWeight(f)
	return dru
}

// AddCoffeeBeanWeight adds f to the "coffee_bean_weight" field.
func (dru *DripRecipeUpdate) AddCoffeeBeanWeight(f float32) *DripRecipeUpdate {
	dru.mutation.AddCoffeeBeanWeight(f)
	return dru
}

// SetLiquidWeight sets the "liquid_weight" field.
func (dru *DripRecipeUpdate) SetLiquidWeight(f float32) *DripRecipeUpdate {
	dru.mutation.ResetLiquidWeight()
	dru.mutation.SetLiquidWeight(f)
	return dru
}

// AddLiquidWeight adds f to the "liquid_weight" field.
func (dru *DripRecipeUpdate) AddLiquidWeight(f float32) *DripRecipeUpdate {
	dru.mutation.AddLiquidWeight(f)
	return dru
}

// SetTemperature sets the "temperature" field.
func (dru *DripRecipeUpdate) SetTemperature(f float32) *DripRecipeUpdate {
	dru.mutation.ResetTemperature()
	dru.mutation.SetTemperature(f)
	return dru
}

// AddTemperature adds f to the "temperature" field.
func (dru *DripRecipeUpdate) AddTemperature(f float32) *DripRecipeUpdate {
	dru.mutation.AddTemperature(f)
	return dru
}

// SetSteamTime sets the "steam_time" field.
func (dru *DripRecipeUpdate) SetSteamTime(i int32) *DripRecipeUpdate {
	dru.mutation.ResetSteamTime()
	dru.mutation.SetSteamTime(i)
	return dru
}

// AddSteamTime adds i to the "steam_time" field.
func (dru *DripRecipeUpdate) AddSteamTime(i int32) *DripRecipeUpdate {
	dru.mutation.AddSteamTime(i)
	return dru
}

// SetDripTime sets the "drip_time" field.
func (dru *DripRecipeUpdate) SetDripTime(i int32) *DripRecipeUpdate {
	dru.mutation.ResetDripTime()
	dru.mutation.SetDripTime(i)
	return dru
}

// AddDripTime adds i to the "drip_time" field.
func (dru *DripRecipeUpdate) AddDripTime(i int32) *DripRecipeUpdate {
	dru.mutation.AddDripTime(i)
	return dru
}

// SetMemo sets the "memo" field.
func (dru *DripRecipeUpdate) SetMemo(s string) *DripRecipeUpdate {
	dru.mutation.SetMemo(s)
	return dru
}

// SetCreatedAt sets the "created_at" field.
func (dru *DripRecipeUpdate) SetCreatedAt(t time.Time) *DripRecipeUpdate {
	dru.mutation.SetCreatedAt(t)
	return dru
}

// SetUpdatedAt sets the "updated_at" field.
func (dru *DripRecipeUpdate) SetUpdatedAt(t time.Time) *DripRecipeUpdate {
	dru.mutation.SetUpdatedAt(t)
	return dru
}

// Mutation returns the DripRecipeMutation object of the builder.
func (dru *DripRecipeUpdate) Mutation() *DripRecipeMutation {
	return dru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dru *DripRecipeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dru.hooks) == 0 {
		affected, err = dru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DripRecipeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dru.mutation = mutation
			affected, err = dru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dru.hooks) - 1; i >= 0; i-- {
			if dru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dru *DripRecipeUpdate) SaveX(ctx context.Context) int {
	affected, err := dru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dru *DripRecipeUpdate) Exec(ctx context.Context) error {
	_, err := dru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dru *DripRecipeUpdate) ExecX(ctx context.Context) {
	if err := dru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dru *DripRecipeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   driprecipe.Table,
			Columns: driprecipe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: driprecipe.FieldID,
			},
		},
	}
	if ps := dru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dru.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: driprecipe.FieldUserID,
		})
	}
	if value, ok := dru.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: driprecipe.FieldUserID,
		})
	}
	if value, ok := dru.mutation.CoffeeBeanID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: driprecipe.FieldCoffeeBeanID,
		})
	}
	if value, ok := dru.mutation.AddedCoffeeBeanID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: driprecipe.FieldCoffeeBeanID,
		})
	}
	if value, ok := dru.mutation.CoffeeBeanWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: driprecipe.FieldCoffeeBeanWeight,
		})
	}
	if value, ok := dru.mutation.AddedCoffeeBeanWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: driprecipe.FieldCoffeeBeanWeight,
		})
	}
	if value, ok := dru.mutation.LiquidWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: driprecipe.FieldLiquidWeight,
		})
	}
	if value, ok := dru.mutation.AddedLiquidWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: driprecipe.FieldLiquidWeight,
		})
	}
	if value, ok := dru.mutation.Temperature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: driprecipe.FieldTemperature,
		})
	}
	if value, ok := dru.mutation.AddedTemperature(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: driprecipe.FieldTemperature,
		})
	}
	if value, ok := dru.mutation.SteamTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: driprecipe.FieldSteamTime,
		})
	}
	if value, ok := dru.mutation.AddedSteamTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: driprecipe.FieldSteamTime,
		})
	}
	if value, ok := dru.mutation.DripTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: driprecipe.FieldDripTime,
		})
	}
	if value, ok := dru.mutation.AddedDripTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: driprecipe.FieldDripTime,
		})
	}
	if value, ok := dru.mutation.Memo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: driprecipe.FieldMemo,
		})
	}
	if value, ok := dru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: driprecipe.FieldCreatedAt,
		})
	}
	if value, ok := dru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: driprecipe.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{driprecipe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DripRecipeUpdateOne is the builder for updating a single DripRecipe entity.
type DripRecipeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DripRecipeMutation
}

// SetUserID sets the "user_id" field.
func (druo *DripRecipeUpdateOne) SetUserID(i int32) *DripRecipeUpdateOne {
	druo.mutation.ResetUserID()
	druo.mutation.SetUserID(i)
	return druo
}

// AddUserID adds i to the "user_id" field.
func (druo *DripRecipeUpdateOne) AddUserID(i int32) *DripRecipeUpdateOne {
	druo.mutation.AddUserID(i)
	return druo
}

// SetCoffeeBeanID sets the "coffee_bean_id" field.
func (druo *DripRecipeUpdateOne) SetCoffeeBeanID(i int32) *DripRecipeUpdateOne {
	druo.mutation.ResetCoffeeBeanID()
	druo.mutation.SetCoffeeBeanID(i)
	return druo
}

// AddCoffeeBeanID adds i to the "coffee_bean_id" field.
func (druo *DripRecipeUpdateOne) AddCoffeeBeanID(i int32) *DripRecipeUpdateOne {
	druo.mutation.AddCoffeeBeanID(i)
	return druo
}

// SetCoffeeBeanWeight sets the "coffee_bean_weight" field.
func (druo *DripRecipeUpdateOne) SetCoffeeBeanWeight(f float32) *DripRecipeUpdateOne {
	druo.mutation.ResetCoffeeBeanWeight()
	druo.mutation.SetCoffeeBeanWeight(f)
	return druo
}

// AddCoffeeBeanWeight adds f to the "coffee_bean_weight" field.
func (druo *DripRecipeUpdateOne) AddCoffeeBeanWeight(f float32) *DripRecipeUpdateOne {
	druo.mutation.AddCoffeeBeanWeight(f)
	return druo
}

// SetLiquidWeight sets the "liquid_weight" field.
func (druo *DripRecipeUpdateOne) SetLiquidWeight(f float32) *DripRecipeUpdateOne {
	druo.mutation.ResetLiquidWeight()
	druo.mutation.SetLiquidWeight(f)
	return druo
}

// AddLiquidWeight adds f to the "liquid_weight" field.
func (druo *DripRecipeUpdateOne) AddLiquidWeight(f float32) *DripRecipeUpdateOne {
	druo.mutation.AddLiquidWeight(f)
	return druo
}

// SetTemperature sets the "temperature" field.
func (druo *DripRecipeUpdateOne) SetTemperature(f float32) *DripRecipeUpdateOne {
	druo.mutation.ResetTemperature()
	druo.mutation.SetTemperature(f)
	return druo
}

// AddTemperature adds f to the "temperature" field.
func (druo *DripRecipeUpdateOne) AddTemperature(f float32) *DripRecipeUpdateOne {
	druo.mutation.AddTemperature(f)
	return druo
}

// SetSteamTime sets the "steam_time" field.
func (druo *DripRecipeUpdateOne) SetSteamTime(i int32) *DripRecipeUpdateOne {
	druo.mutation.ResetSteamTime()
	druo.mutation.SetSteamTime(i)
	return druo
}

// AddSteamTime adds i to the "steam_time" field.
func (druo *DripRecipeUpdateOne) AddSteamTime(i int32) *DripRecipeUpdateOne {
	druo.mutation.AddSteamTime(i)
	return druo
}

// SetDripTime sets the "drip_time" field.
func (druo *DripRecipeUpdateOne) SetDripTime(i int32) *DripRecipeUpdateOne {
	druo.mutation.ResetDripTime()
	druo.mutation.SetDripTime(i)
	return druo
}

// AddDripTime adds i to the "drip_time" field.
func (druo *DripRecipeUpdateOne) AddDripTime(i int32) *DripRecipeUpdateOne {
	druo.mutation.AddDripTime(i)
	return druo
}

// SetMemo sets the "memo" field.
func (druo *DripRecipeUpdateOne) SetMemo(s string) *DripRecipeUpdateOne {
	druo.mutation.SetMemo(s)
	return druo
}

// SetCreatedAt sets the "created_at" field.
func (druo *DripRecipeUpdateOne) SetCreatedAt(t time.Time) *DripRecipeUpdateOne {
	druo.mutation.SetCreatedAt(t)
	return druo
}

// SetUpdatedAt sets the "updated_at" field.
func (druo *DripRecipeUpdateOne) SetUpdatedAt(t time.Time) *DripRecipeUpdateOne {
	druo.mutation.SetUpdatedAt(t)
	return druo
}

// Mutation returns the DripRecipeMutation object of the builder.
func (druo *DripRecipeUpdateOne) Mutation() *DripRecipeMutation {
	return druo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (druo *DripRecipeUpdateOne) Select(field string, fields ...string) *DripRecipeUpdateOne {
	druo.fields = append([]string{field}, fields...)
	return druo
}

// Save executes the query and returns the updated DripRecipe entity.
func (druo *DripRecipeUpdateOne) Save(ctx context.Context) (*DripRecipe, error) {
	var (
		err  error
		node *DripRecipe
	)
	if len(druo.hooks) == 0 {
		node, err = druo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DripRecipeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			druo.mutation = mutation
			node, err = druo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(druo.hooks) - 1; i >= 0; i-- {
			if druo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = druo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, druo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (druo *DripRecipeUpdateOne) SaveX(ctx context.Context) *DripRecipe {
	node, err := druo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (druo *DripRecipeUpdateOne) Exec(ctx context.Context) error {
	_, err := druo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (druo *DripRecipeUpdateOne) ExecX(ctx context.Context) {
	if err := druo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (druo *DripRecipeUpdateOne) sqlSave(ctx context.Context) (_node *DripRecipe, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   driprecipe.Table,
			Columns: driprecipe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: driprecipe.FieldID,
			},
		},
	}
	id, ok := druo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DripRecipe.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := druo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, driprecipe.FieldID)
		for _, f := range fields {
			if !driprecipe.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != driprecipe.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := druo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := druo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: driprecipe.FieldUserID,
		})
	}
	if value, ok := druo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: driprecipe.FieldUserID,
		})
	}
	if value, ok := druo.mutation.CoffeeBeanID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: driprecipe.FieldCoffeeBeanID,
		})
	}
	if value, ok := druo.mutation.AddedCoffeeBeanID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: driprecipe.FieldCoffeeBeanID,
		})
	}
	if value, ok := druo.mutation.CoffeeBeanWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: driprecipe.FieldCoffeeBeanWeight,
		})
	}
	if value, ok := druo.mutation.AddedCoffeeBeanWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: driprecipe.FieldCoffeeBeanWeight,
		})
	}
	if value, ok := druo.mutation.LiquidWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: driprecipe.FieldLiquidWeight,
		})
	}
	if value, ok := druo.mutation.AddedLiquidWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: driprecipe.FieldLiquidWeight,
		})
	}
	if value, ok := druo.mutation.Temperature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: driprecipe.FieldTemperature,
		})
	}
	if value, ok := druo.mutation.AddedTemperature(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: driprecipe.FieldTemperature,
		})
	}
	if value, ok := druo.mutation.SteamTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: driprecipe.FieldSteamTime,
		})
	}
	if value, ok := druo.mutation.AddedSteamTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: driprecipe.FieldSteamTime,
		})
	}
	if value, ok := druo.mutation.DripTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: driprecipe.FieldDripTime,
		})
	}
	if value, ok := druo.mutation.AddedDripTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: driprecipe.FieldDripTime,
		})
	}
	if value, ok := druo.mutation.Memo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: driprecipe.FieldMemo,
		})
	}
	if value, ok := druo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: driprecipe.FieldCreatedAt,
		})
	}
	if value, ok := druo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: driprecipe.FieldUpdatedAt,
		})
	}
	_node = &DripRecipe{config: druo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, druo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{driprecipe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
