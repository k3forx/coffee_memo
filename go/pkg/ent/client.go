// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/k3forx/coffee_memo/pkg/ent/migrate"

	"github.com/k3forx/coffee_memo/pkg/ent/goosedbversion"
	"github.com/k3forx/coffee_memo/pkg/ent/user"
	"github.com/k3forx/coffee_memo/pkg/ent/usercoffeebean"
	"github.com/k3forx/coffee_memo/pkg/ent/userdriprecipe"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// GooseDbVersion is the client for interacting with the GooseDbVersion builders.
	GooseDbVersion *GooseDbVersionClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserCoffeeBean is the client for interacting with the UserCoffeeBean builders.
	UserCoffeeBean *UserCoffeeBeanClient
	// UserDripRecipe is the client for interacting with the UserDripRecipe builders.
	UserDripRecipe *UserDripRecipeClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.GooseDbVersion = NewGooseDbVersionClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserCoffeeBean = NewUserCoffeeBeanClient(c.config)
	c.UserDripRecipe = NewUserDripRecipeClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		GooseDbVersion: NewGooseDbVersionClient(cfg),
		User:           NewUserClient(cfg),
		UserCoffeeBean: NewUserCoffeeBeanClient(cfg),
		UserDripRecipe: NewUserDripRecipeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		GooseDbVersion: NewGooseDbVersionClient(cfg),
		User:           NewUserClient(cfg),
		UserCoffeeBean: NewUserCoffeeBeanClient(cfg),
		UserDripRecipe: NewUserDripRecipeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		GooseDbVersion.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.GooseDbVersion.Use(hooks...)
	c.User.Use(hooks...)
	c.UserCoffeeBean.Use(hooks...)
	c.UserDripRecipe.Use(hooks...)
}

// GooseDbVersionClient is a client for the GooseDbVersion schema.
type GooseDbVersionClient struct {
	config
}

// NewGooseDbVersionClient returns a client for the GooseDbVersion from the given config.
func NewGooseDbVersionClient(c config) *GooseDbVersionClient {
	return &GooseDbVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goosedbversion.Hooks(f(g(h())))`.
func (c *GooseDbVersionClient) Use(hooks ...Hook) {
	c.hooks.GooseDbVersion = append(c.hooks.GooseDbVersion, hooks...)
}

// Create returns a create builder for GooseDbVersion.
func (c *GooseDbVersionClient) Create() *GooseDbVersionCreate {
	mutation := newGooseDbVersionMutation(c.config, OpCreate)
	return &GooseDbVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GooseDbVersion entities.
func (c *GooseDbVersionClient) CreateBulk(builders ...*GooseDbVersionCreate) *GooseDbVersionCreateBulk {
	return &GooseDbVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GooseDbVersion.
func (c *GooseDbVersionClient) Update() *GooseDbVersionUpdate {
	mutation := newGooseDbVersionMutation(c.config, OpUpdate)
	return &GooseDbVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GooseDbVersionClient) UpdateOne(gdv *GooseDbVersion) *GooseDbVersionUpdateOne {
	mutation := newGooseDbVersionMutation(c.config, OpUpdateOne, withGooseDbVersion(gdv))
	return &GooseDbVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GooseDbVersionClient) UpdateOneID(id uint64) *GooseDbVersionUpdateOne {
	mutation := newGooseDbVersionMutation(c.config, OpUpdateOne, withGooseDbVersionID(id))
	return &GooseDbVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GooseDbVersion.
func (c *GooseDbVersionClient) Delete() *GooseDbVersionDelete {
	mutation := newGooseDbVersionMutation(c.config, OpDelete)
	return &GooseDbVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GooseDbVersionClient) DeleteOne(gdv *GooseDbVersion) *GooseDbVersionDeleteOne {
	return c.DeleteOneID(gdv.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GooseDbVersionClient) DeleteOneID(id uint64) *GooseDbVersionDeleteOne {
	builder := c.Delete().Where(goosedbversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GooseDbVersionDeleteOne{builder}
}

// Query returns a query builder for GooseDbVersion.
func (c *GooseDbVersionClient) Query() *GooseDbVersionQuery {
	return &GooseDbVersionQuery{
		config: c.config,
	}
}

// Get returns a GooseDbVersion entity by its id.
func (c *GooseDbVersionClient) Get(ctx context.Context, id uint64) (*GooseDbVersion, error) {
	return c.Query().Where(goosedbversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GooseDbVersionClient) GetX(ctx context.Context, id uint64) *GooseDbVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GooseDbVersionClient) Hooks() []Hook {
	return c.hooks.GooseDbVersion
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int32) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int32) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int32) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int32) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserCoffeeBeans queries the user_coffee_beans edge of a User.
func (c *UserClient) QueryUserCoffeeBeans(u *User) *UserCoffeeBeanQuery {
	query := &UserCoffeeBeanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usercoffeebean.Table, usercoffeebean.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserCoffeeBeansTable, user.UserCoffeeBeansColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserDripRecipes queries the user_drip_recipes edge of a User.
func (c *UserClient) QueryUserDripRecipes(u *User) *UserDripRecipeQuery {
	query := &UserDripRecipeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userdriprecipe.Table, userdriprecipe.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserDripRecipesTable, user.UserDripRecipesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserCoffeeBeanClient is a client for the UserCoffeeBean schema.
type UserCoffeeBeanClient struct {
	config
}

// NewUserCoffeeBeanClient returns a client for the UserCoffeeBean from the given config.
func NewUserCoffeeBeanClient(c config) *UserCoffeeBeanClient {
	return &UserCoffeeBeanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usercoffeebean.Hooks(f(g(h())))`.
func (c *UserCoffeeBeanClient) Use(hooks ...Hook) {
	c.hooks.UserCoffeeBean = append(c.hooks.UserCoffeeBean, hooks...)
}

// Create returns a create builder for UserCoffeeBean.
func (c *UserCoffeeBeanClient) Create() *UserCoffeeBeanCreate {
	mutation := newUserCoffeeBeanMutation(c.config, OpCreate)
	return &UserCoffeeBeanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserCoffeeBean entities.
func (c *UserCoffeeBeanClient) CreateBulk(builders ...*UserCoffeeBeanCreate) *UserCoffeeBeanCreateBulk {
	return &UserCoffeeBeanCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserCoffeeBean.
func (c *UserCoffeeBeanClient) Update() *UserCoffeeBeanUpdate {
	mutation := newUserCoffeeBeanMutation(c.config, OpUpdate)
	return &UserCoffeeBeanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserCoffeeBeanClient) UpdateOne(ucb *UserCoffeeBean) *UserCoffeeBeanUpdateOne {
	mutation := newUserCoffeeBeanMutation(c.config, OpUpdateOne, withUserCoffeeBean(ucb))
	return &UserCoffeeBeanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserCoffeeBeanClient) UpdateOneID(id int32) *UserCoffeeBeanUpdateOne {
	mutation := newUserCoffeeBeanMutation(c.config, OpUpdateOne, withUserCoffeeBeanID(id))
	return &UserCoffeeBeanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserCoffeeBean.
func (c *UserCoffeeBeanClient) Delete() *UserCoffeeBeanDelete {
	mutation := newUserCoffeeBeanMutation(c.config, OpDelete)
	return &UserCoffeeBeanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserCoffeeBeanClient) DeleteOne(ucb *UserCoffeeBean) *UserCoffeeBeanDeleteOne {
	return c.DeleteOneID(ucb.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserCoffeeBeanClient) DeleteOneID(id int32) *UserCoffeeBeanDeleteOne {
	builder := c.Delete().Where(usercoffeebean.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserCoffeeBeanDeleteOne{builder}
}

// Query returns a query builder for UserCoffeeBean.
func (c *UserCoffeeBeanClient) Query() *UserCoffeeBeanQuery {
	return &UserCoffeeBeanQuery{
		config: c.config,
	}
}

// Get returns a UserCoffeeBean entity by its id.
func (c *UserCoffeeBeanClient) Get(ctx context.Context, id int32) (*UserCoffeeBean, error) {
	return c.Query().Where(usercoffeebean.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserCoffeeBeanClient) GetX(ctx context.Context, id int32) *UserCoffeeBean {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserCoffeeBean.
func (c *UserCoffeeBeanClient) QueryUser(ucb *UserCoffeeBean) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ucb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usercoffeebean.Table, usercoffeebean.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usercoffeebean.UserTable, usercoffeebean.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ucb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserDripRecipes queries the user_drip_recipes edge of a UserCoffeeBean.
func (c *UserCoffeeBeanClient) QueryUserDripRecipes(ucb *UserCoffeeBean) *UserDripRecipeQuery {
	query := &UserDripRecipeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ucb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usercoffeebean.Table, usercoffeebean.FieldID, id),
			sqlgraph.To(userdriprecipe.Table, userdriprecipe.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usercoffeebean.UserDripRecipesTable, usercoffeebean.UserDripRecipesColumn),
		)
		fromV = sqlgraph.Neighbors(ucb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserCoffeeBeanClient) Hooks() []Hook {
	return c.hooks.UserCoffeeBean
}

// UserDripRecipeClient is a client for the UserDripRecipe schema.
type UserDripRecipeClient struct {
	config
}

// NewUserDripRecipeClient returns a client for the UserDripRecipe from the given config.
func NewUserDripRecipeClient(c config) *UserDripRecipeClient {
	return &UserDripRecipeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userdriprecipe.Hooks(f(g(h())))`.
func (c *UserDripRecipeClient) Use(hooks ...Hook) {
	c.hooks.UserDripRecipe = append(c.hooks.UserDripRecipe, hooks...)
}

// Create returns a create builder for UserDripRecipe.
func (c *UserDripRecipeClient) Create() *UserDripRecipeCreate {
	mutation := newUserDripRecipeMutation(c.config, OpCreate)
	return &UserDripRecipeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserDripRecipe entities.
func (c *UserDripRecipeClient) CreateBulk(builders ...*UserDripRecipeCreate) *UserDripRecipeCreateBulk {
	return &UserDripRecipeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserDripRecipe.
func (c *UserDripRecipeClient) Update() *UserDripRecipeUpdate {
	mutation := newUserDripRecipeMutation(c.config, OpUpdate)
	return &UserDripRecipeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserDripRecipeClient) UpdateOne(udr *UserDripRecipe) *UserDripRecipeUpdateOne {
	mutation := newUserDripRecipeMutation(c.config, OpUpdateOne, withUserDripRecipe(udr))
	return &UserDripRecipeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserDripRecipeClient) UpdateOneID(id int32) *UserDripRecipeUpdateOne {
	mutation := newUserDripRecipeMutation(c.config, OpUpdateOne, withUserDripRecipeID(id))
	return &UserDripRecipeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserDripRecipe.
func (c *UserDripRecipeClient) Delete() *UserDripRecipeDelete {
	mutation := newUserDripRecipeMutation(c.config, OpDelete)
	return &UserDripRecipeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserDripRecipeClient) DeleteOne(udr *UserDripRecipe) *UserDripRecipeDeleteOne {
	return c.DeleteOneID(udr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserDripRecipeClient) DeleteOneID(id int32) *UserDripRecipeDeleteOne {
	builder := c.Delete().Where(userdriprecipe.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDripRecipeDeleteOne{builder}
}

// Query returns a query builder for UserDripRecipe.
func (c *UserDripRecipeClient) Query() *UserDripRecipeQuery {
	return &UserDripRecipeQuery{
		config: c.config,
	}
}

// Get returns a UserDripRecipe entity by its id.
func (c *UserDripRecipeClient) Get(ctx context.Context, id int32) (*UserDripRecipe, error) {
	return c.Query().Where(userdriprecipe.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserDripRecipeClient) GetX(ctx context.Context, id int32) *UserDripRecipe {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserCoffeeBean queries the user_coffee_bean edge of a UserDripRecipe.
func (c *UserDripRecipeClient) QueryUserCoffeeBean(udr *UserDripRecipe) *UserCoffeeBeanQuery {
	query := &UserCoffeeBeanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := udr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userdriprecipe.Table, userdriprecipe.FieldID, id),
			sqlgraph.To(usercoffeebean.Table, usercoffeebean.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userdriprecipe.UserCoffeeBeanTable, userdriprecipe.UserCoffeeBeanColumn),
		)
		fromV = sqlgraph.Neighbors(udr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a UserDripRecipe.
func (c *UserDripRecipeClient) QueryUser(udr *UserDripRecipe) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := udr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userdriprecipe.Table, userdriprecipe.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userdriprecipe.UserTable, userdriprecipe.UserColumn),
		)
		fromV = sqlgraph.Neighbors(udr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserDripRecipeClient) Hooks() []Hook {
	return c.hooks.UserDripRecipe
}
