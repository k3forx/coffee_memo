// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k3forx/coffee_memo/pkg/ent/coffeeshop"
	"github.com/k3forx/coffee_memo/pkg/ent/predicate"
)

// CoffeeShopUpdate is the builder for updating CoffeeShop entities.
type CoffeeShopUpdate struct {
	config
	hooks    []Hook
	mutation *CoffeeShopMutation
}

// Where appends a list predicates to the CoffeeShopUpdate builder.
func (csu *CoffeeShopUpdate) Where(ps ...predicate.CoffeeShop) *CoffeeShopUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetName sets the "name" field.
func (csu *CoffeeShopUpdate) SetName(s string) *CoffeeShopUpdate {
	csu.mutation.SetName(s)
	return csu
}

// SetShopURL sets the "shop_url" field.
func (csu *CoffeeShopUpdate) SetShopURL(s string) *CoffeeShopUpdate {
	csu.mutation.SetShopURL(s)
	return csu
}

// SetNillableShopURL sets the "shop_url" field if the given value is not nil.
func (csu *CoffeeShopUpdate) SetNillableShopURL(s *string) *CoffeeShopUpdate {
	if s != nil {
		csu.SetShopURL(*s)
	}
	return csu
}

// ClearShopURL clears the value of the "shop_url" field.
func (csu *CoffeeShopUpdate) ClearShopURL() *CoffeeShopUpdate {
	csu.mutation.ClearShopURL()
	return csu
}

// SetOpenTime sets the "open_time" field.
func (csu *CoffeeShopUpdate) SetOpenTime(t time.Time) *CoffeeShopUpdate {
	csu.mutation.SetOpenTime(t)
	return csu
}

// SetNillableOpenTime sets the "open_time" field if the given value is not nil.
func (csu *CoffeeShopUpdate) SetNillableOpenTime(t *time.Time) *CoffeeShopUpdate {
	if t != nil {
		csu.SetOpenTime(*t)
	}
	return csu
}

// ClearOpenTime clears the value of the "open_time" field.
func (csu *CoffeeShopUpdate) ClearOpenTime() *CoffeeShopUpdate {
	csu.mutation.ClearOpenTime()
	return csu
}

// SetCloseTime sets the "close_time" field.
func (csu *CoffeeShopUpdate) SetCloseTime(t time.Time) *CoffeeShopUpdate {
	csu.mutation.SetCloseTime(t)
	return csu
}

// SetNillableCloseTime sets the "close_time" field if the given value is not nil.
func (csu *CoffeeShopUpdate) SetNillableCloseTime(t *time.Time) *CoffeeShopUpdate {
	if t != nil {
		csu.SetCloseTime(*t)
	}
	return csu
}

// ClearCloseTime clears the value of the "close_time" field.
func (csu *CoffeeShopUpdate) ClearCloseTime() *CoffeeShopUpdate {
	csu.mutation.ClearCloseTime()
	return csu
}

// SetCreatedAt sets the "created_at" field.
func (csu *CoffeeShopUpdate) SetCreatedAt(t time.Time) *CoffeeShopUpdate {
	csu.mutation.SetCreatedAt(t)
	return csu
}

// SetUpdatedAt sets the "updated_at" field.
func (csu *CoffeeShopUpdate) SetUpdatedAt(t time.Time) *CoffeeShopUpdate {
	csu.mutation.SetUpdatedAt(t)
	return csu
}

// SetClosedAt sets the "closed_at" field.
func (csu *CoffeeShopUpdate) SetClosedAt(t time.Time) *CoffeeShopUpdate {
	csu.mutation.SetClosedAt(t)
	return csu
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (csu *CoffeeShopUpdate) SetNillableClosedAt(t *time.Time) *CoffeeShopUpdate {
	if t != nil {
		csu.SetClosedAt(*t)
	}
	return csu
}

// ClearClosedAt clears the value of the "closed_at" field.
func (csu *CoffeeShopUpdate) ClearClosedAt() *CoffeeShopUpdate {
	csu.mutation.ClearClosedAt()
	return csu
}

// Mutation returns the CoffeeShopMutation object of the builder.
func (csu *CoffeeShopUpdate) Mutation() *CoffeeShopMutation {
	return csu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CoffeeShopUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(csu.hooks) == 0 {
		affected, err = csu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoffeeShopMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			csu.mutation = mutation
			affected, err = csu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(csu.hooks) - 1; i >= 0; i-- {
			if csu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = csu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CoffeeShopUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CoffeeShopUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CoffeeShopUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csu *CoffeeShopUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coffeeshop.Table,
			Columns: coffeeshop.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: coffeeshop.FieldID,
			},
		},
	}
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coffeeshop.FieldName,
		})
	}
	if value, ok := csu.mutation.ShopURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coffeeshop.FieldShopURL,
		})
	}
	if csu.mutation.ShopURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: coffeeshop.FieldShopURL,
		})
	}
	if value, ok := csu.mutation.OpenTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coffeeshop.FieldOpenTime,
		})
	}
	if csu.mutation.OpenTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: coffeeshop.FieldOpenTime,
		})
	}
	if value, ok := csu.mutation.CloseTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coffeeshop.FieldCloseTime,
		})
	}
	if csu.mutation.CloseTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: coffeeshop.FieldCloseTime,
		})
	}
	if value, ok := csu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coffeeshop.FieldCreatedAt,
		})
	}
	if value, ok := csu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coffeeshop.FieldUpdatedAt,
		})
	}
	if value, ok := csu.mutation.ClosedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coffeeshop.FieldClosedAt,
		})
	}
	if csu.mutation.ClosedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: coffeeshop.FieldClosedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coffeeshop.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CoffeeShopUpdateOne is the builder for updating a single CoffeeShop entity.
type CoffeeShopUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CoffeeShopMutation
}

// SetName sets the "name" field.
func (csuo *CoffeeShopUpdateOne) SetName(s string) *CoffeeShopUpdateOne {
	csuo.mutation.SetName(s)
	return csuo
}

// SetShopURL sets the "shop_url" field.
func (csuo *CoffeeShopUpdateOne) SetShopURL(s string) *CoffeeShopUpdateOne {
	csuo.mutation.SetShopURL(s)
	return csuo
}

// SetNillableShopURL sets the "shop_url" field if the given value is not nil.
func (csuo *CoffeeShopUpdateOne) SetNillableShopURL(s *string) *CoffeeShopUpdateOne {
	if s != nil {
		csuo.SetShopURL(*s)
	}
	return csuo
}

// ClearShopURL clears the value of the "shop_url" field.
func (csuo *CoffeeShopUpdateOne) ClearShopURL() *CoffeeShopUpdateOne {
	csuo.mutation.ClearShopURL()
	return csuo
}

// SetOpenTime sets the "open_time" field.
func (csuo *CoffeeShopUpdateOne) SetOpenTime(t time.Time) *CoffeeShopUpdateOne {
	csuo.mutation.SetOpenTime(t)
	return csuo
}

// SetNillableOpenTime sets the "open_time" field if the given value is not nil.
func (csuo *CoffeeShopUpdateOne) SetNillableOpenTime(t *time.Time) *CoffeeShopUpdateOne {
	if t != nil {
		csuo.SetOpenTime(*t)
	}
	return csuo
}

// ClearOpenTime clears the value of the "open_time" field.
func (csuo *CoffeeShopUpdateOne) ClearOpenTime() *CoffeeShopUpdateOne {
	csuo.mutation.ClearOpenTime()
	return csuo
}

// SetCloseTime sets the "close_time" field.
func (csuo *CoffeeShopUpdateOne) SetCloseTime(t time.Time) *CoffeeShopUpdateOne {
	csuo.mutation.SetCloseTime(t)
	return csuo
}

// SetNillableCloseTime sets the "close_time" field if the given value is not nil.
func (csuo *CoffeeShopUpdateOne) SetNillableCloseTime(t *time.Time) *CoffeeShopUpdateOne {
	if t != nil {
		csuo.SetCloseTime(*t)
	}
	return csuo
}

// ClearCloseTime clears the value of the "close_time" field.
func (csuo *CoffeeShopUpdateOne) ClearCloseTime() *CoffeeShopUpdateOne {
	csuo.mutation.ClearCloseTime()
	return csuo
}

// SetCreatedAt sets the "created_at" field.
func (csuo *CoffeeShopUpdateOne) SetCreatedAt(t time.Time) *CoffeeShopUpdateOne {
	csuo.mutation.SetCreatedAt(t)
	return csuo
}

// SetUpdatedAt sets the "updated_at" field.
func (csuo *CoffeeShopUpdateOne) SetUpdatedAt(t time.Time) *CoffeeShopUpdateOne {
	csuo.mutation.SetUpdatedAt(t)
	return csuo
}

// SetClosedAt sets the "closed_at" field.
func (csuo *CoffeeShopUpdateOne) SetClosedAt(t time.Time) *CoffeeShopUpdateOne {
	csuo.mutation.SetClosedAt(t)
	return csuo
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (csuo *CoffeeShopUpdateOne) SetNillableClosedAt(t *time.Time) *CoffeeShopUpdateOne {
	if t != nil {
		csuo.SetClosedAt(*t)
	}
	return csuo
}

// ClearClosedAt clears the value of the "closed_at" field.
func (csuo *CoffeeShopUpdateOne) ClearClosedAt() *CoffeeShopUpdateOne {
	csuo.mutation.ClearClosedAt()
	return csuo
}

// Mutation returns the CoffeeShopMutation object of the builder.
func (csuo *CoffeeShopUpdateOne) Mutation() *CoffeeShopMutation {
	return csuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CoffeeShopUpdateOne) Select(field string, fields ...string) *CoffeeShopUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CoffeeShop entity.
func (csuo *CoffeeShopUpdateOne) Save(ctx context.Context) (*CoffeeShop, error) {
	var (
		err  error
		node *CoffeeShop
	)
	if len(csuo.hooks) == 0 {
		node, err = csuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoffeeShopMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			csuo.mutation = mutation
			node, err = csuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(csuo.hooks) - 1; i >= 0; i-- {
			if csuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = csuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CoffeeShopUpdateOne) SaveX(ctx context.Context) *CoffeeShop {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CoffeeShopUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CoffeeShopUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csuo *CoffeeShopUpdateOne) sqlSave(ctx context.Context) (_node *CoffeeShop, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coffeeshop.Table,
			Columns: coffeeshop.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: coffeeshop.FieldID,
			},
		},
	}
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CoffeeShop.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coffeeshop.FieldID)
		for _, f := range fields {
			if !coffeeshop.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coffeeshop.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coffeeshop.FieldName,
		})
	}
	if value, ok := csuo.mutation.ShopURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coffeeshop.FieldShopURL,
		})
	}
	if csuo.mutation.ShopURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: coffeeshop.FieldShopURL,
		})
	}
	if value, ok := csuo.mutation.OpenTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coffeeshop.FieldOpenTime,
		})
	}
	if csuo.mutation.OpenTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: coffeeshop.FieldOpenTime,
		})
	}
	if value, ok := csuo.mutation.CloseTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coffeeshop.FieldCloseTime,
		})
	}
	if csuo.mutation.CloseTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: coffeeshop.FieldCloseTime,
		})
	}
	if value, ok := csuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coffeeshop.FieldCreatedAt,
		})
	}
	if value, ok := csuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coffeeshop.FieldUpdatedAt,
		})
	}
	if value, ok := csuo.mutation.ClosedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coffeeshop.FieldClosedAt,
		})
	}
	if csuo.mutation.ClosedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: coffeeshop.FieldClosedAt,
		})
	}
	_node = &CoffeeShop{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coffeeshop.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
