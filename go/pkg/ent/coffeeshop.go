// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/k3forx/coffee_memo/pkg/ent/coffeeshop"
)

// CoffeeShop is the model entity for the CoffeeShop schema.
type CoffeeShop struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ShopURL holds the value of the "shop_url" field.
	ShopURL string `json:"shop_url,omitempty"`
	// OpenTime holds the value of the "open_time" field.
	OpenTime time.Time `json:"open_time,omitempty"`
	// CloseTime holds the value of the "close_time" field.
	CloseTime time.Time `json:"close_time,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ClosedAt holds the value of the "closed_at" field.
	ClosedAt time.Time `json:"closed_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CoffeeShop) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case coffeeshop.FieldID:
			values[i] = new(sql.NullInt64)
		case coffeeshop.FieldName, coffeeshop.FieldShopURL:
			values[i] = new(sql.NullString)
		case coffeeshop.FieldOpenTime, coffeeshop.FieldCloseTime, coffeeshop.FieldCreatedAt, coffeeshop.FieldUpdatedAt, coffeeshop.FieldClosedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CoffeeShop", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CoffeeShop fields.
func (cs *CoffeeShop) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coffeeshop.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cs.ID = int32(value.Int64)
		case coffeeshop.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cs.Name = value.String
			}
		case coffeeshop.FieldShopURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shop_url", values[i])
			} else if value.Valid {
				cs.ShopURL = value.String
			}
		case coffeeshop.FieldOpenTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field open_time", values[i])
			} else if value.Valid {
				cs.OpenTime = value.Time
			}
		case coffeeshop.FieldCloseTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field close_time", values[i])
			} else if value.Valid {
				cs.CloseTime = value.Time
			}
		case coffeeshop.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cs.CreatedAt = value.Time
			}
		case coffeeshop.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cs.UpdatedAt = value.Time
			}
		case coffeeshop.FieldClosedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field closed_at", values[i])
			} else if value.Valid {
				cs.ClosedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CoffeeShop.
// Note that you need to call CoffeeShop.Unwrap() before calling this method if this CoffeeShop
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *CoffeeShop) Update() *CoffeeShopUpdateOne {
	return (&CoffeeShopClient{config: cs.config}).UpdateOne(cs)
}

// Unwrap unwraps the CoffeeShop entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *CoffeeShop) Unwrap() *CoffeeShop {
	tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CoffeeShop is not a transactional entity")
	}
	cs.config.driver = tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *CoffeeShop) String() string {
	var builder strings.Builder
	builder.WriteString("CoffeeShop(")
	builder.WriteString(fmt.Sprintf("id=%v", cs.ID))
	builder.WriteString(", name=")
	builder.WriteString(cs.Name)
	builder.WriteString(", shop_url=")
	builder.WriteString(cs.ShopURL)
	builder.WriteString(", open_time=")
	builder.WriteString(cs.OpenTime.Format(time.ANSIC))
	builder.WriteString(", close_time=")
	builder.WriteString(cs.CloseTime.Format(time.ANSIC))
	builder.WriteString(", created_at=")
	builder.WriteString(cs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(cs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", closed_at=")
	builder.WriteString(cs.ClosedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CoffeeShops is a parsable slice of CoffeeShop.
type CoffeeShops []*CoffeeShop

func (cs CoffeeShops) config(cfg config) {
	for _i := range cs {
		cs[_i].config = cfg
	}
}
