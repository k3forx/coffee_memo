// Code generated by entc, DO NOT EDIT.

package coffeeshop

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/k3forx/coffee_memo/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// ShopURL applies equality check predicate on the "shop_url" field. It's identical to ShopURLEQ.
func ShopURL(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShopURL), v))
	})
}

// OpenTime applies equality check predicate on the "open_time" field. It's identical to OpenTimeEQ.
func OpenTime(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpenTime), v))
	})
}

// CloseTime applies equality check predicate on the "close_time" field. It's identical to CloseTimeEQ.
func CloseTime(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCloseTime), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ClosedAt applies equality check predicate on the "closed_at" field. It's identical to ClosedAtEQ.
func ClosedAt(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClosedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CoffeeShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoffeeShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CoffeeShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoffeeShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// ShopURLEQ applies the EQ predicate on the "shop_url" field.
func ShopURLEQ(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShopURL), v))
	})
}

// ShopURLNEQ applies the NEQ predicate on the "shop_url" field.
func ShopURLNEQ(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShopURL), v))
	})
}

// ShopURLIn applies the In predicate on the "shop_url" field.
func ShopURLIn(vs ...string) predicate.CoffeeShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoffeeShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShopURL), v...))
	})
}

// ShopURLNotIn applies the NotIn predicate on the "shop_url" field.
func ShopURLNotIn(vs ...string) predicate.CoffeeShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoffeeShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShopURL), v...))
	})
}

// ShopURLGT applies the GT predicate on the "shop_url" field.
func ShopURLGT(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShopURL), v))
	})
}

// ShopURLGTE applies the GTE predicate on the "shop_url" field.
func ShopURLGTE(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShopURL), v))
	})
}

// ShopURLLT applies the LT predicate on the "shop_url" field.
func ShopURLLT(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShopURL), v))
	})
}

// ShopURLLTE applies the LTE predicate on the "shop_url" field.
func ShopURLLTE(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShopURL), v))
	})
}

// ShopURLContains applies the Contains predicate on the "shop_url" field.
func ShopURLContains(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShopURL), v))
	})
}

// ShopURLHasPrefix applies the HasPrefix predicate on the "shop_url" field.
func ShopURLHasPrefix(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShopURL), v))
	})
}

// ShopURLHasSuffix applies the HasSuffix predicate on the "shop_url" field.
func ShopURLHasSuffix(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShopURL), v))
	})
}

// ShopURLIsNil applies the IsNil predicate on the "shop_url" field.
func ShopURLIsNil() predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShopURL)))
	})
}

// ShopURLNotNil applies the NotNil predicate on the "shop_url" field.
func ShopURLNotNil() predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShopURL)))
	})
}

// ShopURLEqualFold applies the EqualFold predicate on the "shop_url" field.
func ShopURLEqualFold(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShopURL), v))
	})
}

// ShopURLContainsFold applies the ContainsFold predicate on the "shop_url" field.
func ShopURLContainsFold(v string) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShopURL), v))
	})
}

// OpenTimeEQ applies the EQ predicate on the "open_time" field.
func OpenTimeEQ(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpenTime), v))
	})
}

// OpenTimeNEQ applies the NEQ predicate on the "open_time" field.
func OpenTimeNEQ(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpenTime), v))
	})
}

// OpenTimeIn applies the In predicate on the "open_time" field.
func OpenTimeIn(vs ...time.Time) predicate.CoffeeShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoffeeShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOpenTime), v...))
	})
}

// OpenTimeNotIn applies the NotIn predicate on the "open_time" field.
func OpenTimeNotIn(vs ...time.Time) predicate.CoffeeShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoffeeShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOpenTime), v...))
	})
}

// OpenTimeGT applies the GT predicate on the "open_time" field.
func OpenTimeGT(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOpenTime), v))
	})
}

// OpenTimeGTE applies the GTE predicate on the "open_time" field.
func OpenTimeGTE(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOpenTime), v))
	})
}

// OpenTimeLT applies the LT predicate on the "open_time" field.
func OpenTimeLT(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOpenTime), v))
	})
}

// OpenTimeLTE applies the LTE predicate on the "open_time" field.
func OpenTimeLTE(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOpenTime), v))
	})
}

// OpenTimeIsNil applies the IsNil predicate on the "open_time" field.
func OpenTimeIsNil() predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOpenTime)))
	})
}

// OpenTimeNotNil applies the NotNil predicate on the "open_time" field.
func OpenTimeNotNil() predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOpenTime)))
	})
}

// CloseTimeEQ applies the EQ predicate on the "close_time" field.
func CloseTimeEQ(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCloseTime), v))
	})
}

// CloseTimeNEQ applies the NEQ predicate on the "close_time" field.
func CloseTimeNEQ(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCloseTime), v))
	})
}

// CloseTimeIn applies the In predicate on the "close_time" field.
func CloseTimeIn(vs ...time.Time) predicate.CoffeeShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoffeeShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCloseTime), v...))
	})
}

// CloseTimeNotIn applies the NotIn predicate on the "close_time" field.
func CloseTimeNotIn(vs ...time.Time) predicate.CoffeeShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoffeeShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCloseTime), v...))
	})
}

// CloseTimeGT applies the GT predicate on the "close_time" field.
func CloseTimeGT(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCloseTime), v))
	})
}

// CloseTimeGTE applies the GTE predicate on the "close_time" field.
func CloseTimeGTE(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCloseTime), v))
	})
}

// CloseTimeLT applies the LT predicate on the "close_time" field.
func CloseTimeLT(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCloseTime), v))
	})
}

// CloseTimeLTE applies the LTE predicate on the "close_time" field.
func CloseTimeLTE(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCloseTime), v))
	})
}

// CloseTimeIsNil applies the IsNil predicate on the "close_time" field.
func CloseTimeIsNil() predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCloseTime)))
	})
}

// CloseTimeNotNil applies the NotNil predicate on the "close_time" field.
func CloseTimeNotNil() predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCloseTime)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CoffeeShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoffeeShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CoffeeShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoffeeShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CoffeeShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoffeeShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CoffeeShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoffeeShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// ClosedAtEQ applies the EQ predicate on the "closed_at" field.
func ClosedAtEQ(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClosedAt), v))
	})
}

// ClosedAtNEQ applies the NEQ predicate on the "closed_at" field.
func ClosedAtNEQ(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClosedAt), v))
	})
}

// ClosedAtIn applies the In predicate on the "closed_at" field.
func ClosedAtIn(vs ...time.Time) predicate.CoffeeShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoffeeShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClosedAt), v...))
	})
}

// ClosedAtNotIn applies the NotIn predicate on the "closed_at" field.
func ClosedAtNotIn(vs ...time.Time) predicate.CoffeeShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoffeeShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClosedAt), v...))
	})
}

// ClosedAtGT applies the GT predicate on the "closed_at" field.
func ClosedAtGT(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClosedAt), v))
	})
}

// ClosedAtGTE applies the GTE predicate on the "closed_at" field.
func ClosedAtGTE(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClosedAt), v))
	})
}

// ClosedAtLT applies the LT predicate on the "closed_at" field.
func ClosedAtLT(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClosedAt), v))
	})
}

// ClosedAtLTE applies the LTE predicate on the "closed_at" field.
func ClosedAtLTE(v time.Time) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClosedAt), v))
	})
}

// ClosedAtIsNil applies the IsNil predicate on the "closed_at" field.
func ClosedAtIsNil() predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldClosedAt)))
	})
}

// ClosedAtNotNil applies the NotNil predicate on the "closed_at" field.
func ClosedAtNotNil() predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldClosedAt)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CoffeeShop) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CoffeeShop) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CoffeeShop) predicate.CoffeeShop {
	return predicate.CoffeeShop(func(s *sql.Selector) {
		p(s.Not())
	})
}
