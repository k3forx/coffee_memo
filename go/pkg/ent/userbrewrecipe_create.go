// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k3forx/coffee_memo/pkg/ent/user"
	"github.com/k3forx/coffee_memo/pkg/ent/userbrewrecipe"
	"github.com/k3forx/coffee_memo/pkg/ent/usercoffeebean"
)

// UserBrewRecipeCreate is the builder for creating a UserBrewRecipe entity.
type UserBrewRecipeCreate struct {
	config
	mutation *UserBrewRecipeMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (ubrc *UserBrewRecipeCreate) SetStatus(i int32) *UserBrewRecipeCreate {
	ubrc.mutation.SetStatus(i)
	return ubrc
}

// SetUserID sets the "user_id" field.
func (ubrc *UserBrewRecipeCreate) SetUserID(i int32) *UserBrewRecipeCreate {
	ubrc.mutation.SetUserID(i)
	return ubrc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ubrc *UserBrewRecipeCreate) SetNillableUserID(i *int32) *UserBrewRecipeCreate {
	if i != nil {
		ubrc.SetUserID(*i)
	}
	return ubrc
}

// SetUserCoffeeBeanID sets the "user_coffee_bean_id" field.
func (ubrc *UserBrewRecipeCreate) SetUserCoffeeBeanID(i int32) *UserBrewRecipeCreate {
	ubrc.mutation.SetUserCoffeeBeanID(i)
	return ubrc
}

// SetNillableUserCoffeeBeanID sets the "user_coffee_bean_id" field if the given value is not nil.
func (ubrc *UserBrewRecipeCreate) SetNillableUserCoffeeBeanID(i *int32) *UserBrewRecipeCreate {
	if i != nil {
		ubrc.SetUserCoffeeBeanID(*i)
	}
	return ubrc
}

// SetCoffeeBeanWeight sets the "coffee_bean_weight" field.
func (ubrc *UserBrewRecipeCreate) SetCoffeeBeanWeight(f float64) *UserBrewRecipeCreate {
	ubrc.mutation.SetCoffeeBeanWeight(f)
	return ubrc
}

// SetCoffeeBeanGrind sets the "coffee_bean_grind" field.
func (ubrc *UserBrewRecipeCreate) SetCoffeeBeanGrind(s string) *UserBrewRecipeCreate {
	ubrc.mutation.SetCoffeeBeanGrind(s)
	return ubrc
}

// SetLiquidWeight sets the "liquid_weight" field.
func (ubrc *UserBrewRecipeCreate) SetLiquidWeight(f float64) *UserBrewRecipeCreate {
	ubrc.mutation.SetLiquidWeight(f)
	return ubrc
}

// SetTemperature sets the "temperature" field.
func (ubrc *UserBrewRecipeCreate) SetTemperature(f float64) *UserBrewRecipeCreate {
	ubrc.mutation.SetTemperature(f)
	return ubrc
}

// SetStepOne sets the "step_one" field.
func (ubrc *UserBrewRecipeCreate) SetStepOne(s string) *UserBrewRecipeCreate {
	ubrc.mutation.SetStepOne(s)
	return ubrc
}

// SetStepTwo sets the "step_two" field.
func (ubrc *UserBrewRecipeCreate) SetStepTwo(s string) *UserBrewRecipeCreate {
	ubrc.mutation.SetStepTwo(s)
	return ubrc
}

// SetStepThree sets the "step_three" field.
func (ubrc *UserBrewRecipeCreate) SetStepThree(s string) *UserBrewRecipeCreate {
	ubrc.mutation.SetStepThree(s)
	return ubrc
}

// SetStepFour sets the "step_four" field.
func (ubrc *UserBrewRecipeCreate) SetStepFour(s string) *UserBrewRecipeCreate {
	ubrc.mutation.SetStepFour(s)
	return ubrc
}

// SetStepFive sets the "step_five" field.
func (ubrc *UserBrewRecipeCreate) SetStepFive(s string) *UserBrewRecipeCreate {
	ubrc.mutation.SetStepFive(s)
	return ubrc
}

// SetMemo sets the "memo" field.
func (ubrc *UserBrewRecipeCreate) SetMemo(s string) *UserBrewRecipeCreate {
	ubrc.mutation.SetMemo(s)
	return ubrc
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (ubrc *UserBrewRecipeCreate) SetNillableMemo(s *string) *UserBrewRecipeCreate {
	if s != nil {
		ubrc.SetMemo(*s)
	}
	return ubrc
}

// SetCreatedAt sets the "created_at" field.
func (ubrc *UserBrewRecipeCreate) SetCreatedAt(t time.Time) *UserBrewRecipeCreate {
	ubrc.mutation.SetCreatedAt(t)
	return ubrc
}

// SetUpdatedAt sets the "updated_at" field.
func (ubrc *UserBrewRecipeCreate) SetUpdatedAt(t time.Time) *UserBrewRecipeCreate {
	ubrc.mutation.SetUpdatedAt(t)
	return ubrc
}

// SetDeletedAt sets the "deleted_at" field.
func (ubrc *UserBrewRecipeCreate) SetDeletedAt(t time.Time) *UserBrewRecipeCreate {
	ubrc.mutation.SetDeletedAt(t)
	return ubrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ubrc *UserBrewRecipeCreate) SetNillableDeletedAt(t *time.Time) *UserBrewRecipeCreate {
	if t != nil {
		ubrc.SetDeletedAt(*t)
	}
	return ubrc
}

// SetID sets the "id" field.
func (ubrc *UserBrewRecipeCreate) SetID(i int32) *UserBrewRecipeCreate {
	ubrc.mutation.SetID(i)
	return ubrc
}

// SetUserCoffeeBean sets the "user_coffee_bean" edge to the UserCoffeeBean entity.
func (ubrc *UserBrewRecipeCreate) SetUserCoffeeBean(u *UserCoffeeBean) *UserBrewRecipeCreate {
	return ubrc.SetUserCoffeeBeanID(u.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ubrc *UserBrewRecipeCreate) SetUser(u *User) *UserBrewRecipeCreate {
	return ubrc.SetUserID(u.ID)
}

// Mutation returns the UserBrewRecipeMutation object of the builder.
func (ubrc *UserBrewRecipeCreate) Mutation() *UserBrewRecipeMutation {
	return ubrc.mutation
}

// Save creates the UserBrewRecipe in the database.
func (ubrc *UserBrewRecipeCreate) Save(ctx context.Context) (*UserBrewRecipe, error) {
	var (
		err  error
		node *UserBrewRecipe
	)
	if len(ubrc.hooks) == 0 {
		if err = ubrc.check(); err != nil {
			return nil, err
		}
		node, err = ubrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserBrewRecipeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ubrc.check(); err != nil {
				return nil, err
			}
			ubrc.mutation = mutation
			if node, err = ubrc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ubrc.hooks) - 1; i >= 0; i-- {
			if ubrc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ubrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ubrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ubrc *UserBrewRecipeCreate) SaveX(ctx context.Context) *UserBrewRecipe {
	v, err := ubrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ubrc *UserBrewRecipeCreate) Exec(ctx context.Context) error {
	_, err := ubrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubrc *UserBrewRecipeCreate) ExecX(ctx context.Context) {
	if err := ubrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ubrc *UserBrewRecipeCreate) check() error {
	if _, ok := ubrc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "UserBrewRecipe.status"`)}
	}
	if _, ok := ubrc.mutation.CoffeeBeanWeight(); !ok {
		return &ValidationError{Name: "coffee_bean_weight", err: errors.New(`ent: missing required field "UserBrewRecipe.coffee_bean_weight"`)}
	}
	if _, ok := ubrc.mutation.CoffeeBeanGrind(); !ok {
		return &ValidationError{Name: "coffee_bean_grind", err: errors.New(`ent: missing required field "UserBrewRecipe.coffee_bean_grind"`)}
	}
	if _, ok := ubrc.mutation.LiquidWeight(); !ok {
		return &ValidationError{Name: "liquid_weight", err: errors.New(`ent: missing required field "UserBrewRecipe.liquid_weight"`)}
	}
	if _, ok := ubrc.mutation.Temperature(); !ok {
		return &ValidationError{Name: "temperature", err: errors.New(`ent: missing required field "UserBrewRecipe.temperature"`)}
	}
	if _, ok := ubrc.mutation.StepOne(); !ok {
		return &ValidationError{Name: "step_one", err: errors.New(`ent: missing required field "UserBrewRecipe.step_one"`)}
	}
	if _, ok := ubrc.mutation.StepTwo(); !ok {
		return &ValidationError{Name: "step_two", err: errors.New(`ent: missing required field "UserBrewRecipe.step_two"`)}
	}
	if _, ok := ubrc.mutation.StepThree(); !ok {
		return &ValidationError{Name: "step_three", err: errors.New(`ent: missing required field "UserBrewRecipe.step_three"`)}
	}
	if _, ok := ubrc.mutation.StepFour(); !ok {
		return &ValidationError{Name: "step_four", err: errors.New(`ent: missing required field "UserBrewRecipe.step_four"`)}
	}
	if _, ok := ubrc.mutation.StepFive(); !ok {
		return &ValidationError{Name: "step_five", err: errors.New(`ent: missing required field "UserBrewRecipe.step_five"`)}
	}
	if _, ok := ubrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserBrewRecipe.created_at"`)}
	}
	if _, ok := ubrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserBrewRecipe.updated_at"`)}
	}
	return nil
}

func (ubrc *UserBrewRecipeCreate) sqlSave(ctx context.Context) (*UserBrewRecipe, error) {
	_node, _spec := ubrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ubrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	return _node, nil
}

func (ubrc *UserBrewRecipeCreate) createSpec() (*UserBrewRecipe, *sqlgraph.CreateSpec) {
	var (
		_node = &UserBrewRecipe{config: ubrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userbrewrecipe.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: userbrewrecipe.FieldID,
			},
		}
	)
	if id, ok := ubrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ubrc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userbrewrecipe.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := ubrc.mutation.CoffeeBeanWeight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbrewrecipe.FieldCoffeeBeanWeight,
		})
		_node.CoffeeBeanWeight = value
	}
	if value, ok := ubrc.mutation.CoffeeBeanGrind(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldCoffeeBeanGrind,
		})
		_node.CoffeeBeanGrind = value
	}
	if value, ok := ubrc.mutation.LiquidWeight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbrewrecipe.FieldLiquidWeight,
		})
		_node.LiquidWeight = value
	}
	if value, ok := ubrc.mutation.Temperature(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbrewrecipe.FieldTemperature,
		})
		_node.Temperature = value
	}
	if value, ok := ubrc.mutation.StepOne(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldStepOne,
		})
		_node.StepOne = value
	}
	if value, ok := ubrc.mutation.StepTwo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldStepTwo,
		})
		_node.StepTwo = value
	}
	if value, ok := ubrc.mutation.StepThree(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldStepThree,
		})
		_node.StepThree = value
	}
	if value, ok := ubrc.mutation.StepFour(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldStepFour,
		})
		_node.StepFour = value
	}
	if value, ok := ubrc.mutation.StepFive(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldStepFive,
		})
		_node.StepFive = value
	}
	if value, ok := ubrc.mutation.Memo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldMemo,
		})
		_node.Memo = value
	}
	if value, ok := ubrc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userbrewrecipe.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ubrc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userbrewrecipe.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ubrc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userbrewrecipe.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if nodes := ubrc.mutation.UserCoffeeBeanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbrewrecipe.UserCoffeeBeanTable,
			Columns: []string{userbrewrecipe.UserCoffeeBeanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: usercoffeebean.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserCoffeeBeanID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ubrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbrewrecipe.UserTable,
			Columns: []string{userbrewrecipe.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserBrewRecipeCreateBulk is the builder for creating many UserBrewRecipe entities in bulk.
type UserBrewRecipeCreateBulk struct {
	config
	builders []*UserBrewRecipeCreate
}

// Save creates the UserBrewRecipe entities in the database.
func (ubrcb *UserBrewRecipeCreateBulk) Save(ctx context.Context) ([]*UserBrewRecipe, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ubrcb.builders))
	nodes := make([]*UserBrewRecipe, len(ubrcb.builders))
	mutators := make([]Mutator, len(ubrcb.builders))
	for i := range ubrcb.builders {
		func(i int, root context.Context) {
			builder := ubrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserBrewRecipeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ubrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ubrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ubrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ubrcb *UserBrewRecipeCreateBulk) SaveX(ctx context.Context) []*UserBrewRecipe {
	v, err := ubrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ubrcb *UserBrewRecipeCreateBulk) Exec(ctx context.Context) error {
	_, err := ubrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubrcb *UserBrewRecipeCreateBulk) ExecX(ctx context.Context) {
	if err := ubrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
