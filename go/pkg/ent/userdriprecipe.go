// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/k3forx/coffee_memo/pkg/ent/user"
	"github.com/k3forx/coffee_memo/pkg/ent/usercoffeebean"
	"github.com/k3forx/coffee_memo/pkg/ent/userdriprecipe"
)

// UserDripRecipe is the model entity for the UserDripRecipe schema.
type UserDripRecipe struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int32 `json:"user_id,omitempty"`
	// CoffeeBeanID holds the value of the "coffee_bean_id" field.
	CoffeeBeanID int32 `json:"coffee_bean_id,omitempty"`
	// CoffeeBeanWeight holds the value of the "coffee_bean_weight" field.
	CoffeeBeanWeight float64 `json:"coffee_bean_weight,omitempty"`
	// CoffeeBeanGrind holds the value of the "coffee_bean_grind" field.
	CoffeeBeanGrind string `json:"coffee_bean_grind,omitempty"`
	// LiquidWeight holds the value of the "liquid_weight" field.
	LiquidWeight float64 `json:"liquid_weight,omitempty"`
	// Temperature holds the value of the "temperature" field.
	Temperature float64 `json:"temperature,omitempty"`
	// StepOne holds the value of the "step_one" field.
	StepOne string `json:"step_one,omitempty"`
	// StepTwo holds the value of the "step_two" field.
	StepTwo string `json:"step_two,omitempty"`
	// Memo holds the value of the "memo" field.
	Memo string `json:"memo,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserDripRecipeQuery when eager-loading is set.
	Edges UserDripRecipeEdges `json:"edges"`
}

// UserDripRecipeEdges holds the relations/edges for other nodes in the graph.
type UserDripRecipeEdges struct {
	// UserCoffeeBean holds the value of the user_coffee_bean edge.
	UserCoffeeBean *UserCoffeeBean `json:"user_coffee_bean,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserCoffeeBeanOrErr returns the UserCoffeeBean value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserDripRecipeEdges) UserCoffeeBeanOrErr() (*UserCoffeeBean, error) {
	if e.loadedTypes[0] {
		if e.UserCoffeeBean == nil {
			// The edge user_coffee_bean was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: usercoffeebean.Label}
		}
		return e.UserCoffeeBean, nil
	}
	return nil, &NotLoadedError{edge: "user_coffee_bean"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserDripRecipeEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserDripRecipe) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userdriprecipe.FieldCoffeeBeanWeight, userdriprecipe.FieldLiquidWeight, userdriprecipe.FieldTemperature:
			values[i] = new(sql.NullFloat64)
		case userdriprecipe.FieldID, userdriprecipe.FieldUserID, userdriprecipe.FieldCoffeeBeanID:
			values[i] = new(sql.NullInt64)
		case userdriprecipe.FieldCoffeeBeanGrind, userdriprecipe.FieldStepOne, userdriprecipe.FieldStepTwo, userdriprecipe.FieldMemo:
			values[i] = new(sql.NullString)
		case userdriprecipe.FieldCreatedAt, userdriprecipe.FieldUpdatedAt, userdriprecipe.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserDripRecipe", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserDripRecipe fields.
func (udr *UserDripRecipe) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userdriprecipe.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			udr.ID = int32(value.Int64)
		case userdriprecipe.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				udr.UserID = int32(value.Int64)
			}
		case userdriprecipe.FieldCoffeeBeanID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coffee_bean_id", values[i])
			} else if value.Valid {
				udr.CoffeeBeanID = int32(value.Int64)
			}
		case userdriprecipe.FieldCoffeeBeanWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field coffee_bean_weight", values[i])
			} else if value.Valid {
				udr.CoffeeBeanWeight = value.Float64
			}
		case userdriprecipe.FieldCoffeeBeanGrind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field coffee_bean_grind", values[i])
			} else if value.Valid {
				udr.CoffeeBeanGrind = value.String
			}
		case userdriprecipe.FieldLiquidWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field liquid_weight", values[i])
			} else if value.Valid {
				udr.LiquidWeight = value.Float64
			}
		case userdriprecipe.FieldTemperature:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field temperature", values[i])
			} else if value.Valid {
				udr.Temperature = value.Float64
			}
		case userdriprecipe.FieldStepOne:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field step_one", values[i])
			} else if value.Valid {
				udr.StepOne = value.String
			}
		case userdriprecipe.FieldStepTwo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field step_two", values[i])
			} else if value.Valid {
				udr.StepTwo = value.String
			}
		case userdriprecipe.FieldMemo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo", values[i])
			} else if value.Valid {
				udr.Memo = value.String
			}
		case userdriprecipe.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				udr.CreatedAt = value.Time
			}
		case userdriprecipe.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				udr.UpdatedAt = value.Time
			}
		case userdriprecipe.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				udr.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// QueryUserCoffeeBean queries the "user_coffee_bean" edge of the UserDripRecipe entity.
func (udr *UserDripRecipe) QueryUserCoffeeBean() *UserCoffeeBeanQuery {
	return (&UserDripRecipeClient{config: udr.config}).QueryUserCoffeeBean(udr)
}

// QueryUser queries the "user" edge of the UserDripRecipe entity.
func (udr *UserDripRecipe) QueryUser() *UserQuery {
	return (&UserDripRecipeClient{config: udr.config}).QueryUser(udr)
}

// Update returns a builder for updating this UserDripRecipe.
// Note that you need to call UserDripRecipe.Unwrap() before calling this method if this UserDripRecipe
// was returned from a transaction, and the transaction was committed or rolled back.
func (udr *UserDripRecipe) Update() *UserDripRecipeUpdateOne {
	return (&UserDripRecipeClient{config: udr.config}).UpdateOne(udr)
}

// Unwrap unwraps the UserDripRecipe entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (udr *UserDripRecipe) Unwrap() *UserDripRecipe {
	tx, ok := udr.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserDripRecipe is not a transactional entity")
	}
	udr.config.driver = tx.drv
	return udr
}

// String implements the fmt.Stringer.
func (udr *UserDripRecipe) String() string {
	var builder strings.Builder
	builder.WriteString("UserDripRecipe(")
	builder.WriteString(fmt.Sprintf("id=%v", udr.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", udr.UserID))
	builder.WriteString(", coffee_bean_id=")
	builder.WriteString(fmt.Sprintf("%v", udr.CoffeeBeanID))
	builder.WriteString(", coffee_bean_weight=")
	builder.WriteString(fmt.Sprintf("%v", udr.CoffeeBeanWeight))
	builder.WriteString(", coffee_bean_grind=")
	builder.WriteString(udr.CoffeeBeanGrind)
	builder.WriteString(", liquid_weight=")
	builder.WriteString(fmt.Sprintf("%v", udr.LiquidWeight))
	builder.WriteString(", temperature=")
	builder.WriteString(fmt.Sprintf("%v", udr.Temperature))
	builder.WriteString(", step_one=")
	builder.WriteString(udr.StepOne)
	builder.WriteString(", step_two=")
	builder.WriteString(udr.StepTwo)
	builder.WriteString(", memo=")
	builder.WriteString(udr.Memo)
	builder.WriteString(", created_at=")
	builder.WriteString(udr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(udr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(udr.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserDripRecipes is a parsable slice of UserDripRecipe.
type UserDripRecipes []*UserDripRecipe

func (udr UserDripRecipes) config(cfg config) {
	for _i := range udr {
		udr[_i].config = cfg
	}
}
