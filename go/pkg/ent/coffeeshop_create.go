// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k3forx/coffee_memo/pkg/ent/coffeeshop"
)

// CoffeeShopCreate is the builder for creating a CoffeeShop entity.
type CoffeeShopCreate struct {
	config
	mutation *CoffeeShopMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (csc *CoffeeShopCreate) SetName(s string) *CoffeeShopCreate {
	csc.mutation.SetName(s)
	return csc
}

// SetShopURL sets the "shop_url" field.
func (csc *CoffeeShopCreate) SetShopURL(s string) *CoffeeShopCreate {
	csc.mutation.SetShopURL(s)
	return csc
}

// SetNillableShopURL sets the "shop_url" field if the given value is not nil.
func (csc *CoffeeShopCreate) SetNillableShopURL(s *string) *CoffeeShopCreate {
	if s != nil {
		csc.SetShopURL(*s)
	}
	return csc
}

// SetOpenTime sets the "open_time" field.
func (csc *CoffeeShopCreate) SetOpenTime(t time.Time) *CoffeeShopCreate {
	csc.mutation.SetOpenTime(t)
	return csc
}

// SetNillableOpenTime sets the "open_time" field if the given value is not nil.
func (csc *CoffeeShopCreate) SetNillableOpenTime(t *time.Time) *CoffeeShopCreate {
	if t != nil {
		csc.SetOpenTime(*t)
	}
	return csc
}

// SetCloseTime sets the "close_time" field.
func (csc *CoffeeShopCreate) SetCloseTime(t time.Time) *CoffeeShopCreate {
	csc.mutation.SetCloseTime(t)
	return csc
}

// SetNillableCloseTime sets the "close_time" field if the given value is not nil.
func (csc *CoffeeShopCreate) SetNillableCloseTime(t *time.Time) *CoffeeShopCreate {
	if t != nil {
		csc.SetCloseTime(*t)
	}
	return csc
}

// SetCreatedAt sets the "created_at" field.
func (csc *CoffeeShopCreate) SetCreatedAt(t time.Time) *CoffeeShopCreate {
	csc.mutation.SetCreatedAt(t)
	return csc
}

// SetUpdatedAt sets the "updated_at" field.
func (csc *CoffeeShopCreate) SetUpdatedAt(t time.Time) *CoffeeShopCreate {
	csc.mutation.SetUpdatedAt(t)
	return csc
}

// SetClosedAt sets the "closed_at" field.
func (csc *CoffeeShopCreate) SetClosedAt(t time.Time) *CoffeeShopCreate {
	csc.mutation.SetClosedAt(t)
	return csc
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (csc *CoffeeShopCreate) SetNillableClosedAt(t *time.Time) *CoffeeShopCreate {
	if t != nil {
		csc.SetClosedAt(*t)
	}
	return csc
}

// SetID sets the "id" field.
func (csc *CoffeeShopCreate) SetID(i int32) *CoffeeShopCreate {
	csc.mutation.SetID(i)
	return csc
}

// Mutation returns the CoffeeShopMutation object of the builder.
func (csc *CoffeeShopCreate) Mutation() *CoffeeShopMutation {
	return csc.mutation
}

// Save creates the CoffeeShop in the database.
func (csc *CoffeeShopCreate) Save(ctx context.Context) (*CoffeeShop, error) {
	var (
		err  error
		node *CoffeeShop
	)
	if len(csc.hooks) == 0 {
		if err = csc.check(); err != nil {
			return nil, err
		}
		node, err = csc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoffeeShopMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = csc.check(); err != nil {
				return nil, err
			}
			csc.mutation = mutation
			if node, err = csc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(csc.hooks) - 1; i >= 0; i-- {
			if csc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = csc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (csc *CoffeeShopCreate) SaveX(ctx context.Context) *CoffeeShop {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *CoffeeShopCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *CoffeeShopCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *CoffeeShopCreate) check() error {
	if _, ok := csc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CoffeeShop.name"`)}
	}
	if _, ok := csc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CoffeeShop.created_at"`)}
	}
	if _, ok := csc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CoffeeShop.updated_at"`)}
	}
	return nil
}

func (csc *CoffeeShopCreate) sqlSave(ctx context.Context) (*CoffeeShop, error) {
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	return _node, nil
}

func (csc *CoffeeShopCreate) createSpec() (*CoffeeShop, *sqlgraph.CreateSpec) {
	var (
		_node = &CoffeeShop{config: csc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: coffeeshop.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: coffeeshop.FieldID,
			},
		}
	)
	if id, ok := csc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := csc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coffeeshop.FieldName,
		})
		_node.Name = value
	}
	if value, ok := csc.mutation.ShopURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coffeeshop.FieldShopURL,
		})
		_node.ShopURL = value
	}
	if value, ok := csc.mutation.OpenTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coffeeshop.FieldOpenTime,
		})
		_node.OpenTime = value
	}
	if value, ok := csc.mutation.CloseTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coffeeshop.FieldCloseTime,
		})
		_node.CloseTime = value
	}
	if value, ok := csc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coffeeshop.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := csc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coffeeshop.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := csc.mutation.ClosedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coffeeshop.FieldClosedAt,
		})
		_node.ClosedAt = value
	}
	return _node, _spec
}

// CoffeeShopCreateBulk is the builder for creating many CoffeeShop entities in bulk.
type CoffeeShopCreateBulk struct {
	config
	builders []*CoffeeShopCreate
}

// Save creates the CoffeeShop entities in the database.
func (cscb *CoffeeShopCreateBulk) Save(ctx context.Context) ([]*CoffeeShop, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*CoffeeShop, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CoffeeShopMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *CoffeeShopCreateBulk) SaveX(ctx context.Context) []*CoffeeShop {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *CoffeeShopCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *CoffeeShopCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}
