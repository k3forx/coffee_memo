// Code generated by entc, DO NOT EDIT.

package userbrewrecipe

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/k3forx/coffee_memo/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserCoffeeBeanID applies equality check predicate on the "user_coffee_bean_id" field. It's identical to UserCoffeeBeanIDEQ.
func UserCoffeeBeanID(v int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserCoffeeBeanID), v))
	})
}

// CoffeeBeanWeight applies equality check predicate on the "coffee_bean_weight" field. It's identical to CoffeeBeanWeightEQ.
func CoffeeBeanWeight(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoffeeBeanWeight), v))
	})
}

// CoffeeBeanGrind applies equality check predicate on the "coffee_bean_grind" field. It's identical to CoffeeBeanGrindEQ.
func CoffeeBeanGrind(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoffeeBeanGrind), v))
	})
}

// LiquidWeight applies equality check predicate on the "liquid_weight" field. It's identical to LiquidWeightEQ.
func LiquidWeight(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiquidWeight), v))
	})
}

// Temperature applies equality check predicate on the "temperature" field. It's identical to TemperatureEQ.
func Temperature(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemperature), v))
	})
}

// StepOne applies equality check predicate on the "step_one" field. It's identical to StepOneEQ.
func StepOne(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStepOne), v))
	})
}

// StepTwo applies equality check predicate on the "step_two" field. It's identical to StepTwoEQ.
func StepTwo(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStepTwo), v))
	})
}

// StepThree applies equality check predicate on the "step_three" field. It's identical to StepThreeEQ.
func StepThree(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStepThree), v))
	})
}

// StepFour applies equality check predicate on the "step_four" field. It's identical to StepFourEQ.
func StepFour(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStepFour), v))
	})
}

// StepFive applies equality check predicate on the "step_five" field. It's identical to StepFiveEQ.
func StepFive(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStepFive), v))
	})
}

// Memo applies equality check predicate on the "memo" field. It's identical to MemoEQ.
func Memo(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemo), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int32) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int32) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int32) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int32) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// UserCoffeeBeanIDEQ applies the EQ predicate on the "user_coffee_bean_id" field.
func UserCoffeeBeanIDEQ(v int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserCoffeeBeanID), v))
	})
}

// UserCoffeeBeanIDNEQ applies the NEQ predicate on the "user_coffee_bean_id" field.
func UserCoffeeBeanIDNEQ(v int32) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserCoffeeBeanID), v))
	})
}

// UserCoffeeBeanIDIn applies the In predicate on the "user_coffee_bean_id" field.
func UserCoffeeBeanIDIn(vs ...int32) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserCoffeeBeanID), v...))
	})
}

// UserCoffeeBeanIDNotIn applies the NotIn predicate on the "user_coffee_bean_id" field.
func UserCoffeeBeanIDNotIn(vs ...int32) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserCoffeeBeanID), v...))
	})
}

// UserCoffeeBeanIDIsNil applies the IsNil predicate on the "user_coffee_bean_id" field.
func UserCoffeeBeanIDIsNil() predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserCoffeeBeanID)))
	})
}

// UserCoffeeBeanIDNotNil applies the NotNil predicate on the "user_coffee_bean_id" field.
func UserCoffeeBeanIDNotNil() predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserCoffeeBeanID)))
	})
}

// CoffeeBeanWeightEQ applies the EQ predicate on the "coffee_bean_weight" field.
func CoffeeBeanWeightEQ(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoffeeBeanWeight), v))
	})
}

// CoffeeBeanWeightNEQ applies the NEQ predicate on the "coffee_bean_weight" field.
func CoffeeBeanWeightNEQ(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoffeeBeanWeight), v))
	})
}

// CoffeeBeanWeightIn applies the In predicate on the "coffee_bean_weight" field.
func CoffeeBeanWeightIn(vs ...float64) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoffeeBeanWeight), v...))
	})
}

// CoffeeBeanWeightNotIn applies the NotIn predicate on the "coffee_bean_weight" field.
func CoffeeBeanWeightNotIn(vs ...float64) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoffeeBeanWeight), v...))
	})
}

// CoffeeBeanWeightGT applies the GT predicate on the "coffee_bean_weight" field.
func CoffeeBeanWeightGT(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoffeeBeanWeight), v))
	})
}

// CoffeeBeanWeightGTE applies the GTE predicate on the "coffee_bean_weight" field.
func CoffeeBeanWeightGTE(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoffeeBeanWeight), v))
	})
}

// CoffeeBeanWeightLT applies the LT predicate on the "coffee_bean_weight" field.
func CoffeeBeanWeightLT(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoffeeBeanWeight), v))
	})
}

// CoffeeBeanWeightLTE applies the LTE predicate on the "coffee_bean_weight" field.
func CoffeeBeanWeightLTE(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoffeeBeanWeight), v))
	})
}

// CoffeeBeanGrindEQ applies the EQ predicate on the "coffee_bean_grind" field.
func CoffeeBeanGrindEQ(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoffeeBeanGrind), v))
	})
}

// CoffeeBeanGrindNEQ applies the NEQ predicate on the "coffee_bean_grind" field.
func CoffeeBeanGrindNEQ(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoffeeBeanGrind), v))
	})
}

// CoffeeBeanGrindIn applies the In predicate on the "coffee_bean_grind" field.
func CoffeeBeanGrindIn(vs ...string) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoffeeBeanGrind), v...))
	})
}

// CoffeeBeanGrindNotIn applies the NotIn predicate on the "coffee_bean_grind" field.
func CoffeeBeanGrindNotIn(vs ...string) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoffeeBeanGrind), v...))
	})
}

// CoffeeBeanGrindGT applies the GT predicate on the "coffee_bean_grind" field.
func CoffeeBeanGrindGT(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoffeeBeanGrind), v))
	})
}

// CoffeeBeanGrindGTE applies the GTE predicate on the "coffee_bean_grind" field.
func CoffeeBeanGrindGTE(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoffeeBeanGrind), v))
	})
}

// CoffeeBeanGrindLT applies the LT predicate on the "coffee_bean_grind" field.
func CoffeeBeanGrindLT(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoffeeBeanGrind), v))
	})
}

// CoffeeBeanGrindLTE applies the LTE predicate on the "coffee_bean_grind" field.
func CoffeeBeanGrindLTE(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoffeeBeanGrind), v))
	})
}

// CoffeeBeanGrindContains applies the Contains predicate on the "coffee_bean_grind" field.
func CoffeeBeanGrindContains(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCoffeeBeanGrind), v))
	})
}

// CoffeeBeanGrindHasPrefix applies the HasPrefix predicate on the "coffee_bean_grind" field.
func CoffeeBeanGrindHasPrefix(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCoffeeBeanGrind), v))
	})
}

// CoffeeBeanGrindHasSuffix applies the HasSuffix predicate on the "coffee_bean_grind" field.
func CoffeeBeanGrindHasSuffix(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCoffeeBeanGrind), v))
	})
}

// CoffeeBeanGrindEqualFold applies the EqualFold predicate on the "coffee_bean_grind" field.
func CoffeeBeanGrindEqualFold(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCoffeeBeanGrind), v))
	})
}

// CoffeeBeanGrindContainsFold applies the ContainsFold predicate on the "coffee_bean_grind" field.
func CoffeeBeanGrindContainsFold(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCoffeeBeanGrind), v))
	})
}

// LiquidWeightEQ applies the EQ predicate on the "liquid_weight" field.
func LiquidWeightEQ(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiquidWeight), v))
	})
}

// LiquidWeightNEQ applies the NEQ predicate on the "liquid_weight" field.
func LiquidWeightNEQ(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLiquidWeight), v))
	})
}

// LiquidWeightIn applies the In predicate on the "liquid_weight" field.
func LiquidWeightIn(vs ...float64) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLiquidWeight), v...))
	})
}

// LiquidWeightNotIn applies the NotIn predicate on the "liquid_weight" field.
func LiquidWeightNotIn(vs ...float64) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLiquidWeight), v...))
	})
}

// LiquidWeightGT applies the GT predicate on the "liquid_weight" field.
func LiquidWeightGT(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLiquidWeight), v))
	})
}

// LiquidWeightGTE applies the GTE predicate on the "liquid_weight" field.
func LiquidWeightGTE(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLiquidWeight), v))
	})
}

// LiquidWeightLT applies the LT predicate on the "liquid_weight" field.
func LiquidWeightLT(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLiquidWeight), v))
	})
}

// LiquidWeightLTE applies the LTE predicate on the "liquid_weight" field.
func LiquidWeightLTE(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLiquidWeight), v))
	})
}

// TemperatureEQ applies the EQ predicate on the "temperature" field.
func TemperatureEQ(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemperature), v))
	})
}

// TemperatureNEQ applies the NEQ predicate on the "temperature" field.
func TemperatureNEQ(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTemperature), v))
	})
}

// TemperatureIn applies the In predicate on the "temperature" field.
func TemperatureIn(vs ...float64) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTemperature), v...))
	})
}

// TemperatureNotIn applies the NotIn predicate on the "temperature" field.
func TemperatureNotIn(vs ...float64) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTemperature), v...))
	})
}

// TemperatureGT applies the GT predicate on the "temperature" field.
func TemperatureGT(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTemperature), v))
	})
}

// TemperatureGTE applies the GTE predicate on the "temperature" field.
func TemperatureGTE(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTemperature), v))
	})
}

// TemperatureLT applies the LT predicate on the "temperature" field.
func TemperatureLT(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTemperature), v))
	})
}

// TemperatureLTE applies the LTE predicate on the "temperature" field.
func TemperatureLTE(v float64) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTemperature), v))
	})
}

// StepOneEQ applies the EQ predicate on the "step_one" field.
func StepOneEQ(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStepOne), v))
	})
}

// StepOneNEQ applies the NEQ predicate on the "step_one" field.
func StepOneNEQ(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStepOne), v))
	})
}

// StepOneIn applies the In predicate on the "step_one" field.
func StepOneIn(vs ...string) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStepOne), v...))
	})
}

// StepOneNotIn applies the NotIn predicate on the "step_one" field.
func StepOneNotIn(vs ...string) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStepOne), v...))
	})
}

// StepOneGT applies the GT predicate on the "step_one" field.
func StepOneGT(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStepOne), v))
	})
}

// StepOneGTE applies the GTE predicate on the "step_one" field.
func StepOneGTE(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStepOne), v))
	})
}

// StepOneLT applies the LT predicate on the "step_one" field.
func StepOneLT(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStepOne), v))
	})
}

// StepOneLTE applies the LTE predicate on the "step_one" field.
func StepOneLTE(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStepOne), v))
	})
}

// StepOneContains applies the Contains predicate on the "step_one" field.
func StepOneContains(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStepOne), v))
	})
}

// StepOneHasPrefix applies the HasPrefix predicate on the "step_one" field.
func StepOneHasPrefix(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStepOne), v))
	})
}

// StepOneHasSuffix applies the HasSuffix predicate on the "step_one" field.
func StepOneHasSuffix(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStepOne), v))
	})
}

// StepOneEqualFold applies the EqualFold predicate on the "step_one" field.
func StepOneEqualFold(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStepOne), v))
	})
}

// StepOneContainsFold applies the ContainsFold predicate on the "step_one" field.
func StepOneContainsFold(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStepOne), v))
	})
}

// StepTwoEQ applies the EQ predicate on the "step_two" field.
func StepTwoEQ(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStepTwo), v))
	})
}

// StepTwoNEQ applies the NEQ predicate on the "step_two" field.
func StepTwoNEQ(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStepTwo), v))
	})
}

// StepTwoIn applies the In predicate on the "step_two" field.
func StepTwoIn(vs ...string) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStepTwo), v...))
	})
}

// StepTwoNotIn applies the NotIn predicate on the "step_two" field.
func StepTwoNotIn(vs ...string) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStepTwo), v...))
	})
}

// StepTwoGT applies the GT predicate on the "step_two" field.
func StepTwoGT(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStepTwo), v))
	})
}

// StepTwoGTE applies the GTE predicate on the "step_two" field.
func StepTwoGTE(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStepTwo), v))
	})
}

// StepTwoLT applies the LT predicate on the "step_two" field.
func StepTwoLT(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStepTwo), v))
	})
}

// StepTwoLTE applies the LTE predicate on the "step_two" field.
func StepTwoLTE(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStepTwo), v))
	})
}

// StepTwoContains applies the Contains predicate on the "step_two" field.
func StepTwoContains(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStepTwo), v))
	})
}

// StepTwoHasPrefix applies the HasPrefix predicate on the "step_two" field.
func StepTwoHasPrefix(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStepTwo), v))
	})
}

// StepTwoHasSuffix applies the HasSuffix predicate on the "step_two" field.
func StepTwoHasSuffix(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStepTwo), v))
	})
}

// StepTwoEqualFold applies the EqualFold predicate on the "step_two" field.
func StepTwoEqualFold(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStepTwo), v))
	})
}

// StepTwoContainsFold applies the ContainsFold predicate on the "step_two" field.
func StepTwoContainsFold(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStepTwo), v))
	})
}

// StepThreeEQ applies the EQ predicate on the "step_three" field.
func StepThreeEQ(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStepThree), v))
	})
}

// StepThreeNEQ applies the NEQ predicate on the "step_three" field.
func StepThreeNEQ(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStepThree), v))
	})
}

// StepThreeIn applies the In predicate on the "step_three" field.
func StepThreeIn(vs ...string) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStepThree), v...))
	})
}

// StepThreeNotIn applies the NotIn predicate on the "step_three" field.
func StepThreeNotIn(vs ...string) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStepThree), v...))
	})
}

// StepThreeGT applies the GT predicate on the "step_three" field.
func StepThreeGT(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStepThree), v))
	})
}

// StepThreeGTE applies the GTE predicate on the "step_three" field.
func StepThreeGTE(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStepThree), v))
	})
}

// StepThreeLT applies the LT predicate on the "step_three" field.
func StepThreeLT(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStepThree), v))
	})
}

// StepThreeLTE applies the LTE predicate on the "step_three" field.
func StepThreeLTE(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStepThree), v))
	})
}

// StepThreeContains applies the Contains predicate on the "step_three" field.
func StepThreeContains(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStepThree), v))
	})
}

// StepThreeHasPrefix applies the HasPrefix predicate on the "step_three" field.
func StepThreeHasPrefix(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStepThree), v))
	})
}

// StepThreeHasSuffix applies the HasSuffix predicate on the "step_three" field.
func StepThreeHasSuffix(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStepThree), v))
	})
}

// StepThreeEqualFold applies the EqualFold predicate on the "step_three" field.
func StepThreeEqualFold(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStepThree), v))
	})
}

// StepThreeContainsFold applies the ContainsFold predicate on the "step_three" field.
func StepThreeContainsFold(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStepThree), v))
	})
}

// StepFourEQ applies the EQ predicate on the "step_four" field.
func StepFourEQ(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStepFour), v))
	})
}

// StepFourNEQ applies the NEQ predicate on the "step_four" field.
func StepFourNEQ(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStepFour), v))
	})
}

// StepFourIn applies the In predicate on the "step_four" field.
func StepFourIn(vs ...string) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStepFour), v...))
	})
}

// StepFourNotIn applies the NotIn predicate on the "step_four" field.
func StepFourNotIn(vs ...string) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStepFour), v...))
	})
}

// StepFourGT applies the GT predicate on the "step_four" field.
func StepFourGT(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStepFour), v))
	})
}

// StepFourGTE applies the GTE predicate on the "step_four" field.
func StepFourGTE(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStepFour), v))
	})
}

// StepFourLT applies the LT predicate on the "step_four" field.
func StepFourLT(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStepFour), v))
	})
}

// StepFourLTE applies the LTE predicate on the "step_four" field.
func StepFourLTE(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStepFour), v))
	})
}

// StepFourContains applies the Contains predicate on the "step_four" field.
func StepFourContains(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStepFour), v))
	})
}

// StepFourHasPrefix applies the HasPrefix predicate on the "step_four" field.
func StepFourHasPrefix(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStepFour), v))
	})
}

// StepFourHasSuffix applies the HasSuffix predicate on the "step_four" field.
func StepFourHasSuffix(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStepFour), v))
	})
}

// StepFourEqualFold applies the EqualFold predicate on the "step_four" field.
func StepFourEqualFold(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStepFour), v))
	})
}

// StepFourContainsFold applies the ContainsFold predicate on the "step_four" field.
func StepFourContainsFold(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStepFour), v))
	})
}

// StepFiveEQ applies the EQ predicate on the "step_five" field.
func StepFiveEQ(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStepFive), v))
	})
}

// StepFiveNEQ applies the NEQ predicate on the "step_five" field.
func StepFiveNEQ(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStepFive), v))
	})
}

// StepFiveIn applies the In predicate on the "step_five" field.
func StepFiveIn(vs ...string) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStepFive), v...))
	})
}

// StepFiveNotIn applies the NotIn predicate on the "step_five" field.
func StepFiveNotIn(vs ...string) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStepFive), v...))
	})
}

// StepFiveGT applies the GT predicate on the "step_five" field.
func StepFiveGT(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStepFive), v))
	})
}

// StepFiveGTE applies the GTE predicate on the "step_five" field.
func StepFiveGTE(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStepFive), v))
	})
}

// StepFiveLT applies the LT predicate on the "step_five" field.
func StepFiveLT(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStepFive), v))
	})
}

// StepFiveLTE applies the LTE predicate on the "step_five" field.
func StepFiveLTE(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStepFive), v))
	})
}

// StepFiveContains applies the Contains predicate on the "step_five" field.
func StepFiveContains(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStepFive), v))
	})
}

// StepFiveHasPrefix applies the HasPrefix predicate on the "step_five" field.
func StepFiveHasPrefix(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStepFive), v))
	})
}

// StepFiveHasSuffix applies the HasSuffix predicate on the "step_five" field.
func StepFiveHasSuffix(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStepFive), v))
	})
}

// StepFiveEqualFold applies the EqualFold predicate on the "step_five" field.
func StepFiveEqualFold(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStepFive), v))
	})
}

// StepFiveContainsFold applies the ContainsFold predicate on the "step_five" field.
func StepFiveContainsFold(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStepFive), v))
	})
}

// MemoEQ applies the EQ predicate on the "memo" field.
func MemoEQ(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemo), v))
	})
}

// MemoNEQ applies the NEQ predicate on the "memo" field.
func MemoNEQ(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMemo), v))
	})
}

// MemoIn applies the In predicate on the "memo" field.
func MemoIn(vs ...string) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMemo), v...))
	})
}

// MemoNotIn applies the NotIn predicate on the "memo" field.
func MemoNotIn(vs ...string) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMemo), v...))
	})
}

// MemoGT applies the GT predicate on the "memo" field.
func MemoGT(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMemo), v))
	})
}

// MemoGTE applies the GTE predicate on the "memo" field.
func MemoGTE(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMemo), v))
	})
}

// MemoLT applies the LT predicate on the "memo" field.
func MemoLT(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMemo), v))
	})
}

// MemoLTE applies the LTE predicate on the "memo" field.
func MemoLTE(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMemo), v))
	})
}

// MemoContains applies the Contains predicate on the "memo" field.
func MemoContains(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMemo), v))
	})
}

// MemoHasPrefix applies the HasPrefix predicate on the "memo" field.
func MemoHasPrefix(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMemo), v))
	})
}

// MemoHasSuffix applies the HasSuffix predicate on the "memo" field.
func MemoHasSuffix(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMemo), v))
	})
}

// MemoIsNil applies the IsNil predicate on the "memo" field.
func MemoIsNil() predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMemo)))
	})
}

// MemoNotNil applies the NotNil predicate on the "memo" field.
func MemoNotNil() predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMemo)))
	})
}

// MemoEqualFold applies the EqualFold predicate on the "memo" field.
func MemoEqualFold(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMemo), v))
	})
}

// MemoContainsFold applies the ContainsFold predicate on the "memo" field.
func MemoContainsFold(v string) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMemo), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.UserBrewRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// HasUserCoffeeBean applies the HasEdge predicate on the "user_coffee_bean" edge.
func HasUserCoffeeBean() predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserCoffeeBeanTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserCoffeeBeanTable, UserCoffeeBeanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserCoffeeBeanWith applies the HasEdge predicate on the "user_coffee_bean" edge with a given conditions (other predicates).
func HasUserCoffeeBeanWith(preds ...predicate.UserCoffeeBean) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserCoffeeBeanInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserCoffeeBeanTable, UserCoffeeBeanColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserBrewRecipe) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserBrewRecipe) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserBrewRecipe) predicate.UserBrewRecipe {
	return predicate.UserBrewRecipe(func(s *sql.Selector) {
		p(s.Not())
	})
}
