// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k3forx/coffee_memo/pkg/ent/predicate"
	"github.com/k3forx/coffee_memo/pkg/ent/user"
	"github.com/k3forx/coffee_memo/pkg/ent/userbrewrecipe"
	"github.com/k3forx/coffee_memo/pkg/ent/usercoffeebean"
)

// UserBrewRecipeUpdate is the builder for updating UserBrewRecipe entities.
type UserBrewRecipeUpdate struct {
	config
	hooks    []Hook
	mutation *UserBrewRecipeMutation
}

// Where appends a list predicates to the UserBrewRecipeUpdate builder.
func (ubru *UserBrewRecipeUpdate) Where(ps ...predicate.UserBrewRecipe) *UserBrewRecipeUpdate {
	ubru.mutation.Where(ps...)
	return ubru
}

// SetStatus sets the "status" field.
func (ubru *UserBrewRecipeUpdate) SetStatus(i int32) *UserBrewRecipeUpdate {
	ubru.mutation.ResetStatus()
	ubru.mutation.SetStatus(i)
	return ubru
}

// AddStatus adds i to the "status" field.
func (ubru *UserBrewRecipeUpdate) AddStatus(i int32) *UserBrewRecipeUpdate {
	ubru.mutation.AddStatus(i)
	return ubru
}

// SetUserID sets the "user_id" field.
func (ubru *UserBrewRecipeUpdate) SetUserID(i int32) *UserBrewRecipeUpdate {
	ubru.mutation.SetUserID(i)
	return ubru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ubru *UserBrewRecipeUpdate) SetNillableUserID(i *int32) *UserBrewRecipeUpdate {
	if i != nil {
		ubru.SetUserID(*i)
	}
	return ubru
}

// ClearUserID clears the value of the "user_id" field.
func (ubru *UserBrewRecipeUpdate) ClearUserID() *UserBrewRecipeUpdate {
	ubru.mutation.ClearUserID()
	return ubru
}

// SetUserCoffeeBeanID sets the "user_coffee_bean_id" field.
func (ubru *UserBrewRecipeUpdate) SetUserCoffeeBeanID(i int32) *UserBrewRecipeUpdate {
	ubru.mutation.SetUserCoffeeBeanID(i)
	return ubru
}

// SetNillableUserCoffeeBeanID sets the "user_coffee_bean_id" field if the given value is not nil.
func (ubru *UserBrewRecipeUpdate) SetNillableUserCoffeeBeanID(i *int32) *UserBrewRecipeUpdate {
	if i != nil {
		ubru.SetUserCoffeeBeanID(*i)
	}
	return ubru
}

// ClearUserCoffeeBeanID clears the value of the "user_coffee_bean_id" field.
func (ubru *UserBrewRecipeUpdate) ClearUserCoffeeBeanID() *UserBrewRecipeUpdate {
	ubru.mutation.ClearUserCoffeeBeanID()
	return ubru
}

// SetCoffeeBeanWeight sets the "coffee_bean_weight" field.
func (ubru *UserBrewRecipeUpdate) SetCoffeeBeanWeight(f float64) *UserBrewRecipeUpdate {
	ubru.mutation.ResetCoffeeBeanWeight()
	ubru.mutation.SetCoffeeBeanWeight(f)
	return ubru
}

// AddCoffeeBeanWeight adds f to the "coffee_bean_weight" field.
func (ubru *UserBrewRecipeUpdate) AddCoffeeBeanWeight(f float64) *UserBrewRecipeUpdate {
	ubru.mutation.AddCoffeeBeanWeight(f)
	return ubru
}

// SetCoffeeBeanGrind sets the "coffee_bean_grind" field.
func (ubru *UserBrewRecipeUpdate) SetCoffeeBeanGrind(s string) *UserBrewRecipeUpdate {
	ubru.mutation.SetCoffeeBeanGrind(s)
	return ubru
}

// SetLiquidWeight sets the "liquid_weight" field.
func (ubru *UserBrewRecipeUpdate) SetLiquidWeight(f float64) *UserBrewRecipeUpdate {
	ubru.mutation.ResetLiquidWeight()
	ubru.mutation.SetLiquidWeight(f)
	return ubru
}

// AddLiquidWeight adds f to the "liquid_weight" field.
func (ubru *UserBrewRecipeUpdate) AddLiquidWeight(f float64) *UserBrewRecipeUpdate {
	ubru.mutation.AddLiquidWeight(f)
	return ubru
}

// SetTemperature sets the "temperature" field.
func (ubru *UserBrewRecipeUpdate) SetTemperature(f float64) *UserBrewRecipeUpdate {
	ubru.mutation.ResetTemperature()
	ubru.mutation.SetTemperature(f)
	return ubru
}

// AddTemperature adds f to the "temperature" field.
func (ubru *UserBrewRecipeUpdate) AddTemperature(f float64) *UserBrewRecipeUpdate {
	ubru.mutation.AddTemperature(f)
	return ubru
}

// SetStepOne sets the "step_one" field.
func (ubru *UserBrewRecipeUpdate) SetStepOne(s string) *UserBrewRecipeUpdate {
	ubru.mutation.SetStepOne(s)
	return ubru
}

// SetStepTwo sets the "step_two" field.
func (ubru *UserBrewRecipeUpdate) SetStepTwo(s string) *UserBrewRecipeUpdate {
	ubru.mutation.SetStepTwo(s)
	return ubru
}

// SetStepThree sets the "step_three" field.
func (ubru *UserBrewRecipeUpdate) SetStepThree(s string) *UserBrewRecipeUpdate {
	ubru.mutation.SetStepThree(s)
	return ubru
}

// SetStepFour sets the "step_four" field.
func (ubru *UserBrewRecipeUpdate) SetStepFour(s string) *UserBrewRecipeUpdate {
	ubru.mutation.SetStepFour(s)
	return ubru
}

// SetStepFive sets the "step_five" field.
func (ubru *UserBrewRecipeUpdate) SetStepFive(s string) *UserBrewRecipeUpdate {
	ubru.mutation.SetStepFive(s)
	return ubru
}

// SetMemo sets the "memo" field.
func (ubru *UserBrewRecipeUpdate) SetMemo(s string) *UserBrewRecipeUpdate {
	ubru.mutation.SetMemo(s)
	return ubru
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (ubru *UserBrewRecipeUpdate) SetNillableMemo(s *string) *UserBrewRecipeUpdate {
	if s != nil {
		ubru.SetMemo(*s)
	}
	return ubru
}

// ClearMemo clears the value of the "memo" field.
func (ubru *UserBrewRecipeUpdate) ClearMemo() *UserBrewRecipeUpdate {
	ubru.mutation.ClearMemo()
	return ubru
}

// SetCreatedAt sets the "created_at" field.
func (ubru *UserBrewRecipeUpdate) SetCreatedAt(t time.Time) *UserBrewRecipeUpdate {
	ubru.mutation.SetCreatedAt(t)
	return ubru
}

// SetUpdatedAt sets the "updated_at" field.
func (ubru *UserBrewRecipeUpdate) SetUpdatedAt(t time.Time) *UserBrewRecipeUpdate {
	ubru.mutation.SetUpdatedAt(t)
	return ubru
}

// SetDeletedAt sets the "deleted_at" field.
func (ubru *UserBrewRecipeUpdate) SetDeletedAt(t time.Time) *UserBrewRecipeUpdate {
	ubru.mutation.SetDeletedAt(t)
	return ubru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ubru *UserBrewRecipeUpdate) SetNillableDeletedAt(t *time.Time) *UserBrewRecipeUpdate {
	if t != nil {
		ubru.SetDeletedAt(*t)
	}
	return ubru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ubru *UserBrewRecipeUpdate) ClearDeletedAt() *UserBrewRecipeUpdate {
	ubru.mutation.ClearDeletedAt()
	return ubru
}

// SetUserCoffeeBean sets the "user_coffee_bean" edge to the UserCoffeeBean entity.
func (ubru *UserBrewRecipeUpdate) SetUserCoffeeBean(u *UserCoffeeBean) *UserBrewRecipeUpdate {
	return ubru.SetUserCoffeeBeanID(u.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ubru *UserBrewRecipeUpdate) SetUser(u *User) *UserBrewRecipeUpdate {
	return ubru.SetUserID(u.ID)
}

// Mutation returns the UserBrewRecipeMutation object of the builder.
func (ubru *UserBrewRecipeUpdate) Mutation() *UserBrewRecipeMutation {
	return ubru.mutation
}

// ClearUserCoffeeBean clears the "user_coffee_bean" edge to the UserCoffeeBean entity.
func (ubru *UserBrewRecipeUpdate) ClearUserCoffeeBean() *UserBrewRecipeUpdate {
	ubru.mutation.ClearUserCoffeeBean()
	return ubru
}

// ClearUser clears the "user" edge to the User entity.
func (ubru *UserBrewRecipeUpdate) ClearUser() *UserBrewRecipeUpdate {
	ubru.mutation.ClearUser()
	return ubru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ubru *UserBrewRecipeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ubru.hooks) == 0 {
		affected, err = ubru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserBrewRecipeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ubru.mutation = mutation
			affected, err = ubru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ubru.hooks) - 1; i >= 0; i-- {
			if ubru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ubru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ubru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ubru *UserBrewRecipeUpdate) SaveX(ctx context.Context) int {
	affected, err := ubru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ubru *UserBrewRecipeUpdate) Exec(ctx context.Context) error {
	_, err := ubru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubru *UserBrewRecipeUpdate) ExecX(ctx context.Context) {
	if err := ubru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ubru *UserBrewRecipeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userbrewrecipe.Table,
			Columns: userbrewrecipe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: userbrewrecipe.FieldID,
			},
		},
	}
	if ps := ubru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ubru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userbrewrecipe.FieldStatus,
		})
	}
	if value, ok := ubru.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userbrewrecipe.FieldStatus,
		})
	}
	if value, ok := ubru.mutation.CoffeeBeanWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbrewrecipe.FieldCoffeeBeanWeight,
		})
	}
	if value, ok := ubru.mutation.AddedCoffeeBeanWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbrewrecipe.FieldCoffeeBeanWeight,
		})
	}
	if value, ok := ubru.mutation.CoffeeBeanGrind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldCoffeeBeanGrind,
		})
	}
	if value, ok := ubru.mutation.LiquidWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbrewrecipe.FieldLiquidWeight,
		})
	}
	if value, ok := ubru.mutation.AddedLiquidWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbrewrecipe.FieldLiquidWeight,
		})
	}
	if value, ok := ubru.mutation.Temperature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbrewrecipe.FieldTemperature,
		})
	}
	if value, ok := ubru.mutation.AddedTemperature(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbrewrecipe.FieldTemperature,
		})
	}
	if value, ok := ubru.mutation.StepOne(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldStepOne,
		})
	}
	if value, ok := ubru.mutation.StepTwo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldStepTwo,
		})
	}
	if value, ok := ubru.mutation.StepThree(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldStepThree,
		})
	}
	if value, ok := ubru.mutation.StepFour(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldStepFour,
		})
	}
	if value, ok := ubru.mutation.StepFive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldStepFive,
		})
	}
	if value, ok := ubru.mutation.Memo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldMemo,
		})
	}
	if ubru.mutation.MemoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userbrewrecipe.FieldMemo,
		})
	}
	if value, ok := ubru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userbrewrecipe.FieldCreatedAt,
		})
	}
	if value, ok := ubru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userbrewrecipe.FieldUpdatedAt,
		})
	}
	if value, ok := ubru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userbrewrecipe.FieldDeletedAt,
		})
	}
	if ubru.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userbrewrecipe.FieldDeletedAt,
		})
	}
	if ubru.mutation.UserCoffeeBeanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbrewrecipe.UserCoffeeBeanTable,
			Columns: []string{userbrewrecipe.UserCoffeeBeanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: usercoffeebean.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ubru.mutation.UserCoffeeBeanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbrewrecipe.UserCoffeeBeanTable,
			Columns: []string{userbrewrecipe.UserCoffeeBeanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: usercoffeebean.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ubru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbrewrecipe.UserTable,
			Columns: []string{userbrewrecipe.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ubru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbrewrecipe.UserTable,
			Columns: []string{userbrewrecipe.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ubru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userbrewrecipe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserBrewRecipeUpdateOne is the builder for updating a single UserBrewRecipe entity.
type UserBrewRecipeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserBrewRecipeMutation
}

// SetStatus sets the "status" field.
func (ubruo *UserBrewRecipeUpdateOne) SetStatus(i int32) *UserBrewRecipeUpdateOne {
	ubruo.mutation.ResetStatus()
	ubruo.mutation.SetStatus(i)
	return ubruo
}

// AddStatus adds i to the "status" field.
func (ubruo *UserBrewRecipeUpdateOne) AddStatus(i int32) *UserBrewRecipeUpdateOne {
	ubruo.mutation.AddStatus(i)
	return ubruo
}

// SetUserID sets the "user_id" field.
func (ubruo *UserBrewRecipeUpdateOne) SetUserID(i int32) *UserBrewRecipeUpdateOne {
	ubruo.mutation.SetUserID(i)
	return ubruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ubruo *UserBrewRecipeUpdateOne) SetNillableUserID(i *int32) *UserBrewRecipeUpdateOne {
	if i != nil {
		ubruo.SetUserID(*i)
	}
	return ubruo
}

// ClearUserID clears the value of the "user_id" field.
func (ubruo *UserBrewRecipeUpdateOne) ClearUserID() *UserBrewRecipeUpdateOne {
	ubruo.mutation.ClearUserID()
	return ubruo
}

// SetUserCoffeeBeanID sets the "user_coffee_bean_id" field.
func (ubruo *UserBrewRecipeUpdateOne) SetUserCoffeeBeanID(i int32) *UserBrewRecipeUpdateOne {
	ubruo.mutation.SetUserCoffeeBeanID(i)
	return ubruo
}

// SetNillableUserCoffeeBeanID sets the "user_coffee_bean_id" field if the given value is not nil.
func (ubruo *UserBrewRecipeUpdateOne) SetNillableUserCoffeeBeanID(i *int32) *UserBrewRecipeUpdateOne {
	if i != nil {
		ubruo.SetUserCoffeeBeanID(*i)
	}
	return ubruo
}

// ClearUserCoffeeBeanID clears the value of the "user_coffee_bean_id" field.
func (ubruo *UserBrewRecipeUpdateOne) ClearUserCoffeeBeanID() *UserBrewRecipeUpdateOne {
	ubruo.mutation.ClearUserCoffeeBeanID()
	return ubruo
}

// SetCoffeeBeanWeight sets the "coffee_bean_weight" field.
func (ubruo *UserBrewRecipeUpdateOne) SetCoffeeBeanWeight(f float64) *UserBrewRecipeUpdateOne {
	ubruo.mutation.ResetCoffeeBeanWeight()
	ubruo.mutation.SetCoffeeBeanWeight(f)
	return ubruo
}

// AddCoffeeBeanWeight adds f to the "coffee_bean_weight" field.
func (ubruo *UserBrewRecipeUpdateOne) AddCoffeeBeanWeight(f float64) *UserBrewRecipeUpdateOne {
	ubruo.mutation.AddCoffeeBeanWeight(f)
	return ubruo
}

// SetCoffeeBeanGrind sets the "coffee_bean_grind" field.
func (ubruo *UserBrewRecipeUpdateOne) SetCoffeeBeanGrind(s string) *UserBrewRecipeUpdateOne {
	ubruo.mutation.SetCoffeeBeanGrind(s)
	return ubruo
}

// SetLiquidWeight sets the "liquid_weight" field.
func (ubruo *UserBrewRecipeUpdateOne) SetLiquidWeight(f float64) *UserBrewRecipeUpdateOne {
	ubruo.mutation.ResetLiquidWeight()
	ubruo.mutation.SetLiquidWeight(f)
	return ubruo
}

// AddLiquidWeight adds f to the "liquid_weight" field.
func (ubruo *UserBrewRecipeUpdateOne) AddLiquidWeight(f float64) *UserBrewRecipeUpdateOne {
	ubruo.mutation.AddLiquidWeight(f)
	return ubruo
}

// SetTemperature sets the "temperature" field.
func (ubruo *UserBrewRecipeUpdateOne) SetTemperature(f float64) *UserBrewRecipeUpdateOne {
	ubruo.mutation.ResetTemperature()
	ubruo.mutation.SetTemperature(f)
	return ubruo
}

// AddTemperature adds f to the "temperature" field.
func (ubruo *UserBrewRecipeUpdateOne) AddTemperature(f float64) *UserBrewRecipeUpdateOne {
	ubruo.mutation.AddTemperature(f)
	return ubruo
}

// SetStepOne sets the "step_one" field.
func (ubruo *UserBrewRecipeUpdateOne) SetStepOne(s string) *UserBrewRecipeUpdateOne {
	ubruo.mutation.SetStepOne(s)
	return ubruo
}

// SetStepTwo sets the "step_two" field.
func (ubruo *UserBrewRecipeUpdateOne) SetStepTwo(s string) *UserBrewRecipeUpdateOne {
	ubruo.mutation.SetStepTwo(s)
	return ubruo
}

// SetStepThree sets the "step_three" field.
func (ubruo *UserBrewRecipeUpdateOne) SetStepThree(s string) *UserBrewRecipeUpdateOne {
	ubruo.mutation.SetStepThree(s)
	return ubruo
}

// SetStepFour sets the "step_four" field.
func (ubruo *UserBrewRecipeUpdateOne) SetStepFour(s string) *UserBrewRecipeUpdateOne {
	ubruo.mutation.SetStepFour(s)
	return ubruo
}

// SetStepFive sets the "step_five" field.
func (ubruo *UserBrewRecipeUpdateOne) SetStepFive(s string) *UserBrewRecipeUpdateOne {
	ubruo.mutation.SetStepFive(s)
	return ubruo
}

// SetMemo sets the "memo" field.
func (ubruo *UserBrewRecipeUpdateOne) SetMemo(s string) *UserBrewRecipeUpdateOne {
	ubruo.mutation.SetMemo(s)
	return ubruo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (ubruo *UserBrewRecipeUpdateOne) SetNillableMemo(s *string) *UserBrewRecipeUpdateOne {
	if s != nil {
		ubruo.SetMemo(*s)
	}
	return ubruo
}

// ClearMemo clears the value of the "memo" field.
func (ubruo *UserBrewRecipeUpdateOne) ClearMemo() *UserBrewRecipeUpdateOne {
	ubruo.mutation.ClearMemo()
	return ubruo
}

// SetCreatedAt sets the "created_at" field.
func (ubruo *UserBrewRecipeUpdateOne) SetCreatedAt(t time.Time) *UserBrewRecipeUpdateOne {
	ubruo.mutation.SetCreatedAt(t)
	return ubruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ubruo *UserBrewRecipeUpdateOne) SetUpdatedAt(t time.Time) *UserBrewRecipeUpdateOne {
	ubruo.mutation.SetUpdatedAt(t)
	return ubruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ubruo *UserBrewRecipeUpdateOne) SetDeletedAt(t time.Time) *UserBrewRecipeUpdateOne {
	ubruo.mutation.SetDeletedAt(t)
	return ubruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ubruo *UserBrewRecipeUpdateOne) SetNillableDeletedAt(t *time.Time) *UserBrewRecipeUpdateOne {
	if t != nil {
		ubruo.SetDeletedAt(*t)
	}
	return ubruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ubruo *UserBrewRecipeUpdateOne) ClearDeletedAt() *UserBrewRecipeUpdateOne {
	ubruo.mutation.ClearDeletedAt()
	return ubruo
}

// SetUserCoffeeBean sets the "user_coffee_bean" edge to the UserCoffeeBean entity.
func (ubruo *UserBrewRecipeUpdateOne) SetUserCoffeeBean(u *UserCoffeeBean) *UserBrewRecipeUpdateOne {
	return ubruo.SetUserCoffeeBeanID(u.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ubruo *UserBrewRecipeUpdateOne) SetUser(u *User) *UserBrewRecipeUpdateOne {
	return ubruo.SetUserID(u.ID)
}

// Mutation returns the UserBrewRecipeMutation object of the builder.
func (ubruo *UserBrewRecipeUpdateOne) Mutation() *UserBrewRecipeMutation {
	return ubruo.mutation
}

// ClearUserCoffeeBean clears the "user_coffee_bean" edge to the UserCoffeeBean entity.
func (ubruo *UserBrewRecipeUpdateOne) ClearUserCoffeeBean() *UserBrewRecipeUpdateOne {
	ubruo.mutation.ClearUserCoffeeBean()
	return ubruo
}

// ClearUser clears the "user" edge to the User entity.
func (ubruo *UserBrewRecipeUpdateOne) ClearUser() *UserBrewRecipeUpdateOne {
	ubruo.mutation.ClearUser()
	return ubruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ubruo *UserBrewRecipeUpdateOne) Select(field string, fields ...string) *UserBrewRecipeUpdateOne {
	ubruo.fields = append([]string{field}, fields...)
	return ubruo
}

// Save executes the query and returns the updated UserBrewRecipe entity.
func (ubruo *UserBrewRecipeUpdateOne) Save(ctx context.Context) (*UserBrewRecipe, error) {
	var (
		err  error
		node *UserBrewRecipe
	)
	if len(ubruo.hooks) == 0 {
		node, err = ubruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserBrewRecipeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ubruo.mutation = mutation
			node, err = ubruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ubruo.hooks) - 1; i >= 0; i-- {
			if ubruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ubruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ubruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ubruo *UserBrewRecipeUpdateOne) SaveX(ctx context.Context) *UserBrewRecipe {
	node, err := ubruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ubruo *UserBrewRecipeUpdateOne) Exec(ctx context.Context) error {
	_, err := ubruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubruo *UserBrewRecipeUpdateOne) ExecX(ctx context.Context) {
	if err := ubruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ubruo *UserBrewRecipeUpdateOne) sqlSave(ctx context.Context) (_node *UserBrewRecipe, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userbrewrecipe.Table,
			Columns: userbrewrecipe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: userbrewrecipe.FieldID,
			},
		},
	}
	id, ok := ubruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserBrewRecipe.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ubruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userbrewrecipe.FieldID)
		for _, f := range fields {
			if !userbrewrecipe.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userbrewrecipe.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ubruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ubruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userbrewrecipe.FieldStatus,
		})
	}
	if value, ok := ubruo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userbrewrecipe.FieldStatus,
		})
	}
	if value, ok := ubruo.mutation.CoffeeBeanWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbrewrecipe.FieldCoffeeBeanWeight,
		})
	}
	if value, ok := ubruo.mutation.AddedCoffeeBeanWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbrewrecipe.FieldCoffeeBeanWeight,
		})
	}
	if value, ok := ubruo.mutation.CoffeeBeanGrind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldCoffeeBeanGrind,
		})
	}
	if value, ok := ubruo.mutation.LiquidWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbrewrecipe.FieldLiquidWeight,
		})
	}
	if value, ok := ubruo.mutation.AddedLiquidWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbrewrecipe.FieldLiquidWeight,
		})
	}
	if value, ok := ubruo.mutation.Temperature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbrewrecipe.FieldTemperature,
		})
	}
	if value, ok := ubruo.mutation.AddedTemperature(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbrewrecipe.FieldTemperature,
		})
	}
	if value, ok := ubruo.mutation.StepOne(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldStepOne,
		})
	}
	if value, ok := ubruo.mutation.StepTwo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldStepTwo,
		})
	}
	if value, ok := ubruo.mutation.StepThree(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldStepThree,
		})
	}
	if value, ok := ubruo.mutation.StepFour(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldStepFour,
		})
	}
	if value, ok := ubruo.mutation.StepFive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldStepFive,
		})
	}
	if value, ok := ubruo.mutation.Memo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbrewrecipe.FieldMemo,
		})
	}
	if ubruo.mutation.MemoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userbrewrecipe.FieldMemo,
		})
	}
	if value, ok := ubruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userbrewrecipe.FieldCreatedAt,
		})
	}
	if value, ok := ubruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userbrewrecipe.FieldUpdatedAt,
		})
	}
	if value, ok := ubruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userbrewrecipe.FieldDeletedAt,
		})
	}
	if ubruo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userbrewrecipe.FieldDeletedAt,
		})
	}
	if ubruo.mutation.UserCoffeeBeanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbrewrecipe.UserCoffeeBeanTable,
			Columns: []string{userbrewrecipe.UserCoffeeBeanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: usercoffeebean.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ubruo.mutation.UserCoffeeBeanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbrewrecipe.UserCoffeeBeanTable,
			Columns: []string{userbrewrecipe.UserCoffeeBeanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: usercoffeebean.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ubruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbrewrecipe.UserTable,
			Columns: []string{userbrewrecipe.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ubruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbrewrecipe.UserTable,
			Columns: []string{userbrewrecipe.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserBrewRecipe{config: ubruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ubruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userbrewrecipe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
