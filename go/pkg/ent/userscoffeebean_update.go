// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k3forx/coffee_memo/pkg/ent/predicate"
	"github.com/k3forx/coffee_memo/pkg/ent/userscoffeebean"
)

// UsersCoffeeBeanUpdate is the builder for updating UsersCoffeeBean entities.
type UsersCoffeeBeanUpdate struct {
	config
	hooks    []Hook
	mutation *UsersCoffeeBeanMutation
}

// Where appends a list predicates to the UsersCoffeeBeanUpdate builder.
func (ucbu *UsersCoffeeBeanUpdate) Where(ps ...predicate.UsersCoffeeBean) *UsersCoffeeBeanUpdate {
	ucbu.mutation.Where(ps...)
	return ucbu
}

// SetUserID sets the "user_id" field.
func (ucbu *UsersCoffeeBeanUpdate) SetUserID(i int32) *UsersCoffeeBeanUpdate {
	ucbu.mutation.ResetUserID()
	ucbu.mutation.SetUserID(i)
	return ucbu
}

// AddUserID adds i to the "user_id" field.
func (ucbu *UsersCoffeeBeanUpdate) AddUserID(i int32) *UsersCoffeeBeanUpdate {
	ucbu.mutation.AddUserID(i)
	return ucbu
}

// SetCoffeeBeanID sets the "coffee_bean_id" field.
func (ucbu *UsersCoffeeBeanUpdate) SetCoffeeBeanID(i int32) *UsersCoffeeBeanUpdate {
	ucbu.mutation.ResetCoffeeBeanID()
	ucbu.mutation.SetCoffeeBeanID(i)
	return ucbu
}

// AddCoffeeBeanID adds i to the "coffee_bean_id" field.
func (ucbu *UsersCoffeeBeanUpdate) AddCoffeeBeanID(i int32) *UsersCoffeeBeanUpdate {
	ucbu.mutation.AddCoffeeBeanID(i)
	return ucbu
}

// SetCreatedAt sets the "created_at" field.
func (ucbu *UsersCoffeeBeanUpdate) SetCreatedAt(t time.Time) *UsersCoffeeBeanUpdate {
	ucbu.mutation.SetCreatedAt(t)
	return ucbu
}

// SetUpdatedAt sets the "updated_at" field.
func (ucbu *UsersCoffeeBeanUpdate) SetUpdatedAt(t time.Time) *UsersCoffeeBeanUpdate {
	ucbu.mutation.SetUpdatedAt(t)
	return ucbu
}

// SetDeletedAt sets the "deleted_at" field.
func (ucbu *UsersCoffeeBeanUpdate) SetDeletedAt(t time.Time) *UsersCoffeeBeanUpdate {
	ucbu.mutation.SetDeletedAt(t)
	return ucbu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ucbu *UsersCoffeeBeanUpdate) SetNillableDeletedAt(t *time.Time) *UsersCoffeeBeanUpdate {
	if t != nil {
		ucbu.SetDeletedAt(*t)
	}
	return ucbu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ucbu *UsersCoffeeBeanUpdate) ClearDeletedAt() *UsersCoffeeBeanUpdate {
	ucbu.mutation.ClearDeletedAt()
	return ucbu
}

// Mutation returns the UsersCoffeeBeanMutation object of the builder.
func (ucbu *UsersCoffeeBeanUpdate) Mutation() *UsersCoffeeBeanMutation {
	return ucbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucbu *UsersCoffeeBeanUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ucbu.hooks) == 0 {
		affected, err = ucbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UsersCoffeeBeanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ucbu.mutation = mutation
			affected, err = ucbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ucbu.hooks) - 1; i >= 0; i-- {
			if ucbu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ucbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ucbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ucbu *UsersCoffeeBeanUpdate) SaveX(ctx context.Context) int {
	affected, err := ucbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucbu *UsersCoffeeBeanUpdate) Exec(ctx context.Context) error {
	_, err := ucbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucbu *UsersCoffeeBeanUpdate) ExecX(ctx context.Context) {
	if err := ucbu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucbu *UsersCoffeeBeanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userscoffeebean.Table,
			Columns: userscoffeebean.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: userscoffeebean.FieldID,
			},
		},
	}
	if ps := ucbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucbu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userscoffeebean.FieldUserID,
		})
	}
	if value, ok := ucbu.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userscoffeebean.FieldUserID,
		})
	}
	if value, ok := ucbu.mutation.CoffeeBeanID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userscoffeebean.FieldCoffeeBeanID,
		})
	}
	if value, ok := ucbu.mutation.AddedCoffeeBeanID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userscoffeebean.FieldCoffeeBeanID,
		})
	}
	if value, ok := ucbu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userscoffeebean.FieldCreatedAt,
		})
	}
	if value, ok := ucbu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userscoffeebean.FieldUpdatedAt,
		})
	}
	if value, ok := ucbu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userscoffeebean.FieldDeletedAt,
		})
	}
	if ucbu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userscoffeebean.FieldDeletedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userscoffeebean.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UsersCoffeeBeanUpdateOne is the builder for updating a single UsersCoffeeBean entity.
type UsersCoffeeBeanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UsersCoffeeBeanMutation
}

// SetUserID sets the "user_id" field.
func (ucbuo *UsersCoffeeBeanUpdateOne) SetUserID(i int32) *UsersCoffeeBeanUpdateOne {
	ucbuo.mutation.ResetUserID()
	ucbuo.mutation.SetUserID(i)
	return ucbuo
}

// AddUserID adds i to the "user_id" field.
func (ucbuo *UsersCoffeeBeanUpdateOne) AddUserID(i int32) *UsersCoffeeBeanUpdateOne {
	ucbuo.mutation.AddUserID(i)
	return ucbuo
}

// SetCoffeeBeanID sets the "coffee_bean_id" field.
func (ucbuo *UsersCoffeeBeanUpdateOne) SetCoffeeBeanID(i int32) *UsersCoffeeBeanUpdateOne {
	ucbuo.mutation.ResetCoffeeBeanID()
	ucbuo.mutation.SetCoffeeBeanID(i)
	return ucbuo
}

// AddCoffeeBeanID adds i to the "coffee_bean_id" field.
func (ucbuo *UsersCoffeeBeanUpdateOne) AddCoffeeBeanID(i int32) *UsersCoffeeBeanUpdateOne {
	ucbuo.mutation.AddCoffeeBeanID(i)
	return ucbuo
}

// SetCreatedAt sets the "created_at" field.
func (ucbuo *UsersCoffeeBeanUpdateOne) SetCreatedAt(t time.Time) *UsersCoffeeBeanUpdateOne {
	ucbuo.mutation.SetCreatedAt(t)
	return ucbuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ucbuo *UsersCoffeeBeanUpdateOne) SetUpdatedAt(t time.Time) *UsersCoffeeBeanUpdateOne {
	ucbuo.mutation.SetUpdatedAt(t)
	return ucbuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ucbuo *UsersCoffeeBeanUpdateOne) SetDeletedAt(t time.Time) *UsersCoffeeBeanUpdateOne {
	ucbuo.mutation.SetDeletedAt(t)
	return ucbuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ucbuo *UsersCoffeeBeanUpdateOne) SetNillableDeletedAt(t *time.Time) *UsersCoffeeBeanUpdateOne {
	if t != nil {
		ucbuo.SetDeletedAt(*t)
	}
	return ucbuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ucbuo *UsersCoffeeBeanUpdateOne) ClearDeletedAt() *UsersCoffeeBeanUpdateOne {
	ucbuo.mutation.ClearDeletedAt()
	return ucbuo
}

// Mutation returns the UsersCoffeeBeanMutation object of the builder.
func (ucbuo *UsersCoffeeBeanUpdateOne) Mutation() *UsersCoffeeBeanMutation {
	return ucbuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucbuo *UsersCoffeeBeanUpdateOne) Select(field string, fields ...string) *UsersCoffeeBeanUpdateOne {
	ucbuo.fields = append([]string{field}, fields...)
	return ucbuo
}

// Save executes the query and returns the updated UsersCoffeeBean entity.
func (ucbuo *UsersCoffeeBeanUpdateOne) Save(ctx context.Context) (*UsersCoffeeBean, error) {
	var (
		err  error
		node *UsersCoffeeBean
	)
	if len(ucbuo.hooks) == 0 {
		node, err = ucbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UsersCoffeeBeanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ucbuo.mutation = mutation
			node, err = ucbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ucbuo.hooks) - 1; i >= 0; i-- {
			if ucbuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ucbuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ucbuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ucbuo *UsersCoffeeBeanUpdateOne) SaveX(ctx context.Context) *UsersCoffeeBean {
	node, err := ucbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucbuo *UsersCoffeeBeanUpdateOne) Exec(ctx context.Context) error {
	_, err := ucbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucbuo *UsersCoffeeBeanUpdateOne) ExecX(ctx context.Context) {
	if err := ucbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucbuo *UsersCoffeeBeanUpdateOne) sqlSave(ctx context.Context) (_node *UsersCoffeeBean, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userscoffeebean.Table,
			Columns: userscoffeebean.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: userscoffeebean.FieldID,
			},
		},
	}
	id, ok := ucbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UsersCoffeeBean.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userscoffeebean.FieldID)
		for _, f := range fields {
			if !userscoffeebean.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userscoffeebean.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucbuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userscoffeebean.FieldUserID,
		})
	}
	if value, ok := ucbuo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userscoffeebean.FieldUserID,
		})
	}
	if value, ok := ucbuo.mutation.CoffeeBeanID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userscoffeebean.FieldCoffeeBeanID,
		})
	}
	if value, ok := ucbuo.mutation.AddedCoffeeBeanID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userscoffeebean.FieldCoffeeBeanID,
		})
	}
	if value, ok := ucbuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userscoffeebean.FieldCreatedAt,
		})
	}
	if value, ok := ucbuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userscoffeebean.FieldUpdatedAt,
		})
	}
	if value, ok := ucbuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userscoffeebean.FieldDeletedAt,
		})
	}
	if ucbuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userscoffeebean.FieldDeletedAt,
		})
	}
	_node = &UsersCoffeeBean{config: ucbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userscoffeebean.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
