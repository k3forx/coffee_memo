// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/k3forx/coffee_memo/pkg/ent/coffeebean"
)

// CoffeeBean is the model entity for the CoffeeBean schema.
type CoffeeBean struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// FarmName holds the value of the "farm_name" field.
	FarmName string `json:"farm_name,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// ShopID holds the value of the "shop_id" field.
	ShopID string `json:"shop_id,omitempty"`
	// RoastedDegree holds the value of the "roasted_degree" field.
	RoastedDegree string `json:"roasted_degree,omitempty"`
	// RoastedAt holds the value of the "roasted_at" field.
	RoastedAt time.Time `json:"roasted_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CoffeeBean) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case coffeebean.FieldID:
			values[i] = new(sql.NullInt64)
		case coffeebean.FieldName, coffeebean.FieldFarmName, coffeebean.FieldCountry, coffeebean.FieldShopID, coffeebean.FieldRoastedDegree:
			values[i] = new(sql.NullString)
		case coffeebean.FieldRoastedAt, coffeebean.FieldCreatedAt, coffeebean.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CoffeeBean", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CoffeeBean fields.
func (cb *CoffeeBean) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coffeebean.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cb.ID = int32(value.Int64)
		case coffeebean.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cb.Name = value.String
			}
		case coffeebean.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farm_name", values[i])
			} else if value.Valid {
				cb.FarmName = value.String
			}
		case coffeebean.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				cb.Country = value.String
			}
		case coffeebean.FieldShopID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shop_id", values[i])
			} else if value.Valid {
				cb.ShopID = value.String
			}
		case coffeebean.FieldRoastedDegree:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field roasted_degree", values[i])
			} else if value.Valid {
				cb.RoastedDegree = value.String
			}
		case coffeebean.FieldRoastedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field roasted_at", values[i])
			} else if value.Valid {
				cb.RoastedAt = value.Time
			}
		case coffeebean.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cb.CreatedAt = value.Time
			}
		case coffeebean.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cb.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CoffeeBean.
// Note that you need to call CoffeeBean.Unwrap() before calling this method if this CoffeeBean
// was returned from a transaction, and the transaction was committed or rolled back.
func (cb *CoffeeBean) Update() *CoffeeBeanUpdateOne {
	return (&CoffeeBeanClient{config: cb.config}).UpdateOne(cb)
}

// Unwrap unwraps the CoffeeBean entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cb *CoffeeBean) Unwrap() *CoffeeBean {
	tx, ok := cb.config.driver.(*txDriver)
	if !ok {
		panic("ent: CoffeeBean is not a transactional entity")
	}
	cb.config.driver = tx.drv
	return cb
}

// String implements the fmt.Stringer.
func (cb *CoffeeBean) String() string {
	var builder strings.Builder
	builder.WriteString("CoffeeBean(")
	builder.WriteString(fmt.Sprintf("id=%v", cb.ID))
	builder.WriteString(", name=")
	builder.WriteString(cb.Name)
	builder.WriteString(", farm_name=")
	builder.WriteString(cb.FarmName)
	builder.WriteString(", country=")
	builder.WriteString(cb.Country)
	builder.WriteString(", shop_id=")
	builder.WriteString(cb.ShopID)
	builder.WriteString(", roasted_degree=")
	builder.WriteString(cb.RoastedDegree)
	builder.WriteString(", roasted_at=")
	builder.WriteString(cb.RoastedAt.Format(time.ANSIC))
	builder.WriteString(", created_at=")
	builder.WriteString(cb.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(cb.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CoffeeBeans is a parsable slice of CoffeeBean.
type CoffeeBeans []*CoffeeBean

func (cb CoffeeBeans) config(cfg config) {
	for _i := range cb {
		cb[_i].config = cfg
	}
}
