// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k3forx/coffee_memo/pkg/ent/driprecipe"
)

// DripRecipeCreate is the builder for creating a DripRecipe entity.
type DripRecipeCreate struct {
	config
	mutation *DripRecipeMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (drc *DripRecipeCreate) SetUserID(i int32) *DripRecipeCreate {
	drc.mutation.SetUserID(i)
	return drc
}

// SetCoffeeBeanID sets the "coffee_bean_id" field.
func (drc *DripRecipeCreate) SetCoffeeBeanID(i int32) *DripRecipeCreate {
	drc.mutation.SetCoffeeBeanID(i)
	return drc
}

// SetCoffeeBeanWeight sets the "coffee_bean_weight" field.
func (drc *DripRecipeCreate) SetCoffeeBeanWeight(f float64) *DripRecipeCreate {
	drc.mutation.SetCoffeeBeanWeight(f)
	return drc
}

// SetLiquidWeight sets the "liquid_weight" field.
func (drc *DripRecipeCreate) SetLiquidWeight(f float64) *DripRecipeCreate {
	drc.mutation.SetLiquidWeight(f)
	return drc
}

// SetTemperature sets the "temperature" field.
func (drc *DripRecipeCreate) SetTemperature(f float64) *DripRecipeCreate {
	drc.mutation.SetTemperature(f)
	return drc
}

// SetSteamTime sets the "steam_time" field.
func (drc *DripRecipeCreate) SetSteamTime(i int32) *DripRecipeCreate {
	drc.mutation.SetSteamTime(i)
	return drc
}

// SetDripTime sets the "drip_time" field.
func (drc *DripRecipeCreate) SetDripTime(i int32) *DripRecipeCreate {
	drc.mutation.SetDripTime(i)
	return drc
}

// SetMemo sets the "memo" field.
func (drc *DripRecipeCreate) SetMemo(s string) *DripRecipeCreate {
	drc.mutation.SetMemo(s)
	return drc
}

// SetCreatedAt sets the "created_at" field.
func (drc *DripRecipeCreate) SetCreatedAt(t time.Time) *DripRecipeCreate {
	drc.mutation.SetCreatedAt(t)
	return drc
}

// SetUpdatedAt sets the "updated_at" field.
func (drc *DripRecipeCreate) SetUpdatedAt(t time.Time) *DripRecipeCreate {
	drc.mutation.SetUpdatedAt(t)
	return drc
}

// SetID sets the "id" field.
func (drc *DripRecipeCreate) SetID(i int32) *DripRecipeCreate {
	drc.mutation.SetID(i)
	return drc
}

// Mutation returns the DripRecipeMutation object of the builder.
func (drc *DripRecipeCreate) Mutation() *DripRecipeMutation {
	return drc.mutation
}

// Save creates the DripRecipe in the database.
func (drc *DripRecipeCreate) Save(ctx context.Context) (*DripRecipe, error) {
	var (
		err  error
		node *DripRecipe
	)
	if len(drc.hooks) == 0 {
		if err = drc.check(); err != nil {
			return nil, err
		}
		node, err = drc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DripRecipeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = drc.check(); err != nil {
				return nil, err
			}
			drc.mutation = mutation
			if node, err = drc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(drc.hooks) - 1; i >= 0; i-- {
			if drc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = drc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, drc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (drc *DripRecipeCreate) SaveX(ctx context.Context) *DripRecipe {
	v, err := drc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drc *DripRecipeCreate) Exec(ctx context.Context) error {
	_, err := drc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drc *DripRecipeCreate) ExecX(ctx context.Context) {
	if err := drc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drc *DripRecipeCreate) check() error {
	if _, ok := drc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "DripRecipe.user_id"`)}
	}
	if _, ok := drc.mutation.CoffeeBeanID(); !ok {
		return &ValidationError{Name: "coffee_bean_id", err: errors.New(`ent: missing required field "DripRecipe.coffee_bean_id"`)}
	}
	if _, ok := drc.mutation.CoffeeBeanWeight(); !ok {
		return &ValidationError{Name: "coffee_bean_weight", err: errors.New(`ent: missing required field "DripRecipe.coffee_bean_weight"`)}
	}
	if _, ok := drc.mutation.LiquidWeight(); !ok {
		return &ValidationError{Name: "liquid_weight", err: errors.New(`ent: missing required field "DripRecipe.liquid_weight"`)}
	}
	if _, ok := drc.mutation.Temperature(); !ok {
		return &ValidationError{Name: "temperature", err: errors.New(`ent: missing required field "DripRecipe.temperature"`)}
	}
	if _, ok := drc.mutation.SteamTime(); !ok {
		return &ValidationError{Name: "steam_time", err: errors.New(`ent: missing required field "DripRecipe.steam_time"`)}
	}
	if _, ok := drc.mutation.DripTime(); !ok {
		return &ValidationError{Name: "drip_time", err: errors.New(`ent: missing required field "DripRecipe.drip_time"`)}
	}
	if _, ok := drc.mutation.Memo(); !ok {
		return &ValidationError{Name: "memo", err: errors.New(`ent: missing required field "DripRecipe.memo"`)}
	}
	if _, ok := drc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DripRecipe.created_at"`)}
	}
	if _, ok := drc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DripRecipe.updated_at"`)}
	}
	return nil
}

func (drc *DripRecipeCreate) sqlSave(ctx context.Context) (*DripRecipe, error) {
	_node, _spec := drc.createSpec()
	if err := sqlgraph.CreateNode(ctx, drc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	return _node, nil
}

func (drc *DripRecipeCreate) createSpec() (*DripRecipe, *sqlgraph.CreateSpec) {
	var (
		_node = &DripRecipe{config: drc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: driprecipe.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: driprecipe.FieldID,
			},
		}
	)
	if id, ok := drc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := drc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: driprecipe.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := drc.mutation.CoffeeBeanID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: driprecipe.FieldCoffeeBeanID,
		})
		_node.CoffeeBeanID = value
	}
	if value, ok := drc.mutation.CoffeeBeanWeight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: driprecipe.FieldCoffeeBeanWeight,
		})
		_node.CoffeeBeanWeight = value
	}
	if value, ok := drc.mutation.LiquidWeight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: driprecipe.FieldLiquidWeight,
		})
		_node.LiquidWeight = value
	}
	if value, ok := drc.mutation.Temperature(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: driprecipe.FieldTemperature,
		})
		_node.Temperature = value
	}
	if value, ok := drc.mutation.SteamTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: driprecipe.FieldSteamTime,
		})
		_node.SteamTime = value
	}
	if value, ok := drc.mutation.DripTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: driprecipe.FieldDripTime,
		})
		_node.DripTime = value
	}
	if value, ok := drc.mutation.Memo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: driprecipe.FieldMemo,
		})
		_node.Memo = value
	}
	if value, ok := drc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: driprecipe.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := drc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: driprecipe.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// DripRecipeCreateBulk is the builder for creating many DripRecipe entities in bulk.
type DripRecipeCreateBulk struct {
	config
	builders []*DripRecipeCreate
}

// Save creates the DripRecipe entities in the database.
func (drcb *DripRecipeCreateBulk) Save(ctx context.Context) ([]*DripRecipe, error) {
	specs := make([]*sqlgraph.CreateSpec, len(drcb.builders))
	nodes := make([]*DripRecipe, len(drcb.builders))
	mutators := make([]Mutator, len(drcb.builders))
	for i := range drcb.builders {
		func(i int, root context.Context) {
			builder := drcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DripRecipeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, drcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, drcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, drcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (drcb *DripRecipeCreateBulk) SaveX(ctx context.Context) []*DripRecipe {
	v, err := drcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drcb *DripRecipeCreateBulk) Exec(ctx context.Context) error {
	_, err := drcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drcb *DripRecipeCreateBulk) ExecX(ctx context.Context) {
	if err := drcb.Exec(ctx); err != nil {
		panic(err)
	}
}
