// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k3forx/coffee_memo/pkg/ent/goosedbversion"
)

// GooseDbVersionCreate is the builder for creating a GooseDbVersion entity.
type GooseDbVersionCreate struct {
	config
	mutation *GooseDbVersionMutation
	hooks    []Hook
}

// SetVersionID sets the "version_id" field.
func (gdvc *GooseDbVersionCreate) SetVersionID(i int) *GooseDbVersionCreate {
	gdvc.mutation.SetVersionID(i)
	return gdvc
}

// SetIsApplied sets the "is_applied" field.
func (gdvc *GooseDbVersionCreate) SetIsApplied(b bool) *GooseDbVersionCreate {
	gdvc.mutation.SetIsApplied(b)
	return gdvc
}

// SetTstamp sets the "tstamp" field.
func (gdvc *GooseDbVersionCreate) SetTstamp(t time.Time) *GooseDbVersionCreate {
	gdvc.mutation.SetTstamp(t)
	return gdvc
}

// SetNillableTstamp sets the "tstamp" field if the given value is not nil.
func (gdvc *GooseDbVersionCreate) SetNillableTstamp(t *time.Time) *GooseDbVersionCreate {
	if t != nil {
		gdvc.SetTstamp(*t)
	}
	return gdvc
}

// SetID sets the "id" field.
func (gdvc *GooseDbVersionCreate) SetID(u uint64) *GooseDbVersionCreate {
	gdvc.mutation.SetID(u)
	return gdvc
}

// Mutation returns the GooseDbVersionMutation object of the builder.
func (gdvc *GooseDbVersionCreate) Mutation() *GooseDbVersionMutation {
	return gdvc.mutation
}

// Save creates the GooseDbVersion in the database.
func (gdvc *GooseDbVersionCreate) Save(ctx context.Context) (*GooseDbVersion, error) {
	var (
		err  error
		node *GooseDbVersion
	)
	if len(gdvc.hooks) == 0 {
		if err = gdvc.check(); err != nil {
			return nil, err
		}
		node, err = gdvc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GooseDbVersionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gdvc.check(); err != nil {
				return nil, err
			}
			gdvc.mutation = mutation
			if node, err = gdvc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gdvc.hooks) - 1; i >= 0; i-- {
			if gdvc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gdvc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gdvc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gdvc *GooseDbVersionCreate) SaveX(ctx context.Context) *GooseDbVersion {
	v, err := gdvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gdvc *GooseDbVersionCreate) Exec(ctx context.Context) error {
	_, err := gdvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gdvc *GooseDbVersionCreate) ExecX(ctx context.Context) {
	if err := gdvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gdvc *GooseDbVersionCreate) check() error {
	if _, ok := gdvc.mutation.VersionID(); !ok {
		return &ValidationError{Name: "version_id", err: errors.New(`ent: missing required field "GooseDbVersion.version_id"`)}
	}
	if _, ok := gdvc.mutation.IsApplied(); !ok {
		return &ValidationError{Name: "is_applied", err: errors.New(`ent: missing required field "GooseDbVersion.is_applied"`)}
	}
	return nil
}

func (gdvc *GooseDbVersionCreate) sqlSave(ctx context.Context) (*GooseDbVersion, error) {
	_node, _spec := gdvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gdvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (gdvc *GooseDbVersionCreate) createSpec() (*GooseDbVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &GooseDbVersion{config: gdvc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goosedbversion.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: goosedbversion.FieldID,
			},
		}
	)
	if id, ok := gdvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gdvc.mutation.VersionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goosedbversion.FieldVersionID,
		})
		_node.VersionID = value
	}
	if value, ok := gdvc.mutation.IsApplied(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goosedbversion.FieldIsApplied,
		})
		_node.IsApplied = value
	}
	if value, ok := gdvc.mutation.Tstamp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goosedbversion.FieldTstamp,
		})
		_node.Tstamp = value
	}
	return _node, _spec
}

// GooseDbVersionCreateBulk is the builder for creating many GooseDbVersion entities in bulk.
type GooseDbVersionCreateBulk struct {
	config
	builders []*GooseDbVersionCreate
}

// Save creates the GooseDbVersion entities in the database.
func (gdvcb *GooseDbVersionCreateBulk) Save(ctx context.Context) ([]*GooseDbVersion, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gdvcb.builders))
	nodes := make([]*GooseDbVersion, len(gdvcb.builders))
	mutators := make([]Mutator, len(gdvcb.builders))
	for i := range gdvcb.builders {
		func(i int, root context.Context) {
			builder := gdvcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GooseDbVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gdvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gdvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gdvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gdvcb *GooseDbVersionCreateBulk) SaveX(ctx context.Context) []*GooseDbVersion {
	v, err := gdvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gdvcb *GooseDbVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := gdvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gdvcb *GooseDbVersionCreateBulk) ExecX(ctx context.Context) {
	if err := gdvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
