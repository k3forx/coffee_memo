// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k3forx/coffee_memo/pkg/ent/predicate"
	"github.com/k3forx/coffee_memo/pkg/ent/user"
	"github.com/k3forx/coffee_memo/pkg/ent/usercoffeebean"
	"github.com/k3forx/coffee_memo/pkg/ent/userdriprecipe"
)

// UserDripRecipeUpdate is the builder for updating UserDripRecipe entities.
type UserDripRecipeUpdate struct {
	config
	hooks    []Hook
	mutation *UserDripRecipeMutation
}

// Where appends a list predicates to the UserDripRecipeUpdate builder.
func (udru *UserDripRecipeUpdate) Where(ps ...predicate.UserDripRecipe) *UserDripRecipeUpdate {
	udru.mutation.Where(ps...)
	return udru
}

// SetUserID sets the "user_id" field.
func (udru *UserDripRecipeUpdate) SetUserID(i int32) *UserDripRecipeUpdate {
	udru.mutation.SetUserID(i)
	return udru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (udru *UserDripRecipeUpdate) SetNillableUserID(i *int32) *UserDripRecipeUpdate {
	if i != nil {
		udru.SetUserID(*i)
	}
	return udru
}

// ClearUserID clears the value of the "user_id" field.
func (udru *UserDripRecipeUpdate) ClearUserID() *UserDripRecipeUpdate {
	udru.mutation.ClearUserID()
	return udru
}

// SetCoffeeBeanID sets the "coffee_bean_id" field.
func (udru *UserDripRecipeUpdate) SetCoffeeBeanID(i int32) *UserDripRecipeUpdate {
	udru.mutation.SetCoffeeBeanID(i)
	return udru
}

// SetNillableCoffeeBeanID sets the "coffee_bean_id" field if the given value is not nil.
func (udru *UserDripRecipeUpdate) SetNillableCoffeeBeanID(i *int32) *UserDripRecipeUpdate {
	if i != nil {
		udru.SetCoffeeBeanID(*i)
	}
	return udru
}

// ClearCoffeeBeanID clears the value of the "coffee_bean_id" field.
func (udru *UserDripRecipeUpdate) ClearCoffeeBeanID() *UserDripRecipeUpdate {
	udru.mutation.ClearCoffeeBeanID()
	return udru
}

// SetCoffeeBeanWeight sets the "coffee_bean_weight" field.
func (udru *UserDripRecipeUpdate) SetCoffeeBeanWeight(f float64) *UserDripRecipeUpdate {
	udru.mutation.ResetCoffeeBeanWeight()
	udru.mutation.SetCoffeeBeanWeight(f)
	return udru
}

// AddCoffeeBeanWeight adds f to the "coffee_bean_weight" field.
func (udru *UserDripRecipeUpdate) AddCoffeeBeanWeight(f float64) *UserDripRecipeUpdate {
	udru.mutation.AddCoffeeBeanWeight(f)
	return udru
}

// SetCoffeeBeanGrind sets the "coffee_bean_grind" field.
func (udru *UserDripRecipeUpdate) SetCoffeeBeanGrind(s string) *UserDripRecipeUpdate {
	udru.mutation.SetCoffeeBeanGrind(s)
	return udru
}

// SetLiquidWeight sets the "liquid_weight" field.
func (udru *UserDripRecipeUpdate) SetLiquidWeight(f float64) *UserDripRecipeUpdate {
	udru.mutation.ResetLiquidWeight()
	udru.mutation.SetLiquidWeight(f)
	return udru
}

// AddLiquidWeight adds f to the "liquid_weight" field.
func (udru *UserDripRecipeUpdate) AddLiquidWeight(f float64) *UserDripRecipeUpdate {
	udru.mutation.AddLiquidWeight(f)
	return udru
}

// SetTemperature sets the "temperature" field.
func (udru *UserDripRecipeUpdate) SetTemperature(f float64) *UserDripRecipeUpdate {
	udru.mutation.ResetTemperature()
	udru.mutation.SetTemperature(f)
	return udru
}

// AddTemperature adds f to the "temperature" field.
func (udru *UserDripRecipeUpdate) AddTemperature(f float64) *UserDripRecipeUpdate {
	udru.mutation.AddTemperature(f)
	return udru
}

// SetStepOne sets the "step_one" field.
func (udru *UserDripRecipeUpdate) SetStepOne(s string) *UserDripRecipeUpdate {
	udru.mutation.SetStepOne(s)
	return udru
}

// SetStepTwo sets the "step_two" field.
func (udru *UserDripRecipeUpdate) SetStepTwo(s string) *UserDripRecipeUpdate {
	udru.mutation.SetStepTwo(s)
	return udru
}

// SetMemo sets the "memo" field.
func (udru *UserDripRecipeUpdate) SetMemo(s string) *UserDripRecipeUpdate {
	udru.mutation.SetMemo(s)
	return udru
}

// SetCreatedAt sets the "created_at" field.
func (udru *UserDripRecipeUpdate) SetCreatedAt(t time.Time) *UserDripRecipeUpdate {
	udru.mutation.SetCreatedAt(t)
	return udru
}

// SetUpdatedAt sets the "updated_at" field.
func (udru *UserDripRecipeUpdate) SetUpdatedAt(t time.Time) *UserDripRecipeUpdate {
	udru.mutation.SetUpdatedAt(t)
	return udru
}

// SetDeletedAt sets the "deleted_at" field.
func (udru *UserDripRecipeUpdate) SetDeletedAt(t time.Time) *UserDripRecipeUpdate {
	udru.mutation.SetDeletedAt(t)
	return udru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (udru *UserDripRecipeUpdate) SetNillableDeletedAt(t *time.Time) *UserDripRecipeUpdate {
	if t != nil {
		udru.SetDeletedAt(*t)
	}
	return udru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (udru *UserDripRecipeUpdate) ClearDeletedAt() *UserDripRecipeUpdate {
	udru.mutation.ClearDeletedAt()
	return udru
}

// SetUserCoffeeBeanID sets the "user_coffee_bean" edge to the UserCoffeeBean entity by ID.
func (udru *UserDripRecipeUpdate) SetUserCoffeeBeanID(id int32) *UserDripRecipeUpdate {
	udru.mutation.SetUserCoffeeBeanID(id)
	return udru
}

// SetNillableUserCoffeeBeanID sets the "user_coffee_bean" edge to the UserCoffeeBean entity by ID if the given value is not nil.
func (udru *UserDripRecipeUpdate) SetNillableUserCoffeeBeanID(id *int32) *UserDripRecipeUpdate {
	if id != nil {
		udru = udru.SetUserCoffeeBeanID(*id)
	}
	return udru
}

// SetUserCoffeeBean sets the "user_coffee_bean" edge to the UserCoffeeBean entity.
func (udru *UserDripRecipeUpdate) SetUserCoffeeBean(u *UserCoffeeBean) *UserDripRecipeUpdate {
	return udru.SetUserCoffeeBeanID(u.ID)
}

// SetUser sets the "user" edge to the User entity.
func (udru *UserDripRecipeUpdate) SetUser(u *User) *UserDripRecipeUpdate {
	return udru.SetUserID(u.ID)
}

// Mutation returns the UserDripRecipeMutation object of the builder.
func (udru *UserDripRecipeUpdate) Mutation() *UserDripRecipeMutation {
	return udru.mutation
}

// ClearUserCoffeeBean clears the "user_coffee_bean" edge to the UserCoffeeBean entity.
func (udru *UserDripRecipeUpdate) ClearUserCoffeeBean() *UserDripRecipeUpdate {
	udru.mutation.ClearUserCoffeeBean()
	return udru
}

// ClearUser clears the "user" edge to the User entity.
func (udru *UserDripRecipeUpdate) ClearUser() *UserDripRecipeUpdate {
	udru.mutation.ClearUser()
	return udru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (udru *UserDripRecipeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(udru.hooks) == 0 {
		affected, err = udru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserDripRecipeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			udru.mutation = mutation
			affected, err = udru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(udru.hooks) - 1; i >= 0; i-- {
			if udru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = udru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, udru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (udru *UserDripRecipeUpdate) SaveX(ctx context.Context) int {
	affected, err := udru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (udru *UserDripRecipeUpdate) Exec(ctx context.Context) error {
	_, err := udru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udru *UserDripRecipeUpdate) ExecX(ctx context.Context) {
	if err := udru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (udru *UserDripRecipeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userdriprecipe.Table,
			Columns: userdriprecipe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: userdriprecipe.FieldID,
			},
		},
	}
	if ps := udru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := udru.mutation.CoffeeBeanWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userdriprecipe.FieldCoffeeBeanWeight,
		})
	}
	if value, ok := udru.mutation.AddedCoffeeBeanWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userdriprecipe.FieldCoffeeBeanWeight,
		})
	}
	if value, ok := udru.mutation.CoffeeBeanGrind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdriprecipe.FieldCoffeeBeanGrind,
		})
	}
	if value, ok := udru.mutation.LiquidWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userdriprecipe.FieldLiquidWeight,
		})
	}
	if value, ok := udru.mutation.AddedLiquidWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userdriprecipe.FieldLiquidWeight,
		})
	}
	if value, ok := udru.mutation.Temperature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userdriprecipe.FieldTemperature,
		})
	}
	if value, ok := udru.mutation.AddedTemperature(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userdriprecipe.FieldTemperature,
		})
	}
	if value, ok := udru.mutation.StepOne(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdriprecipe.FieldStepOne,
		})
	}
	if value, ok := udru.mutation.StepTwo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdriprecipe.FieldStepTwo,
		})
	}
	if value, ok := udru.mutation.Memo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdriprecipe.FieldMemo,
		})
	}
	if value, ok := udru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userdriprecipe.FieldCreatedAt,
		})
	}
	if value, ok := udru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userdriprecipe.FieldUpdatedAt,
		})
	}
	if value, ok := udru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userdriprecipe.FieldDeletedAt,
		})
	}
	if udru.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userdriprecipe.FieldDeletedAt,
		})
	}
	if udru.mutation.UserCoffeeBeanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdriprecipe.UserCoffeeBeanTable,
			Columns: []string{userdriprecipe.UserCoffeeBeanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: usercoffeebean.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := udru.mutation.UserCoffeeBeanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdriprecipe.UserCoffeeBeanTable,
			Columns: []string{userdriprecipe.UserCoffeeBeanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: usercoffeebean.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if udru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdriprecipe.UserTable,
			Columns: []string{userdriprecipe.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := udru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdriprecipe.UserTable,
			Columns: []string{userdriprecipe.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, udru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdriprecipe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserDripRecipeUpdateOne is the builder for updating a single UserDripRecipe entity.
type UserDripRecipeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserDripRecipeMutation
}

// SetUserID sets the "user_id" field.
func (udruo *UserDripRecipeUpdateOne) SetUserID(i int32) *UserDripRecipeUpdateOne {
	udruo.mutation.SetUserID(i)
	return udruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (udruo *UserDripRecipeUpdateOne) SetNillableUserID(i *int32) *UserDripRecipeUpdateOne {
	if i != nil {
		udruo.SetUserID(*i)
	}
	return udruo
}

// ClearUserID clears the value of the "user_id" field.
func (udruo *UserDripRecipeUpdateOne) ClearUserID() *UserDripRecipeUpdateOne {
	udruo.mutation.ClearUserID()
	return udruo
}

// SetCoffeeBeanID sets the "coffee_bean_id" field.
func (udruo *UserDripRecipeUpdateOne) SetCoffeeBeanID(i int32) *UserDripRecipeUpdateOne {
	udruo.mutation.SetCoffeeBeanID(i)
	return udruo
}

// SetNillableCoffeeBeanID sets the "coffee_bean_id" field if the given value is not nil.
func (udruo *UserDripRecipeUpdateOne) SetNillableCoffeeBeanID(i *int32) *UserDripRecipeUpdateOne {
	if i != nil {
		udruo.SetCoffeeBeanID(*i)
	}
	return udruo
}

// ClearCoffeeBeanID clears the value of the "coffee_bean_id" field.
func (udruo *UserDripRecipeUpdateOne) ClearCoffeeBeanID() *UserDripRecipeUpdateOne {
	udruo.mutation.ClearCoffeeBeanID()
	return udruo
}

// SetCoffeeBeanWeight sets the "coffee_bean_weight" field.
func (udruo *UserDripRecipeUpdateOne) SetCoffeeBeanWeight(f float64) *UserDripRecipeUpdateOne {
	udruo.mutation.ResetCoffeeBeanWeight()
	udruo.mutation.SetCoffeeBeanWeight(f)
	return udruo
}

// AddCoffeeBeanWeight adds f to the "coffee_bean_weight" field.
func (udruo *UserDripRecipeUpdateOne) AddCoffeeBeanWeight(f float64) *UserDripRecipeUpdateOne {
	udruo.mutation.AddCoffeeBeanWeight(f)
	return udruo
}

// SetCoffeeBeanGrind sets the "coffee_bean_grind" field.
func (udruo *UserDripRecipeUpdateOne) SetCoffeeBeanGrind(s string) *UserDripRecipeUpdateOne {
	udruo.mutation.SetCoffeeBeanGrind(s)
	return udruo
}

// SetLiquidWeight sets the "liquid_weight" field.
func (udruo *UserDripRecipeUpdateOne) SetLiquidWeight(f float64) *UserDripRecipeUpdateOne {
	udruo.mutation.ResetLiquidWeight()
	udruo.mutation.SetLiquidWeight(f)
	return udruo
}

// AddLiquidWeight adds f to the "liquid_weight" field.
func (udruo *UserDripRecipeUpdateOne) AddLiquidWeight(f float64) *UserDripRecipeUpdateOne {
	udruo.mutation.AddLiquidWeight(f)
	return udruo
}

// SetTemperature sets the "temperature" field.
func (udruo *UserDripRecipeUpdateOne) SetTemperature(f float64) *UserDripRecipeUpdateOne {
	udruo.mutation.ResetTemperature()
	udruo.mutation.SetTemperature(f)
	return udruo
}

// AddTemperature adds f to the "temperature" field.
func (udruo *UserDripRecipeUpdateOne) AddTemperature(f float64) *UserDripRecipeUpdateOne {
	udruo.mutation.AddTemperature(f)
	return udruo
}

// SetStepOne sets the "step_one" field.
func (udruo *UserDripRecipeUpdateOne) SetStepOne(s string) *UserDripRecipeUpdateOne {
	udruo.mutation.SetStepOne(s)
	return udruo
}

// SetStepTwo sets the "step_two" field.
func (udruo *UserDripRecipeUpdateOne) SetStepTwo(s string) *UserDripRecipeUpdateOne {
	udruo.mutation.SetStepTwo(s)
	return udruo
}

// SetMemo sets the "memo" field.
func (udruo *UserDripRecipeUpdateOne) SetMemo(s string) *UserDripRecipeUpdateOne {
	udruo.mutation.SetMemo(s)
	return udruo
}

// SetCreatedAt sets the "created_at" field.
func (udruo *UserDripRecipeUpdateOne) SetCreatedAt(t time.Time) *UserDripRecipeUpdateOne {
	udruo.mutation.SetCreatedAt(t)
	return udruo
}

// SetUpdatedAt sets the "updated_at" field.
func (udruo *UserDripRecipeUpdateOne) SetUpdatedAt(t time.Time) *UserDripRecipeUpdateOne {
	udruo.mutation.SetUpdatedAt(t)
	return udruo
}

// SetDeletedAt sets the "deleted_at" field.
func (udruo *UserDripRecipeUpdateOne) SetDeletedAt(t time.Time) *UserDripRecipeUpdateOne {
	udruo.mutation.SetDeletedAt(t)
	return udruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (udruo *UserDripRecipeUpdateOne) SetNillableDeletedAt(t *time.Time) *UserDripRecipeUpdateOne {
	if t != nil {
		udruo.SetDeletedAt(*t)
	}
	return udruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (udruo *UserDripRecipeUpdateOne) ClearDeletedAt() *UserDripRecipeUpdateOne {
	udruo.mutation.ClearDeletedAt()
	return udruo
}

// SetUserCoffeeBeanID sets the "user_coffee_bean" edge to the UserCoffeeBean entity by ID.
func (udruo *UserDripRecipeUpdateOne) SetUserCoffeeBeanID(id int32) *UserDripRecipeUpdateOne {
	udruo.mutation.SetUserCoffeeBeanID(id)
	return udruo
}

// SetNillableUserCoffeeBeanID sets the "user_coffee_bean" edge to the UserCoffeeBean entity by ID if the given value is not nil.
func (udruo *UserDripRecipeUpdateOne) SetNillableUserCoffeeBeanID(id *int32) *UserDripRecipeUpdateOne {
	if id != nil {
		udruo = udruo.SetUserCoffeeBeanID(*id)
	}
	return udruo
}

// SetUserCoffeeBean sets the "user_coffee_bean" edge to the UserCoffeeBean entity.
func (udruo *UserDripRecipeUpdateOne) SetUserCoffeeBean(u *UserCoffeeBean) *UserDripRecipeUpdateOne {
	return udruo.SetUserCoffeeBeanID(u.ID)
}

// SetUser sets the "user" edge to the User entity.
func (udruo *UserDripRecipeUpdateOne) SetUser(u *User) *UserDripRecipeUpdateOne {
	return udruo.SetUserID(u.ID)
}

// Mutation returns the UserDripRecipeMutation object of the builder.
func (udruo *UserDripRecipeUpdateOne) Mutation() *UserDripRecipeMutation {
	return udruo.mutation
}

// ClearUserCoffeeBean clears the "user_coffee_bean" edge to the UserCoffeeBean entity.
func (udruo *UserDripRecipeUpdateOne) ClearUserCoffeeBean() *UserDripRecipeUpdateOne {
	udruo.mutation.ClearUserCoffeeBean()
	return udruo
}

// ClearUser clears the "user" edge to the User entity.
func (udruo *UserDripRecipeUpdateOne) ClearUser() *UserDripRecipeUpdateOne {
	udruo.mutation.ClearUser()
	return udruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (udruo *UserDripRecipeUpdateOne) Select(field string, fields ...string) *UserDripRecipeUpdateOne {
	udruo.fields = append([]string{field}, fields...)
	return udruo
}

// Save executes the query and returns the updated UserDripRecipe entity.
func (udruo *UserDripRecipeUpdateOne) Save(ctx context.Context) (*UserDripRecipe, error) {
	var (
		err  error
		node *UserDripRecipe
	)
	if len(udruo.hooks) == 0 {
		node, err = udruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserDripRecipeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			udruo.mutation = mutation
			node, err = udruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(udruo.hooks) - 1; i >= 0; i-- {
			if udruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = udruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, udruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (udruo *UserDripRecipeUpdateOne) SaveX(ctx context.Context) *UserDripRecipe {
	node, err := udruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (udruo *UserDripRecipeUpdateOne) Exec(ctx context.Context) error {
	_, err := udruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udruo *UserDripRecipeUpdateOne) ExecX(ctx context.Context) {
	if err := udruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (udruo *UserDripRecipeUpdateOne) sqlSave(ctx context.Context) (_node *UserDripRecipe, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userdriprecipe.Table,
			Columns: userdriprecipe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: userdriprecipe.FieldID,
			},
		},
	}
	id, ok := udruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserDripRecipe.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := udruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userdriprecipe.FieldID)
		for _, f := range fields {
			if !userdriprecipe.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userdriprecipe.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := udruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := udruo.mutation.CoffeeBeanWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userdriprecipe.FieldCoffeeBeanWeight,
		})
	}
	if value, ok := udruo.mutation.AddedCoffeeBeanWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userdriprecipe.FieldCoffeeBeanWeight,
		})
	}
	if value, ok := udruo.mutation.CoffeeBeanGrind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdriprecipe.FieldCoffeeBeanGrind,
		})
	}
	if value, ok := udruo.mutation.LiquidWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userdriprecipe.FieldLiquidWeight,
		})
	}
	if value, ok := udruo.mutation.AddedLiquidWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userdriprecipe.FieldLiquidWeight,
		})
	}
	if value, ok := udruo.mutation.Temperature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userdriprecipe.FieldTemperature,
		})
	}
	if value, ok := udruo.mutation.AddedTemperature(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userdriprecipe.FieldTemperature,
		})
	}
	if value, ok := udruo.mutation.StepOne(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdriprecipe.FieldStepOne,
		})
	}
	if value, ok := udruo.mutation.StepTwo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdriprecipe.FieldStepTwo,
		})
	}
	if value, ok := udruo.mutation.Memo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdriprecipe.FieldMemo,
		})
	}
	if value, ok := udruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userdriprecipe.FieldCreatedAt,
		})
	}
	if value, ok := udruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userdriprecipe.FieldUpdatedAt,
		})
	}
	if value, ok := udruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userdriprecipe.FieldDeletedAt,
		})
	}
	if udruo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userdriprecipe.FieldDeletedAt,
		})
	}
	if udruo.mutation.UserCoffeeBeanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdriprecipe.UserCoffeeBeanTable,
			Columns: []string{userdriprecipe.UserCoffeeBeanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: usercoffeebean.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := udruo.mutation.UserCoffeeBeanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdriprecipe.UserCoffeeBeanTable,
			Columns: []string{userdriprecipe.UserCoffeeBeanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: usercoffeebean.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if udruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdriprecipe.UserTable,
			Columns: []string{userdriprecipe.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := udruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdriprecipe.UserTable,
			Columns: []string{userdriprecipe.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserDripRecipe{config: udruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, udruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdriprecipe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
