// Code generated by entc, DO NOT EDIT.

package goosedbversion

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/k3forx/coffee_memo/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// VersionID applies equality check predicate on the "version_id" field. It's identical to VersionIDEQ.
func VersionID(v int) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersionID), v))
	})
}

// IsApplied applies equality check predicate on the "is_applied" field. It's identical to IsAppliedEQ.
func IsApplied(v bool) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsApplied), v))
	})
}

// Tstamp applies equality check predicate on the "tstamp" field. It's identical to TstampEQ.
func Tstamp(v time.Time) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTstamp), v))
	})
}

// VersionIDEQ applies the EQ predicate on the "version_id" field.
func VersionIDEQ(v int) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersionID), v))
	})
}

// VersionIDNEQ applies the NEQ predicate on the "version_id" field.
func VersionIDNEQ(v int) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersionID), v))
	})
}

// VersionIDIn applies the In predicate on the "version_id" field.
func VersionIDIn(vs ...int) predicate.GooseDbVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVersionID), v...))
	})
}

// VersionIDNotIn applies the NotIn predicate on the "version_id" field.
func VersionIDNotIn(vs ...int) predicate.GooseDbVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVersionID), v...))
	})
}

// VersionIDGT applies the GT predicate on the "version_id" field.
func VersionIDGT(v int) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersionID), v))
	})
}

// VersionIDGTE applies the GTE predicate on the "version_id" field.
func VersionIDGTE(v int) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersionID), v))
	})
}

// VersionIDLT applies the LT predicate on the "version_id" field.
func VersionIDLT(v int) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersionID), v))
	})
}

// VersionIDLTE applies the LTE predicate on the "version_id" field.
func VersionIDLTE(v int) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersionID), v))
	})
}

// IsAppliedEQ applies the EQ predicate on the "is_applied" field.
func IsAppliedEQ(v bool) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsApplied), v))
	})
}

// IsAppliedNEQ applies the NEQ predicate on the "is_applied" field.
func IsAppliedNEQ(v bool) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsApplied), v))
	})
}

// TstampEQ applies the EQ predicate on the "tstamp" field.
func TstampEQ(v time.Time) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTstamp), v))
	})
}

// TstampNEQ applies the NEQ predicate on the "tstamp" field.
func TstampNEQ(v time.Time) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTstamp), v))
	})
}

// TstampIn applies the In predicate on the "tstamp" field.
func TstampIn(vs ...time.Time) predicate.GooseDbVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTstamp), v...))
	})
}

// TstampNotIn applies the NotIn predicate on the "tstamp" field.
func TstampNotIn(vs ...time.Time) predicate.GooseDbVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTstamp), v...))
	})
}

// TstampGT applies the GT predicate on the "tstamp" field.
func TstampGT(v time.Time) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTstamp), v))
	})
}

// TstampGTE applies the GTE predicate on the "tstamp" field.
func TstampGTE(v time.Time) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTstamp), v))
	})
}

// TstampLT applies the LT predicate on the "tstamp" field.
func TstampLT(v time.Time) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTstamp), v))
	})
}

// TstampLTE applies the LTE predicate on the "tstamp" field.
func TstampLTE(v time.Time) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTstamp), v))
	})
}

// TstampIsNil applies the IsNil predicate on the "tstamp" field.
func TstampIsNil() predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTstamp)))
	})
}

// TstampNotNil applies the NotNil predicate on the "tstamp" field.
func TstampNotNil() predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTstamp)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GooseDbVersion) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GooseDbVersion) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GooseDbVersion) predicate.GooseDbVersion {
	return predicate.GooseDbVersion(func(s *sql.Selector) {
		p(s.Not())
	})
}
