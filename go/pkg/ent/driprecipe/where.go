// Code generated by entc, DO NOT EDIT.

package driprecipe

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/k3forx/coffee_memo/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// CoffeeBeanID applies equality check predicate on the "coffee_bean_id" field. It's identical to CoffeeBeanIDEQ.
func CoffeeBeanID(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoffeeBeanID), v))
	})
}

// CoffeeBeanWeight applies equality check predicate on the "coffee_bean_weight" field. It's identical to CoffeeBeanWeightEQ.
func CoffeeBeanWeight(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoffeeBeanWeight), v))
	})
}

// LiquidWeight applies equality check predicate on the "liquid_weight" field. It's identical to LiquidWeightEQ.
func LiquidWeight(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiquidWeight), v))
	})
}

// Temperature applies equality check predicate on the "temperature" field. It's identical to TemperatureEQ.
func Temperature(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemperature), v))
	})
}

// SteamTime applies equality check predicate on the "steam_time" field. It's identical to SteamTimeEQ.
func SteamTime(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSteamTime), v))
	})
}

// DripTime applies equality check predicate on the "drip_time" field. It's identical to DripTimeEQ.
func DripTime(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDripTime), v))
	})
}

// Memo applies equality check predicate on the "memo" field. It's identical to MemoEQ.
func Memo(v string) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemo), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int32) predicate.DripRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int32) predicate.DripRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// CoffeeBeanIDEQ applies the EQ predicate on the "coffee_bean_id" field.
func CoffeeBeanIDEQ(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoffeeBeanID), v))
	})
}

// CoffeeBeanIDNEQ applies the NEQ predicate on the "coffee_bean_id" field.
func CoffeeBeanIDNEQ(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoffeeBeanID), v))
	})
}

// CoffeeBeanIDIn applies the In predicate on the "coffee_bean_id" field.
func CoffeeBeanIDIn(vs ...int32) predicate.DripRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoffeeBeanID), v...))
	})
}

// CoffeeBeanIDNotIn applies the NotIn predicate on the "coffee_bean_id" field.
func CoffeeBeanIDNotIn(vs ...int32) predicate.DripRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoffeeBeanID), v...))
	})
}

// CoffeeBeanIDGT applies the GT predicate on the "coffee_bean_id" field.
func CoffeeBeanIDGT(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoffeeBeanID), v))
	})
}

// CoffeeBeanIDGTE applies the GTE predicate on the "coffee_bean_id" field.
func CoffeeBeanIDGTE(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoffeeBeanID), v))
	})
}

// CoffeeBeanIDLT applies the LT predicate on the "coffee_bean_id" field.
func CoffeeBeanIDLT(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoffeeBeanID), v))
	})
}

// CoffeeBeanIDLTE applies the LTE predicate on the "coffee_bean_id" field.
func CoffeeBeanIDLTE(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoffeeBeanID), v))
	})
}

// CoffeeBeanWeightEQ applies the EQ predicate on the "coffee_bean_weight" field.
func CoffeeBeanWeightEQ(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoffeeBeanWeight), v))
	})
}

// CoffeeBeanWeightNEQ applies the NEQ predicate on the "coffee_bean_weight" field.
func CoffeeBeanWeightNEQ(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoffeeBeanWeight), v))
	})
}

// CoffeeBeanWeightIn applies the In predicate on the "coffee_bean_weight" field.
func CoffeeBeanWeightIn(vs ...float32) predicate.DripRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoffeeBeanWeight), v...))
	})
}

// CoffeeBeanWeightNotIn applies the NotIn predicate on the "coffee_bean_weight" field.
func CoffeeBeanWeightNotIn(vs ...float32) predicate.DripRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoffeeBeanWeight), v...))
	})
}

// CoffeeBeanWeightGT applies the GT predicate on the "coffee_bean_weight" field.
func CoffeeBeanWeightGT(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoffeeBeanWeight), v))
	})
}

// CoffeeBeanWeightGTE applies the GTE predicate on the "coffee_bean_weight" field.
func CoffeeBeanWeightGTE(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoffeeBeanWeight), v))
	})
}

// CoffeeBeanWeightLT applies the LT predicate on the "coffee_bean_weight" field.
func CoffeeBeanWeightLT(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoffeeBeanWeight), v))
	})
}

// CoffeeBeanWeightLTE applies the LTE predicate on the "coffee_bean_weight" field.
func CoffeeBeanWeightLTE(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoffeeBeanWeight), v))
	})
}

// LiquidWeightEQ applies the EQ predicate on the "liquid_weight" field.
func LiquidWeightEQ(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiquidWeight), v))
	})
}

// LiquidWeightNEQ applies the NEQ predicate on the "liquid_weight" field.
func LiquidWeightNEQ(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLiquidWeight), v))
	})
}

// LiquidWeightIn applies the In predicate on the "liquid_weight" field.
func LiquidWeightIn(vs ...float32) predicate.DripRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLiquidWeight), v...))
	})
}

// LiquidWeightNotIn applies the NotIn predicate on the "liquid_weight" field.
func LiquidWeightNotIn(vs ...float32) predicate.DripRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLiquidWeight), v...))
	})
}

// LiquidWeightGT applies the GT predicate on the "liquid_weight" field.
func LiquidWeightGT(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLiquidWeight), v))
	})
}

// LiquidWeightGTE applies the GTE predicate on the "liquid_weight" field.
func LiquidWeightGTE(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLiquidWeight), v))
	})
}

// LiquidWeightLT applies the LT predicate on the "liquid_weight" field.
func LiquidWeightLT(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLiquidWeight), v))
	})
}

// LiquidWeightLTE applies the LTE predicate on the "liquid_weight" field.
func LiquidWeightLTE(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLiquidWeight), v))
	})
}

// TemperatureEQ applies the EQ predicate on the "temperature" field.
func TemperatureEQ(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemperature), v))
	})
}

// TemperatureNEQ applies the NEQ predicate on the "temperature" field.
func TemperatureNEQ(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTemperature), v))
	})
}

// TemperatureIn applies the In predicate on the "temperature" field.
func TemperatureIn(vs ...float32) predicate.DripRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTemperature), v...))
	})
}

// TemperatureNotIn applies the NotIn predicate on the "temperature" field.
func TemperatureNotIn(vs ...float32) predicate.DripRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTemperature), v...))
	})
}

// TemperatureGT applies the GT predicate on the "temperature" field.
func TemperatureGT(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTemperature), v))
	})
}

// TemperatureGTE applies the GTE predicate on the "temperature" field.
func TemperatureGTE(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTemperature), v))
	})
}

// TemperatureLT applies the LT predicate on the "temperature" field.
func TemperatureLT(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTemperature), v))
	})
}

// TemperatureLTE applies the LTE predicate on the "temperature" field.
func TemperatureLTE(v float32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTemperature), v))
	})
}

// SteamTimeEQ applies the EQ predicate on the "steam_time" field.
func SteamTimeEQ(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSteamTime), v))
	})
}

// SteamTimeNEQ applies the NEQ predicate on the "steam_time" field.
func SteamTimeNEQ(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSteamTime), v))
	})
}

// SteamTimeIn applies the In predicate on the "steam_time" field.
func SteamTimeIn(vs ...int32) predicate.DripRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSteamTime), v...))
	})
}

// SteamTimeNotIn applies the NotIn predicate on the "steam_time" field.
func SteamTimeNotIn(vs ...int32) predicate.DripRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSteamTime), v...))
	})
}

// SteamTimeGT applies the GT predicate on the "steam_time" field.
func SteamTimeGT(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSteamTime), v))
	})
}

// SteamTimeGTE applies the GTE predicate on the "steam_time" field.
func SteamTimeGTE(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSteamTime), v))
	})
}

// SteamTimeLT applies the LT predicate on the "steam_time" field.
func SteamTimeLT(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSteamTime), v))
	})
}

// SteamTimeLTE applies the LTE predicate on the "steam_time" field.
func SteamTimeLTE(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSteamTime), v))
	})
}

// DripTimeEQ applies the EQ predicate on the "drip_time" field.
func DripTimeEQ(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDripTime), v))
	})
}

// DripTimeNEQ applies the NEQ predicate on the "drip_time" field.
func DripTimeNEQ(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDripTime), v))
	})
}

// DripTimeIn applies the In predicate on the "drip_time" field.
func DripTimeIn(vs ...int32) predicate.DripRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDripTime), v...))
	})
}

// DripTimeNotIn applies the NotIn predicate on the "drip_time" field.
func DripTimeNotIn(vs ...int32) predicate.DripRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDripTime), v...))
	})
}

// DripTimeGT applies the GT predicate on the "drip_time" field.
func DripTimeGT(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDripTime), v))
	})
}

// DripTimeGTE applies the GTE predicate on the "drip_time" field.
func DripTimeGTE(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDripTime), v))
	})
}

// DripTimeLT applies the LT predicate on the "drip_time" field.
func DripTimeLT(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDripTime), v))
	})
}

// DripTimeLTE applies the LTE predicate on the "drip_time" field.
func DripTimeLTE(v int32) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDripTime), v))
	})
}

// MemoEQ applies the EQ predicate on the "memo" field.
func MemoEQ(v string) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemo), v))
	})
}

// MemoNEQ applies the NEQ predicate on the "memo" field.
func MemoNEQ(v string) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMemo), v))
	})
}

// MemoIn applies the In predicate on the "memo" field.
func MemoIn(vs ...string) predicate.DripRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMemo), v...))
	})
}

// MemoNotIn applies the NotIn predicate on the "memo" field.
func MemoNotIn(vs ...string) predicate.DripRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMemo), v...))
	})
}

// MemoGT applies the GT predicate on the "memo" field.
func MemoGT(v string) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMemo), v))
	})
}

// MemoGTE applies the GTE predicate on the "memo" field.
func MemoGTE(v string) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMemo), v))
	})
}

// MemoLT applies the LT predicate on the "memo" field.
func MemoLT(v string) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMemo), v))
	})
}

// MemoLTE applies the LTE predicate on the "memo" field.
func MemoLTE(v string) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMemo), v))
	})
}

// MemoContains applies the Contains predicate on the "memo" field.
func MemoContains(v string) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMemo), v))
	})
}

// MemoHasPrefix applies the HasPrefix predicate on the "memo" field.
func MemoHasPrefix(v string) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMemo), v))
	})
}

// MemoHasSuffix applies the HasSuffix predicate on the "memo" field.
func MemoHasSuffix(v string) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMemo), v))
	})
}

// MemoEqualFold applies the EqualFold predicate on the "memo" field.
func MemoEqualFold(v string) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMemo), v))
	})
}

// MemoContainsFold applies the ContainsFold predicate on the "memo" field.
func MemoContainsFold(v string) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMemo), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DripRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DripRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DripRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DripRecipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DripRecipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DripRecipe) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DripRecipe) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DripRecipe) predicate.DripRecipe {
	return predicate.DripRecipe(func(s *sql.Selector) {
		p(s.Not())
	})
}
