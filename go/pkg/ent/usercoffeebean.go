// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/k3forx/coffee_memo/pkg/ent/user"
	"github.com/k3forx/coffee_memo/pkg/ent/usercoffeebean"
)

// UserCoffeeBean is the model entity for the UserCoffeeBean schema.
type UserCoffeeBean struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status int32 `json:"status,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int32 `json:"user_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// FarmName holds the value of the "farm_name" field.
	FarmName string `json:"farm_name,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// RoastDegree holds the value of the "roast_degree" field.
	RoastDegree string `json:"roast_degree,omitempty"`
	// RoastedAt holds the value of the "roasted_at" field.
	RoastedAt time.Time `json:"roasted_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserCoffeeBeanQuery when eager-loading is set.
	Edges UserCoffeeBeanEdges `json:"edges"`
}

// UserCoffeeBeanEdges holds the relations/edges for other nodes in the graph.
type UserCoffeeBeanEdges struct {
	// UserBrewRecipes holds the value of the user_brew_recipes edge.
	UserBrewRecipes []*UserBrewRecipe `json:"user_brew_recipes,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserBrewRecipesOrErr returns the UserBrewRecipes value or an error if the edge
// was not loaded in eager-loading.
func (e UserCoffeeBeanEdges) UserBrewRecipesOrErr() ([]*UserBrewRecipe, error) {
	if e.loadedTypes[0] {
		return e.UserBrewRecipes, nil
	}
	return nil, &NotLoadedError{edge: "user_brew_recipes"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserCoffeeBeanEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserCoffeeBean) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case usercoffeebean.FieldID, usercoffeebean.FieldStatus, usercoffeebean.FieldUserID:
			values[i] = new(sql.NullInt64)
		case usercoffeebean.FieldName, usercoffeebean.FieldFarmName, usercoffeebean.FieldCountry, usercoffeebean.FieldRoastDegree:
			values[i] = new(sql.NullString)
		case usercoffeebean.FieldRoastedAt, usercoffeebean.FieldCreatedAt, usercoffeebean.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserCoffeeBean", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserCoffeeBean fields.
func (ucb *UserCoffeeBean) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usercoffeebean.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ucb.ID = int32(value.Int64)
		case usercoffeebean.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ucb.Status = int32(value.Int64)
			}
		case usercoffeebean.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ucb.UserID = int32(value.Int64)
			}
		case usercoffeebean.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ucb.Name = value.String
			}
		case usercoffeebean.FieldFarmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field farm_name", values[i])
			} else if value.Valid {
				ucb.FarmName = value.String
			}
		case usercoffeebean.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				ucb.Country = value.String
			}
		case usercoffeebean.FieldRoastDegree:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field roast_degree", values[i])
			} else if value.Valid {
				ucb.RoastDegree = value.String
			}
		case usercoffeebean.FieldRoastedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field roasted_at", values[i])
			} else if value.Valid {
				ucb.RoastedAt = value.Time
			}
		case usercoffeebean.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ucb.CreatedAt = value.Time
			}
		case usercoffeebean.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ucb.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryUserBrewRecipes queries the "user_brew_recipes" edge of the UserCoffeeBean entity.
func (ucb *UserCoffeeBean) QueryUserBrewRecipes() *UserBrewRecipeQuery {
	return (&UserCoffeeBeanClient{config: ucb.config}).QueryUserBrewRecipes(ucb)
}

// QueryUser queries the "user" edge of the UserCoffeeBean entity.
func (ucb *UserCoffeeBean) QueryUser() *UserQuery {
	return (&UserCoffeeBeanClient{config: ucb.config}).QueryUser(ucb)
}

// Update returns a builder for updating this UserCoffeeBean.
// Note that you need to call UserCoffeeBean.Unwrap() before calling this method if this UserCoffeeBean
// was returned from a transaction, and the transaction was committed or rolled back.
func (ucb *UserCoffeeBean) Update() *UserCoffeeBeanUpdateOne {
	return (&UserCoffeeBeanClient{config: ucb.config}).UpdateOne(ucb)
}

// Unwrap unwraps the UserCoffeeBean entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ucb *UserCoffeeBean) Unwrap() *UserCoffeeBean {
	tx, ok := ucb.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserCoffeeBean is not a transactional entity")
	}
	ucb.config.driver = tx.drv
	return ucb
}

// String implements the fmt.Stringer.
func (ucb *UserCoffeeBean) String() string {
	var builder strings.Builder
	builder.WriteString("UserCoffeeBean(")
	builder.WriteString(fmt.Sprintf("id=%v", ucb.ID))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ucb.Status))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", ucb.UserID))
	builder.WriteString(", name=")
	builder.WriteString(ucb.Name)
	builder.WriteString(", farm_name=")
	builder.WriteString(ucb.FarmName)
	builder.WriteString(", country=")
	builder.WriteString(ucb.Country)
	builder.WriteString(", roast_degree=")
	builder.WriteString(ucb.RoastDegree)
	builder.WriteString(", roasted_at=")
	builder.WriteString(ucb.RoastedAt.Format(time.ANSIC))
	builder.WriteString(", created_at=")
	builder.WriteString(ucb.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ucb.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserCoffeeBeans is a parsable slice of UserCoffeeBean.
type UserCoffeeBeans []*UserCoffeeBean

func (ucb UserCoffeeBeans) config(cfg config) {
	for _i := range ucb {
		ucb[_i].config = cfg
	}
}
