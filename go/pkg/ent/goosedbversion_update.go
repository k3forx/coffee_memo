// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k3forx/coffee_memo/pkg/ent/goosedbversion"
	"github.com/k3forx/coffee_memo/pkg/ent/predicate"
)

// GooseDbVersionUpdate is the builder for updating GooseDbVersion entities.
type GooseDbVersionUpdate struct {
	config
	hooks    []Hook
	mutation *GooseDbVersionMutation
}

// Where appends a list predicates to the GooseDbVersionUpdate builder.
func (gdvu *GooseDbVersionUpdate) Where(ps ...predicate.GooseDbVersion) *GooseDbVersionUpdate {
	gdvu.mutation.Where(ps...)
	return gdvu
}

// SetVersionID sets the "version_id" field.
func (gdvu *GooseDbVersionUpdate) SetVersionID(i int) *GooseDbVersionUpdate {
	gdvu.mutation.ResetVersionID()
	gdvu.mutation.SetVersionID(i)
	return gdvu
}

// AddVersionID adds i to the "version_id" field.
func (gdvu *GooseDbVersionUpdate) AddVersionID(i int) *GooseDbVersionUpdate {
	gdvu.mutation.AddVersionID(i)
	return gdvu
}

// SetIsApplied sets the "is_applied" field.
func (gdvu *GooseDbVersionUpdate) SetIsApplied(b bool) *GooseDbVersionUpdate {
	gdvu.mutation.SetIsApplied(b)
	return gdvu
}

// SetTstamp sets the "tstamp" field.
func (gdvu *GooseDbVersionUpdate) SetTstamp(t time.Time) *GooseDbVersionUpdate {
	gdvu.mutation.SetTstamp(t)
	return gdvu
}

// SetNillableTstamp sets the "tstamp" field if the given value is not nil.
func (gdvu *GooseDbVersionUpdate) SetNillableTstamp(t *time.Time) *GooseDbVersionUpdate {
	if t != nil {
		gdvu.SetTstamp(*t)
	}
	return gdvu
}

// ClearTstamp clears the value of the "tstamp" field.
func (gdvu *GooseDbVersionUpdate) ClearTstamp() *GooseDbVersionUpdate {
	gdvu.mutation.ClearTstamp()
	return gdvu
}

// Mutation returns the GooseDbVersionMutation object of the builder.
func (gdvu *GooseDbVersionUpdate) Mutation() *GooseDbVersionMutation {
	return gdvu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gdvu *GooseDbVersionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gdvu.hooks) == 0 {
		affected, err = gdvu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GooseDbVersionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gdvu.mutation = mutation
			affected, err = gdvu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gdvu.hooks) - 1; i >= 0; i-- {
			if gdvu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gdvu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gdvu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gdvu *GooseDbVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := gdvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gdvu *GooseDbVersionUpdate) Exec(ctx context.Context) error {
	_, err := gdvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gdvu *GooseDbVersionUpdate) ExecX(ctx context.Context) {
	if err := gdvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gdvu *GooseDbVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goosedbversion.Table,
			Columns: goosedbversion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: goosedbversion.FieldID,
			},
		},
	}
	if ps := gdvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gdvu.mutation.VersionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goosedbversion.FieldVersionID,
		})
	}
	if value, ok := gdvu.mutation.AddedVersionID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goosedbversion.FieldVersionID,
		})
	}
	if value, ok := gdvu.mutation.IsApplied(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goosedbversion.FieldIsApplied,
		})
	}
	if value, ok := gdvu.mutation.Tstamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goosedbversion.FieldTstamp,
		})
	}
	if gdvu.mutation.TstampCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goosedbversion.FieldTstamp,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gdvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goosedbversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GooseDbVersionUpdateOne is the builder for updating a single GooseDbVersion entity.
type GooseDbVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GooseDbVersionMutation
}

// SetVersionID sets the "version_id" field.
func (gdvuo *GooseDbVersionUpdateOne) SetVersionID(i int) *GooseDbVersionUpdateOne {
	gdvuo.mutation.ResetVersionID()
	gdvuo.mutation.SetVersionID(i)
	return gdvuo
}

// AddVersionID adds i to the "version_id" field.
func (gdvuo *GooseDbVersionUpdateOne) AddVersionID(i int) *GooseDbVersionUpdateOne {
	gdvuo.mutation.AddVersionID(i)
	return gdvuo
}

// SetIsApplied sets the "is_applied" field.
func (gdvuo *GooseDbVersionUpdateOne) SetIsApplied(b bool) *GooseDbVersionUpdateOne {
	gdvuo.mutation.SetIsApplied(b)
	return gdvuo
}

// SetTstamp sets the "tstamp" field.
func (gdvuo *GooseDbVersionUpdateOne) SetTstamp(t time.Time) *GooseDbVersionUpdateOne {
	gdvuo.mutation.SetTstamp(t)
	return gdvuo
}

// SetNillableTstamp sets the "tstamp" field if the given value is not nil.
func (gdvuo *GooseDbVersionUpdateOne) SetNillableTstamp(t *time.Time) *GooseDbVersionUpdateOne {
	if t != nil {
		gdvuo.SetTstamp(*t)
	}
	return gdvuo
}

// ClearTstamp clears the value of the "tstamp" field.
func (gdvuo *GooseDbVersionUpdateOne) ClearTstamp() *GooseDbVersionUpdateOne {
	gdvuo.mutation.ClearTstamp()
	return gdvuo
}

// Mutation returns the GooseDbVersionMutation object of the builder.
func (gdvuo *GooseDbVersionUpdateOne) Mutation() *GooseDbVersionMutation {
	return gdvuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gdvuo *GooseDbVersionUpdateOne) Select(field string, fields ...string) *GooseDbVersionUpdateOne {
	gdvuo.fields = append([]string{field}, fields...)
	return gdvuo
}

// Save executes the query and returns the updated GooseDbVersion entity.
func (gdvuo *GooseDbVersionUpdateOne) Save(ctx context.Context) (*GooseDbVersion, error) {
	var (
		err  error
		node *GooseDbVersion
	)
	if len(gdvuo.hooks) == 0 {
		node, err = gdvuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GooseDbVersionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gdvuo.mutation = mutation
			node, err = gdvuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gdvuo.hooks) - 1; i >= 0; i-- {
			if gdvuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gdvuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gdvuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gdvuo *GooseDbVersionUpdateOne) SaveX(ctx context.Context) *GooseDbVersion {
	node, err := gdvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gdvuo *GooseDbVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := gdvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gdvuo *GooseDbVersionUpdateOne) ExecX(ctx context.Context) {
	if err := gdvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gdvuo *GooseDbVersionUpdateOne) sqlSave(ctx context.Context) (_node *GooseDbVersion, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goosedbversion.Table,
			Columns: goosedbversion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: goosedbversion.FieldID,
			},
		},
	}
	id, ok := gdvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GooseDbVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gdvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goosedbversion.FieldID)
		for _, f := range fields {
			if !goosedbversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goosedbversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gdvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gdvuo.mutation.VersionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goosedbversion.FieldVersionID,
		})
	}
	if value, ok := gdvuo.mutation.AddedVersionID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goosedbversion.FieldVersionID,
		})
	}
	if value, ok := gdvuo.mutation.IsApplied(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goosedbversion.FieldIsApplied,
		})
	}
	if value, ok := gdvuo.mutation.Tstamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goosedbversion.FieldTstamp,
		})
	}
	if gdvuo.mutation.TstampCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goosedbversion.FieldTstamp,
		})
	}
	_node = &GooseDbVersion{config: gdvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gdvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goosedbversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
