// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/k3forx/coffee_memo/pkg/ent/goosedbversion"
	"github.com/k3forx/coffee_memo/pkg/ent/predicate"
	"github.com/k3forx/coffee_memo/pkg/ent/user"
	"github.com/k3forx/coffee_memo/pkg/ent/usercoffeebean"
	"github.com/k3forx/coffee_memo/pkg/ent/userdriprecipe"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGooseDbVersion = "GooseDbVersion"
	TypeUser           = "User"
	TypeUserCoffeeBean = "UserCoffeeBean"
	TypeUserDripRecipe = "UserDripRecipe"
)

// GooseDbVersionMutation represents an operation that mutates the GooseDbVersion nodes in the graph.
type GooseDbVersionMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	version_id    *int
	addversion_id *int
	is_applied    *bool
	tstamp        *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*GooseDbVersion, error)
	predicates    []predicate.GooseDbVersion
}

var _ ent.Mutation = (*GooseDbVersionMutation)(nil)

// goosedbversionOption allows management of the mutation configuration using functional options.
type goosedbversionOption func(*GooseDbVersionMutation)

// newGooseDbVersionMutation creates new mutation for the GooseDbVersion entity.
func newGooseDbVersionMutation(c config, op Op, opts ...goosedbversionOption) *GooseDbVersionMutation {
	m := &GooseDbVersionMutation{
		config:        c,
		op:            op,
		typ:           TypeGooseDbVersion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGooseDbVersionID sets the ID field of the mutation.
func withGooseDbVersionID(id uint64) goosedbversionOption {
	return func(m *GooseDbVersionMutation) {
		var (
			err   error
			once  sync.Once
			value *GooseDbVersion
		)
		m.oldValue = func(ctx context.Context) (*GooseDbVersion, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GooseDbVersion.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGooseDbVersion sets the old GooseDbVersion of the mutation.
func withGooseDbVersion(node *GooseDbVersion) goosedbversionOption {
	return func(m *GooseDbVersionMutation) {
		m.oldValue = func(context.Context) (*GooseDbVersion, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GooseDbVersionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GooseDbVersionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GooseDbVersion entities.
func (m *GooseDbVersionMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GooseDbVersionMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GooseDbVersionMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GooseDbVersion.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetVersionID sets the "version_id" field.
func (m *GooseDbVersionMutation) SetVersionID(i int) {
	m.version_id = &i
	m.addversion_id = nil
}

// VersionID returns the value of the "version_id" field in the mutation.
func (m *GooseDbVersionMutation) VersionID() (r int, exists bool) {
	v := m.version_id
	if v == nil {
		return
	}
	return *v, true
}

// OldVersionID returns the old "version_id" field's value of the GooseDbVersion entity.
// If the GooseDbVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GooseDbVersionMutation) OldVersionID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersionID: %w", err)
	}
	return oldValue.VersionID, nil
}

// AddVersionID adds i to the "version_id" field.
func (m *GooseDbVersionMutation) AddVersionID(i int) {
	if m.addversion_id != nil {
		*m.addversion_id += i
	} else {
		m.addversion_id = &i
	}
}

// AddedVersionID returns the value that was added to the "version_id" field in this mutation.
func (m *GooseDbVersionMutation) AddedVersionID() (r int, exists bool) {
	v := m.addversion_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersionID resets all changes to the "version_id" field.
func (m *GooseDbVersionMutation) ResetVersionID() {
	m.version_id = nil
	m.addversion_id = nil
}

// SetIsApplied sets the "is_applied" field.
func (m *GooseDbVersionMutation) SetIsApplied(b bool) {
	m.is_applied = &b
}

// IsApplied returns the value of the "is_applied" field in the mutation.
func (m *GooseDbVersionMutation) IsApplied() (r bool, exists bool) {
	v := m.is_applied
	if v == nil {
		return
	}
	return *v, true
}

// OldIsApplied returns the old "is_applied" field's value of the GooseDbVersion entity.
// If the GooseDbVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GooseDbVersionMutation) OldIsApplied(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsApplied is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsApplied requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsApplied: %w", err)
	}
	return oldValue.IsApplied, nil
}

// ResetIsApplied resets all changes to the "is_applied" field.
func (m *GooseDbVersionMutation) ResetIsApplied() {
	m.is_applied = nil
}

// SetTstamp sets the "tstamp" field.
func (m *GooseDbVersionMutation) SetTstamp(t time.Time) {
	m.tstamp = &t
}

// Tstamp returns the value of the "tstamp" field in the mutation.
func (m *GooseDbVersionMutation) Tstamp() (r time.Time, exists bool) {
	v := m.tstamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTstamp returns the old "tstamp" field's value of the GooseDbVersion entity.
// If the GooseDbVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GooseDbVersionMutation) OldTstamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTstamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTstamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTstamp: %w", err)
	}
	return oldValue.Tstamp, nil
}

// ClearTstamp clears the value of the "tstamp" field.
func (m *GooseDbVersionMutation) ClearTstamp() {
	m.tstamp = nil
	m.clearedFields[goosedbversion.FieldTstamp] = struct{}{}
}

// TstampCleared returns if the "tstamp" field was cleared in this mutation.
func (m *GooseDbVersionMutation) TstampCleared() bool {
	_, ok := m.clearedFields[goosedbversion.FieldTstamp]
	return ok
}

// ResetTstamp resets all changes to the "tstamp" field.
func (m *GooseDbVersionMutation) ResetTstamp() {
	m.tstamp = nil
	delete(m.clearedFields, goosedbversion.FieldTstamp)
}

// Where appends a list predicates to the GooseDbVersionMutation builder.
func (m *GooseDbVersionMutation) Where(ps ...predicate.GooseDbVersion) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GooseDbVersionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GooseDbVersion).
func (m *GooseDbVersionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GooseDbVersionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.version_id != nil {
		fields = append(fields, goosedbversion.FieldVersionID)
	}
	if m.is_applied != nil {
		fields = append(fields, goosedbversion.FieldIsApplied)
	}
	if m.tstamp != nil {
		fields = append(fields, goosedbversion.FieldTstamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GooseDbVersionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case goosedbversion.FieldVersionID:
		return m.VersionID()
	case goosedbversion.FieldIsApplied:
		return m.IsApplied()
	case goosedbversion.FieldTstamp:
		return m.Tstamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GooseDbVersionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case goosedbversion.FieldVersionID:
		return m.OldVersionID(ctx)
	case goosedbversion.FieldIsApplied:
		return m.OldIsApplied(ctx)
	case goosedbversion.FieldTstamp:
		return m.OldTstamp(ctx)
	}
	return nil, fmt.Errorf("unknown GooseDbVersion field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GooseDbVersionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case goosedbversion.FieldVersionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersionID(v)
		return nil
	case goosedbversion.FieldIsApplied:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsApplied(v)
		return nil
	case goosedbversion.FieldTstamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTstamp(v)
		return nil
	}
	return fmt.Errorf("unknown GooseDbVersion field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GooseDbVersionMutation) AddedFields() []string {
	var fields []string
	if m.addversion_id != nil {
		fields = append(fields, goosedbversion.FieldVersionID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GooseDbVersionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case goosedbversion.FieldVersionID:
		return m.AddedVersionID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GooseDbVersionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case goosedbversion.FieldVersionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersionID(v)
		return nil
	}
	return fmt.Errorf("unknown GooseDbVersion numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GooseDbVersionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(goosedbversion.FieldTstamp) {
		fields = append(fields, goosedbversion.FieldTstamp)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GooseDbVersionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GooseDbVersionMutation) ClearField(name string) error {
	switch name {
	case goosedbversion.FieldTstamp:
		m.ClearTstamp()
		return nil
	}
	return fmt.Errorf("unknown GooseDbVersion nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GooseDbVersionMutation) ResetField(name string) error {
	switch name {
	case goosedbversion.FieldVersionID:
		m.ResetVersionID()
		return nil
	case goosedbversion.FieldIsApplied:
		m.ResetIsApplied()
		return nil
	case goosedbversion.FieldTstamp:
		m.ResetTstamp()
		return nil
	}
	return fmt.Errorf("unknown GooseDbVersion field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GooseDbVersionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GooseDbVersionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GooseDbVersionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GooseDbVersionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GooseDbVersionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GooseDbVersionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GooseDbVersionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GooseDbVersion unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GooseDbVersionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GooseDbVersion edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int32
	username                 *string
	email                    *string
	password                 *string
	flags                    *int
	addflags                 *int
	created_at               *time.Time
	updated_at               *time.Time
	deleted_at               *time.Time
	clearedFields            map[string]struct{}
	user_coffee_beans        map[int32]struct{}
	removeduser_coffee_beans map[int32]struct{}
	cleareduser_coffee_beans bool
	user_drip_recipes        map[int32]struct{}
	removeduser_drip_recipes map[int32]struct{}
	cleareduser_drip_recipes bool
	done                     bool
	oldValue                 func(context.Context) (*User, error)
	predicates               []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int32) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetFlags sets the "flags" field.
func (m *UserMutation) SetFlags(i int) {
	m.flags = &i
	m.addflags = nil
}

// Flags returns the value of the "flags" field in the mutation.
func (m *UserMutation) Flags() (r int, exists bool) {
	v := m.flags
	if v == nil {
		return
	}
	return *v, true
}

// OldFlags returns the old "flags" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFlags(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFlags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFlags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFlags: %w", err)
	}
	return oldValue.Flags, nil
}

// AddFlags adds i to the "flags" field.
func (m *UserMutation) AddFlags(i int) {
	if m.addflags != nil {
		*m.addflags += i
	} else {
		m.addflags = &i
	}
}

// AddedFlags returns the value that was added to the "flags" field in this mutation.
func (m *UserMutation) AddedFlags() (r int, exists bool) {
	v := m.addflags
	if v == nil {
		return
	}
	return *v, true
}

// ResetFlags resets all changes to the "flags" field.
func (m *UserMutation) ResetFlags() {
	m.flags = nil
	m.addflags = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[user.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, user.FieldDeletedAt)
}

// AddUserCoffeeBeanIDs adds the "user_coffee_beans" edge to the UserCoffeeBean entity by ids.
func (m *UserMutation) AddUserCoffeeBeanIDs(ids ...int32) {
	if m.user_coffee_beans == nil {
		m.user_coffee_beans = make(map[int32]struct{})
	}
	for i := range ids {
		m.user_coffee_beans[ids[i]] = struct{}{}
	}
}

// ClearUserCoffeeBeans clears the "user_coffee_beans" edge to the UserCoffeeBean entity.
func (m *UserMutation) ClearUserCoffeeBeans() {
	m.cleareduser_coffee_beans = true
}

// UserCoffeeBeansCleared reports if the "user_coffee_beans" edge to the UserCoffeeBean entity was cleared.
func (m *UserMutation) UserCoffeeBeansCleared() bool {
	return m.cleareduser_coffee_beans
}

// RemoveUserCoffeeBeanIDs removes the "user_coffee_beans" edge to the UserCoffeeBean entity by IDs.
func (m *UserMutation) RemoveUserCoffeeBeanIDs(ids ...int32) {
	if m.removeduser_coffee_beans == nil {
		m.removeduser_coffee_beans = make(map[int32]struct{})
	}
	for i := range ids {
		delete(m.user_coffee_beans, ids[i])
		m.removeduser_coffee_beans[ids[i]] = struct{}{}
	}
}

// RemovedUserCoffeeBeans returns the removed IDs of the "user_coffee_beans" edge to the UserCoffeeBean entity.
func (m *UserMutation) RemovedUserCoffeeBeansIDs() (ids []int32) {
	for id := range m.removeduser_coffee_beans {
		ids = append(ids, id)
	}
	return
}

// UserCoffeeBeansIDs returns the "user_coffee_beans" edge IDs in the mutation.
func (m *UserMutation) UserCoffeeBeansIDs() (ids []int32) {
	for id := range m.user_coffee_beans {
		ids = append(ids, id)
	}
	return
}

// ResetUserCoffeeBeans resets all changes to the "user_coffee_beans" edge.
func (m *UserMutation) ResetUserCoffeeBeans() {
	m.user_coffee_beans = nil
	m.cleareduser_coffee_beans = false
	m.removeduser_coffee_beans = nil
}

// AddUserDripRecipeIDs adds the "user_drip_recipes" edge to the UserDripRecipe entity by ids.
func (m *UserMutation) AddUserDripRecipeIDs(ids ...int32) {
	if m.user_drip_recipes == nil {
		m.user_drip_recipes = make(map[int32]struct{})
	}
	for i := range ids {
		m.user_drip_recipes[ids[i]] = struct{}{}
	}
}

// ClearUserDripRecipes clears the "user_drip_recipes" edge to the UserDripRecipe entity.
func (m *UserMutation) ClearUserDripRecipes() {
	m.cleareduser_drip_recipes = true
}

// UserDripRecipesCleared reports if the "user_drip_recipes" edge to the UserDripRecipe entity was cleared.
func (m *UserMutation) UserDripRecipesCleared() bool {
	return m.cleareduser_drip_recipes
}

// RemoveUserDripRecipeIDs removes the "user_drip_recipes" edge to the UserDripRecipe entity by IDs.
func (m *UserMutation) RemoveUserDripRecipeIDs(ids ...int32) {
	if m.removeduser_drip_recipes == nil {
		m.removeduser_drip_recipes = make(map[int32]struct{})
	}
	for i := range ids {
		delete(m.user_drip_recipes, ids[i])
		m.removeduser_drip_recipes[ids[i]] = struct{}{}
	}
}

// RemovedUserDripRecipes returns the removed IDs of the "user_drip_recipes" edge to the UserDripRecipe entity.
func (m *UserMutation) RemovedUserDripRecipesIDs() (ids []int32) {
	for id := range m.removeduser_drip_recipes {
		ids = append(ids, id)
	}
	return
}

// UserDripRecipesIDs returns the "user_drip_recipes" edge IDs in the mutation.
func (m *UserMutation) UserDripRecipesIDs() (ids []int32) {
	for id := range m.user_drip_recipes {
		ids = append(ids, id)
	}
	return
}

// ResetUserDripRecipes resets all changes to the "user_drip_recipes" edge.
func (m *UserMutation) ResetUserDripRecipes() {
	m.user_drip_recipes = nil
	m.cleareduser_drip_recipes = false
	m.removeduser_drip_recipes = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.flags != nil {
		fields = append(fields, user.FieldFlags)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, user.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldFlags:
		return m.Flags()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldFlags:
		return m.OldFlags(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldFlags:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFlags(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addflags != nil {
		fields = append(fields, user.FieldFlags)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldFlags:
		return m.AddedFlags()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldFlags:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFlags(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldDeletedAt) {
		fields = append(fields, user.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldFlags:
		m.ResetFlags()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user_coffee_beans != nil {
		edges = append(edges, user.EdgeUserCoffeeBeans)
	}
	if m.user_drip_recipes != nil {
		edges = append(edges, user.EdgeUserDripRecipes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserCoffeeBeans:
		ids := make([]ent.Value, 0, len(m.user_coffee_beans))
		for id := range m.user_coffee_beans {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserDripRecipes:
		ids := make([]ent.Value, 0, len(m.user_drip_recipes))
		for id := range m.user_drip_recipes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeduser_coffee_beans != nil {
		edges = append(edges, user.EdgeUserCoffeeBeans)
	}
	if m.removeduser_drip_recipes != nil {
		edges = append(edges, user.EdgeUserDripRecipes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserCoffeeBeans:
		ids := make([]ent.Value, 0, len(m.removeduser_coffee_beans))
		for id := range m.removeduser_coffee_beans {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserDripRecipes:
		ids := make([]ent.Value, 0, len(m.removeduser_drip_recipes))
		for id := range m.removeduser_drip_recipes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser_coffee_beans {
		edges = append(edges, user.EdgeUserCoffeeBeans)
	}
	if m.cleareduser_drip_recipes {
		edges = append(edges, user.EdgeUserDripRecipes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeUserCoffeeBeans:
		return m.cleareduser_coffee_beans
	case user.EdgeUserDripRecipes:
		return m.cleareduser_drip_recipes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUserCoffeeBeans:
		m.ResetUserCoffeeBeans()
		return nil
	case user.EdgeUserDripRecipes:
		m.ResetUserDripRecipes()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserCoffeeBeanMutation represents an operation that mutates the UserCoffeeBean nodes in the graph.
type UserCoffeeBeanMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int32
	status                   *int32
	addstatus                *int32
	name                     *string
	farm_name                *string
	country                  *string
	roast_degree             *string
	roasted_at               *time.Time
	created_at               *time.Time
	updated_at               *time.Time
	clearedFields            map[string]struct{}
	user                     *int32
	cleareduser              bool
	user_drip_recipes        map[int32]struct{}
	removeduser_drip_recipes map[int32]struct{}
	cleareduser_drip_recipes bool
	done                     bool
	oldValue                 func(context.Context) (*UserCoffeeBean, error)
	predicates               []predicate.UserCoffeeBean
}

var _ ent.Mutation = (*UserCoffeeBeanMutation)(nil)

// usercoffeebeanOption allows management of the mutation configuration using functional options.
type usercoffeebeanOption func(*UserCoffeeBeanMutation)

// newUserCoffeeBeanMutation creates new mutation for the UserCoffeeBean entity.
func newUserCoffeeBeanMutation(c config, op Op, opts ...usercoffeebeanOption) *UserCoffeeBeanMutation {
	m := &UserCoffeeBeanMutation{
		config:        c,
		op:            op,
		typ:           TypeUserCoffeeBean,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserCoffeeBeanID sets the ID field of the mutation.
func withUserCoffeeBeanID(id int32) usercoffeebeanOption {
	return func(m *UserCoffeeBeanMutation) {
		var (
			err   error
			once  sync.Once
			value *UserCoffeeBean
		)
		m.oldValue = func(ctx context.Context) (*UserCoffeeBean, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserCoffeeBean.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserCoffeeBean sets the old UserCoffeeBean of the mutation.
func withUserCoffeeBean(node *UserCoffeeBean) usercoffeebeanOption {
	return func(m *UserCoffeeBeanMutation) {
		m.oldValue = func(context.Context) (*UserCoffeeBean, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserCoffeeBeanMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserCoffeeBeanMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserCoffeeBean entities.
func (m *UserCoffeeBeanMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserCoffeeBeanMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserCoffeeBeanMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserCoffeeBean.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *UserCoffeeBeanMutation) SetStatus(i int32) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *UserCoffeeBeanMutation) Status() (r int32, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the UserCoffeeBean entity.
// If the UserCoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCoffeeBeanMutation) OldStatus(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *UserCoffeeBeanMutation) AddStatus(i int32) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *UserCoffeeBeanMutation) AddedStatus() (r int32, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *UserCoffeeBeanMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetUserID sets the "user_id" field.
func (m *UserCoffeeBeanMutation) SetUserID(i int32) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserCoffeeBeanMutation) UserID() (r int32, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserCoffeeBean entity.
// If the UserCoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCoffeeBeanMutation) OldUserID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *UserCoffeeBeanMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[usercoffeebean.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *UserCoffeeBeanMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[usercoffeebean.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserCoffeeBeanMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, usercoffeebean.FieldUserID)
}

// SetName sets the "name" field.
func (m *UserCoffeeBeanMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserCoffeeBeanMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the UserCoffeeBean entity.
// If the UserCoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCoffeeBeanMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserCoffeeBeanMutation) ResetName() {
	m.name = nil
}

// SetFarmName sets the "farm_name" field.
func (m *UserCoffeeBeanMutation) SetFarmName(s string) {
	m.farm_name = &s
}

// FarmName returns the value of the "farm_name" field in the mutation.
func (m *UserCoffeeBeanMutation) FarmName() (r string, exists bool) {
	v := m.farm_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFarmName returns the old "farm_name" field's value of the UserCoffeeBean entity.
// If the UserCoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCoffeeBeanMutation) OldFarmName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFarmName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFarmName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFarmName: %w", err)
	}
	return oldValue.FarmName, nil
}

// ClearFarmName clears the value of the "farm_name" field.
func (m *UserCoffeeBeanMutation) ClearFarmName() {
	m.farm_name = nil
	m.clearedFields[usercoffeebean.FieldFarmName] = struct{}{}
}

// FarmNameCleared returns if the "farm_name" field was cleared in this mutation.
func (m *UserCoffeeBeanMutation) FarmNameCleared() bool {
	_, ok := m.clearedFields[usercoffeebean.FieldFarmName]
	return ok
}

// ResetFarmName resets all changes to the "farm_name" field.
func (m *UserCoffeeBeanMutation) ResetFarmName() {
	m.farm_name = nil
	delete(m.clearedFields, usercoffeebean.FieldFarmName)
}

// SetCountry sets the "country" field.
func (m *UserCoffeeBeanMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *UserCoffeeBeanMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the UserCoffeeBean entity.
// If the UserCoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCoffeeBeanMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ClearCountry clears the value of the "country" field.
func (m *UserCoffeeBeanMutation) ClearCountry() {
	m.country = nil
	m.clearedFields[usercoffeebean.FieldCountry] = struct{}{}
}

// CountryCleared returns if the "country" field was cleared in this mutation.
func (m *UserCoffeeBeanMutation) CountryCleared() bool {
	_, ok := m.clearedFields[usercoffeebean.FieldCountry]
	return ok
}

// ResetCountry resets all changes to the "country" field.
func (m *UserCoffeeBeanMutation) ResetCountry() {
	m.country = nil
	delete(m.clearedFields, usercoffeebean.FieldCountry)
}

// SetRoastDegree sets the "roast_degree" field.
func (m *UserCoffeeBeanMutation) SetRoastDegree(s string) {
	m.roast_degree = &s
}

// RoastDegree returns the value of the "roast_degree" field in the mutation.
func (m *UserCoffeeBeanMutation) RoastDegree() (r string, exists bool) {
	v := m.roast_degree
	if v == nil {
		return
	}
	return *v, true
}

// OldRoastDegree returns the old "roast_degree" field's value of the UserCoffeeBean entity.
// If the UserCoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCoffeeBeanMutation) OldRoastDegree(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoastDegree is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoastDegree requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoastDegree: %w", err)
	}
	return oldValue.RoastDegree, nil
}

// ResetRoastDegree resets all changes to the "roast_degree" field.
func (m *UserCoffeeBeanMutation) ResetRoastDegree() {
	m.roast_degree = nil
}

// SetRoastedAt sets the "roasted_at" field.
func (m *UserCoffeeBeanMutation) SetRoastedAt(t time.Time) {
	m.roasted_at = &t
}

// RoastedAt returns the value of the "roasted_at" field in the mutation.
func (m *UserCoffeeBeanMutation) RoastedAt() (r time.Time, exists bool) {
	v := m.roasted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldRoastedAt returns the old "roasted_at" field's value of the UserCoffeeBean entity.
// If the UserCoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCoffeeBeanMutation) OldRoastedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoastedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoastedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoastedAt: %w", err)
	}
	return oldValue.RoastedAt, nil
}

// ClearRoastedAt clears the value of the "roasted_at" field.
func (m *UserCoffeeBeanMutation) ClearRoastedAt() {
	m.roasted_at = nil
	m.clearedFields[usercoffeebean.FieldRoastedAt] = struct{}{}
}

// RoastedAtCleared returns if the "roasted_at" field was cleared in this mutation.
func (m *UserCoffeeBeanMutation) RoastedAtCleared() bool {
	_, ok := m.clearedFields[usercoffeebean.FieldRoastedAt]
	return ok
}

// ResetRoastedAt resets all changes to the "roasted_at" field.
func (m *UserCoffeeBeanMutation) ResetRoastedAt() {
	m.roasted_at = nil
	delete(m.clearedFields, usercoffeebean.FieldRoastedAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *UserCoffeeBeanMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserCoffeeBeanMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserCoffeeBean entity.
// If the UserCoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCoffeeBeanMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserCoffeeBeanMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserCoffeeBeanMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserCoffeeBeanMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the UserCoffeeBean entity.
// If the UserCoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCoffeeBeanMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserCoffeeBeanMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserCoffeeBeanMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserCoffeeBeanMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserCoffeeBeanMutation) UserIDs() (ids []int32) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserCoffeeBeanMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddUserDripRecipeIDs adds the "user_drip_recipes" edge to the UserDripRecipe entity by ids.
func (m *UserCoffeeBeanMutation) AddUserDripRecipeIDs(ids ...int32) {
	if m.user_drip_recipes == nil {
		m.user_drip_recipes = make(map[int32]struct{})
	}
	for i := range ids {
		m.user_drip_recipes[ids[i]] = struct{}{}
	}
}

// ClearUserDripRecipes clears the "user_drip_recipes" edge to the UserDripRecipe entity.
func (m *UserCoffeeBeanMutation) ClearUserDripRecipes() {
	m.cleareduser_drip_recipes = true
}

// UserDripRecipesCleared reports if the "user_drip_recipes" edge to the UserDripRecipe entity was cleared.
func (m *UserCoffeeBeanMutation) UserDripRecipesCleared() bool {
	return m.cleareduser_drip_recipes
}

// RemoveUserDripRecipeIDs removes the "user_drip_recipes" edge to the UserDripRecipe entity by IDs.
func (m *UserCoffeeBeanMutation) RemoveUserDripRecipeIDs(ids ...int32) {
	if m.removeduser_drip_recipes == nil {
		m.removeduser_drip_recipes = make(map[int32]struct{})
	}
	for i := range ids {
		delete(m.user_drip_recipes, ids[i])
		m.removeduser_drip_recipes[ids[i]] = struct{}{}
	}
}

// RemovedUserDripRecipes returns the removed IDs of the "user_drip_recipes" edge to the UserDripRecipe entity.
func (m *UserCoffeeBeanMutation) RemovedUserDripRecipesIDs() (ids []int32) {
	for id := range m.removeduser_drip_recipes {
		ids = append(ids, id)
	}
	return
}

// UserDripRecipesIDs returns the "user_drip_recipes" edge IDs in the mutation.
func (m *UserCoffeeBeanMutation) UserDripRecipesIDs() (ids []int32) {
	for id := range m.user_drip_recipes {
		ids = append(ids, id)
	}
	return
}

// ResetUserDripRecipes resets all changes to the "user_drip_recipes" edge.
func (m *UserCoffeeBeanMutation) ResetUserDripRecipes() {
	m.user_drip_recipes = nil
	m.cleareduser_drip_recipes = false
	m.removeduser_drip_recipes = nil
}

// Where appends a list predicates to the UserCoffeeBeanMutation builder.
func (m *UserCoffeeBeanMutation) Where(ps ...predicate.UserCoffeeBean) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserCoffeeBeanMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserCoffeeBean).
func (m *UserCoffeeBeanMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserCoffeeBeanMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.status != nil {
		fields = append(fields, usercoffeebean.FieldStatus)
	}
	if m.user != nil {
		fields = append(fields, usercoffeebean.FieldUserID)
	}
	if m.name != nil {
		fields = append(fields, usercoffeebean.FieldName)
	}
	if m.farm_name != nil {
		fields = append(fields, usercoffeebean.FieldFarmName)
	}
	if m.country != nil {
		fields = append(fields, usercoffeebean.FieldCountry)
	}
	if m.roast_degree != nil {
		fields = append(fields, usercoffeebean.FieldRoastDegree)
	}
	if m.roasted_at != nil {
		fields = append(fields, usercoffeebean.FieldRoastedAt)
	}
	if m.created_at != nil {
		fields = append(fields, usercoffeebean.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, usercoffeebean.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserCoffeeBeanMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usercoffeebean.FieldStatus:
		return m.Status()
	case usercoffeebean.FieldUserID:
		return m.UserID()
	case usercoffeebean.FieldName:
		return m.Name()
	case usercoffeebean.FieldFarmName:
		return m.FarmName()
	case usercoffeebean.FieldCountry:
		return m.Country()
	case usercoffeebean.FieldRoastDegree:
		return m.RoastDegree()
	case usercoffeebean.FieldRoastedAt:
		return m.RoastedAt()
	case usercoffeebean.FieldCreatedAt:
		return m.CreatedAt()
	case usercoffeebean.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserCoffeeBeanMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usercoffeebean.FieldStatus:
		return m.OldStatus(ctx)
	case usercoffeebean.FieldUserID:
		return m.OldUserID(ctx)
	case usercoffeebean.FieldName:
		return m.OldName(ctx)
	case usercoffeebean.FieldFarmName:
		return m.OldFarmName(ctx)
	case usercoffeebean.FieldCountry:
		return m.OldCountry(ctx)
	case usercoffeebean.FieldRoastDegree:
		return m.OldRoastDegree(ctx)
	case usercoffeebean.FieldRoastedAt:
		return m.OldRoastedAt(ctx)
	case usercoffeebean.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case usercoffeebean.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserCoffeeBean field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserCoffeeBeanMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usercoffeebean.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case usercoffeebean.FieldUserID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case usercoffeebean.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case usercoffeebean.FieldFarmName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFarmName(v)
		return nil
	case usercoffeebean.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case usercoffeebean.FieldRoastDegree:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoastDegree(v)
		return nil
	case usercoffeebean.FieldRoastedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoastedAt(v)
		return nil
	case usercoffeebean.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case usercoffeebean.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserCoffeeBean field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserCoffeeBeanMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, usercoffeebean.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserCoffeeBeanMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case usercoffeebean.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserCoffeeBeanMutation) AddField(name string, value ent.Value) error {
	switch name {
	case usercoffeebean.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown UserCoffeeBean numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserCoffeeBeanMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(usercoffeebean.FieldUserID) {
		fields = append(fields, usercoffeebean.FieldUserID)
	}
	if m.FieldCleared(usercoffeebean.FieldFarmName) {
		fields = append(fields, usercoffeebean.FieldFarmName)
	}
	if m.FieldCleared(usercoffeebean.FieldCountry) {
		fields = append(fields, usercoffeebean.FieldCountry)
	}
	if m.FieldCleared(usercoffeebean.FieldRoastedAt) {
		fields = append(fields, usercoffeebean.FieldRoastedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserCoffeeBeanMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserCoffeeBeanMutation) ClearField(name string) error {
	switch name {
	case usercoffeebean.FieldUserID:
		m.ClearUserID()
		return nil
	case usercoffeebean.FieldFarmName:
		m.ClearFarmName()
		return nil
	case usercoffeebean.FieldCountry:
		m.ClearCountry()
		return nil
	case usercoffeebean.FieldRoastedAt:
		m.ClearRoastedAt()
		return nil
	}
	return fmt.Errorf("unknown UserCoffeeBean nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserCoffeeBeanMutation) ResetField(name string) error {
	switch name {
	case usercoffeebean.FieldStatus:
		m.ResetStatus()
		return nil
	case usercoffeebean.FieldUserID:
		m.ResetUserID()
		return nil
	case usercoffeebean.FieldName:
		m.ResetName()
		return nil
	case usercoffeebean.FieldFarmName:
		m.ResetFarmName()
		return nil
	case usercoffeebean.FieldCountry:
		m.ResetCountry()
		return nil
	case usercoffeebean.FieldRoastDegree:
		m.ResetRoastDegree()
		return nil
	case usercoffeebean.FieldRoastedAt:
		m.ResetRoastedAt()
		return nil
	case usercoffeebean.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case usercoffeebean.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown UserCoffeeBean field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserCoffeeBeanMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, usercoffeebean.EdgeUser)
	}
	if m.user_drip_recipes != nil {
		edges = append(edges, usercoffeebean.EdgeUserDripRecipes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserCoffeeBeanMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case usercoffeebean.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case usercoffeebean.EdgeUserDripRecipes:
		ids := make([]ent.Value, 0, len(m.user_drip_recipes))
		for id := range m.user_drip_recipes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserCoffeeBeanMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeduser_drip_recipes != nil {
		edges = append(edges, usercoffeebean.EdgeUserDripRecipes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserCoffeeBeanMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case usercoffeebean.EdgeUserDripRecipes:
		ids := make([]ent.Value, 0, len(m.removeduser_drip_recipes))
		for id := range m.removeduser_drip_recipes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserCoffeeBeanMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, usercoffeebean.EdgeUser)
	}
	if m.cleareduser_drip_recipes {
		edges = append(edges, usercoffeebean.EdgeUserDripRecipes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserCoffeeBeanMutation) EdgeCleared(name string) bool {
	switch name {
	case usercoffeebean.EdgeUser:
		return m.cleareduser
	case usercoffeebean.EdgeUserDripRecipes:
		return m.cleareduser_drip_recipes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserCoffeeBeanMutation) ClearEdge(name string) error {
	switch name {
	case usercoffeebean.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown UserCoffeeBean unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserCoffeeBeanMutation) ResetEdge(name string) error {
	switch name {
	case usercoffeebean.EdgeUser:
		m.ResetUser()
		return nil
	case usercoffeebean.EdgeUserDripRecipes:
		m.ResetUserDripRecipes()
		return nil
	}
	return fmt.Errorf("unknown UserCoffeeBean edge %s", name)
}

// UserDripRecipeMutation represents an operation that mutates the UserDripRecipe nodes in the graph.
type UserDripRecipeMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int32
	coffee_bean_weight      *float64
	addcoffee_bean_weight   *float64
	coffee_bean_grind       *string
	liquid_weight           *float64
	addliquid_weight        *float64
	temperature             *float64
	addtemperature          *float64
	step_one                *string
	step_two                *string
	memo                    *string
	created_at              *time.Time
	updated_at              *time.Time
	deleted_at              *time.Time
	clearedFields           map[string]struct{}
	user_coffee_bean        *int32
	cleareduser_coffee_bean bool
	user                    *int32
	cleareduser             bool
	done                    bool
	oldValue                func(context.Context) (*UserDripRecipe, error)
	predicates              []predicate.UserDripRecipe
}

var _ ent.Mutation = (*UserDripRecipeMutation)(nil)

// userdriprecipeOption allows management of the mutation configuration using functional options.
type userdriprecipeOption func(*UserDripRecipeMutation)

// newUserDripRecipeMutation creates new mutation for the UserDripRecipe entity.
func newUserDripRecipeMutation(c config, op Op, opts ...userdriprecipeOption) *UserDripRecipeMutation {
	m := &UserDripRecipeMutation{
		config:        c,
		op:            op,
		typ:           TypeUserDripRecipe,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserDripRecipeID sets the ID field of the mutation.
func withUserDripRecipeID(id int32) userdriprecipeOption {
	return func(m *UserDripRecipeMutation) {
		var (
			err   error
			once  sync.Once
			value *UserDripRecipe
		)
		m.oldValue = func(ctx context.Context) (*UserDripRecipe, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserDripRecipe.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserDripRecipe sets the old UserDripRecipe of the mutation.
func withUserDripRecipe(node *UserDripRecipe) userdriprecipeOption {
	return func(m *UserDripRecipeMutation) {
		m.oldValue = func(context.Context) (*UserDripRecipe, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserDripRecipeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserDripRecipeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserDripRecipe entities.
func (m *UserDripRecipeMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserDripRecipeMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserDripRecipeMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserDripRecipe.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *UserDripRecipeMutation) SetUserID(i int32) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserDripRecipeMutation) UserID() (r int32, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserDripRecipe entity.
// If the UserDripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDripRecipeMutation) OldUserID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *UserDripRecipeMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[userdriprecipe.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *UserDripRecipeMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[userdriprecipe.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserDripRecipeMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, userdriprecipe.FieldUserID)
}

// SetCoffeeBeanID sets the "coffee_bean_id" field.
func (m *UserDripRecipeMutation) SetCoffeeBeanID(i int32) {
	m.user_coffee_bean = &i
}

// CoffeeBeanID returns the value of the "coffee_bean_id" field in the mutation.
func (m *UserDripRecipeMutation) CoffeeBeanID() (r int32, exists bool) {
	v := m.user_coffee_bean
	if v == nil {
		return
	}
	return *v, true
}

// OldCoffeeBeanID returns the old "coffee_bean_id" field's value of the UserDripRecipe entity.
// If the UserDripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDripRecipeMutation) OldCoffeeBeanID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoffeeBeanID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoffeeBeanID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoffeeBeanID: %w", err)
	}
	return oldValue.CoffeeBeanID, nil
}

// ClearCoffeeBeanID clears the value of the "coffee_bean_id" field.
func (m *UserDripRecipeMutation) ClearCoffeeBeanID() {
	m.user_coffee_bean = nil
	m.clearedFields[userdriprecipe.FieldCoffeeBeanID] = struct{}{}
}

// CoffeeBeanIDCleared returns if the "coffee_bean_id" field was cleared in this mutation.
func (m *UserDripRecipeMutation) CoffeeBeanIDCleared() bool {
	_, ok := m.clearedFields[userdriprecipe.FieldCoffeeBeanID]
	return ok
}

// ResetCoffeeBeanID resets all changes to the "coffee_bean_id" field.
func (m *UserDripRecipeMutation) ResetCoffeeBeanID() {
	m.user_coffee_bean = nil
	delete(m.clearedFields, userdriprecipe.FieldCoffeeBeanID)
}

// SetCoffeeBeanWeight sets the "coffee_bean_weight" field.
func (m *UserDripRecipeMutation) SetCoffeeBeanWeight(f float64) {
	m.coffee_bean_weight = &f
	m.addcoffee_bean_weight = nil
}

// CoffeeBeanWeight returns the value of the "coffee_bean_weight" field in the mutation.
func (m *UserDripRecipeMutation) CoffeeBeanWeight() (r float64, exists bool) {
	v := m.coffee_bean_weight
	if v == nil {
		return
	}
	return *v, true
}

// OldCoffeeBeanWeight returns the old "coffee_bean_weight" field's value of the UserDripRecipe entity.
// If the UserDripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDripRecipeMutation) OldCoffeeBeanWeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoffeeBeanWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoffeeBeanWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoffeeBeanWeight: %w", err)
	}
	return oldValue.CoffeeBeanWeight, nil
}

// AddCoffeeBeanWeight adds f to the "coffee_bean_weight" field.
func (m *UserDripRecipeMutation) AddCoffeeBeanWeight(f float64) {
	if m.addcoffee_bean_weight != nil {
		*m.addcoffee_bean_weight += f
	} else {
		m.addcoffee_bean_weight = &f
	}
}

// AddedCoffeeBeanWeight returns the value that was added to the "coffee_bean_weight" field in this mutation.
func (m *UserDripRecipeMutation) AddedCoffeeBeanWeight() (r float64, exists bool) {
	v := m.addcoffee_bean_weight
	if v == nil {
		return
	}
	return *v, true
}

// ResetCoffeeBeanWeight resets all changes to the "coffee_bean_weight" field.
func (m *UserDripRecipeMutation) ResetCoffeeBeanWeight() {
	m.coffee_bean_weight = nil
	m.addcoffee_bean_weight = nil
}

// SetCoffeeBeanGrind sets the "coffee_bean_grind" field.
func (m *UserDripRecipeMutation) SetCoffeeBeanGrind(s string) {
	m.coffee_bean_grind = &s
}

// CoffeeBeanGrind returns the value of the "coffee_bean_grind" field in the mutation.
func (m *UserDripRecipeMutation) CoffeeBeanGrind() (r string, exists bool) {
	v := m.coffee_bean_grind
	if v == nil {
		return
	}
	return *v, true
}

// OldCoffeeBeanGrind returns the old "coffee_bean_grind" field's value of the UserDripRecipe entity.
// If the UserDripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDripRecipeMutation) OldCoffeeBeanGrind(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoffeeBeanGrind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoffeeBeanGrind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoffeeBeanGrind: %w", err)
	}
	return oldValue.CoffeeBeanGrind, nil
}

// ResetCoffeeBeanGrind resets all changes to the "coffee_bean_grind" field.
func (m *UserDripRecipeMutation) ResetCoffeeBeanGrind() {
	m.coffee_bean_grind = nil
}

// SetLiquidWeight sets the "liquid_weight" field.
func (m *UserDripRecipeMutation) SetLiquidWeight(f float64) {
	m.liquid_weight = &f
	m.addliquid_weight = nil
}

// LiquidWeight returns the value of the "liquid_weight" field in the mutation.
func (m *UserDripRecipeMutation) LiquidWeight() (r float64, exists bool) {
	v := m.liquid_weight
	if v == nil {
		return
	}
	return *v, true
}

// OldLiquidWeight returns the old "liquid_weight" field's value of the UserDripRecipe entity.
// If the UserDripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDripRecipeMutation) OldLiquidWeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLiquidWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLiquidWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiquidWeight: %w", err)
	}
	return oldValue.LiquidWeight, nil
}

// AddLiquidWeight adds f to the "liquid_weight" field.
func (m *UserDripRecipeMutation) AddLiquidWeight(f float64) {
	if m.addliquid_weight != nil {
		*m.addliquid_weight += f
	} else {
		m.addliquid_weight = &f
	}
}

// AddedLiquidWeight returns the value that was added to the "liquid_weight" field in this mutation.
func (m *UserDripRecipeMutation) AddedLiquidWeight() (r float64, exists bool) {
	v := m.addliquid_weight
	if v == nil {
		return
	}
	return *v, true
}

// ResetLiquidWeight resets all changes to the "liquid_weight" field.
func (m *UserDripRecipeMutation) ResetLiquidWeight() {
	m.liquid_weight = nil
	m.addliquid_weight = nil
}

// SetTemperature sets the "temperature" field.
func (m *UserDripRecipeMutation) SetTemperature(f float64) {
	m.temperature = &f
	m.addtemperature = nil
}

// Temperature returns the value of the "temperature" field in the mutation.
func (m *UserDripRecipeMutation) Temperature() (r float64, exists bool) {
	v := m.temperature
	if v == nil {
		return
	}
	return *v, true
}

// OldTemperature returns the old "temperature" field's value of the UserDripRecipe entity.
// If the UserDripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDripRecipeMutation) OldTemperature(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTemperature is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTemperature requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTemperature: %w", err)
	}
	return oldValue.Temperature, nil
}

// AddTemperature adds f to the "temperature" field.
func (m *UserDripRecipeMutation) AddTemperature(f float64) {
	if m.addtemperature != nil {
		*m.addtemperature += f
	} else {
		m.addtemperature = &f
	}
}

// AddedTemperature returns the value that was added to the "temperature" field in this mutation.
func (m *UserDripRecipeMutation) AddedTemperature() (r float64, exists bool) {
	v := m.addtemperature
	if v == nil {
		return
	}
	return *v, true
}

// ResetTemperature resets all changes to the "temperature" field.
func (m *UserDripRecipeMutation) ResetTemperature() {
	m.temperature = nil
	m.addtemperature = nil
}

// SetStepOne sets the "step_one" field.
func (m *UserDripRecipeMutation) SetStepOne(s string) {
	m.step_one = &s
}

// StepOne returns the value of the "step_one" field in the mutation.
func (m *UserDripRecipeMutation) StepOne() (r string, exists bool) {
	v := m.step_one
	if v == nil {
		return
	}
	return *v, true
}

// OldStepOne returns the old "step_one" field's value of the UserDripRecipe entity.
// If the UserDripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDripRecipeMutation) OldStepOne(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStepOne is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStepOne requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStepOne: %w", err)
	}
	return oldValue.StepOne, nil
}

// ResetStepOne resets all changes to the "step_one" field.
func (m *UserDripRecipeMutation) ResetStepOne() {
	m.step_one = nil
}

// SetStepTwo sets the "step_two" field.
func (m *UserDripRecipeMutation) SetStepTwo(s string) {
	m.step_two = &s
}

// StepTwo returns the value of the "step_two" field in the mutation.
func (m *UserDripRecipeMutation) StepTwo() (r string, exists bool) {
	v := m.step_two
	if v == nil {
		return
	}
	return *v, true
}

// OldStepTwo returns the old "step_two" field's value of the UserDripRecipe entity.
// If the UserDripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDripRecipeMutation) OldStepTwo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStepTwo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStepTwo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStepTwo: %w", err)
	}
	return oldValue.StepTwo, nil
}

// ResetStepTwo resets all changes to the "step_two" field.
func (m *UserDripRecipeMutation) ResetStepTwo() {
	m.step_two = nil
}

// SetMemo sets the "memo" field.
func (m *UserDripRecipeMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *UserDripRecipeMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the UserDripRecipe entity.
// If the UserDripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDripRecipeMutation) OldMemo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ResetMemo resets all changes to the "memo" field.
func (m *UserDripRecipeMutation) ResetMemo() {
	m.memo = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserDripRecipeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserDripRecipeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserDripRecipe entity.
// If the UserDripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDripRecipeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserDripRecipeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserDripRecipeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserDripRecipeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the UserDripRecipe entity.
// If the UserDripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDripRecipeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserDripRecipeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserDripRecipeMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserDripRecipeMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the UserDripRecipe entity.
// If the UserDripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDripRecipeMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserDripRecipeMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[userdriprecipe.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserDripRecipeMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[userdriprecipe.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserDripRecipeMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, userdriprecipe.FieldDeletedAt)
}

// SetUserCoffeeBeanID sets the "user_coffee_bean" edge to the UserCoffeeBean entity by id.
func (m *UserDripRecipeMutation) SetUserCoffeeBeanID(id int32) {
	m.user_coffee_bean = &id
}

// ClearUserCoffeeBean clears the "user_coffee_bean" edge to the UserCoffeeBean entity.
func (m *UserDripRecipeMutation) ClearUserCoffeeBean() {
	m.cleareduser_coffee_bean = true
}

// UserCoffeeBeanCleared reports if the "user_coffee_bean" edge to the UserCoffeeBean entity was cleared.
func (m *UserDripRecipeMutation) UserCoffeeBeanCleared() bool {
	return m.CoffeeBeanIDCleared() || m.cleareduser_coffee_bean
}

// UserCoffeeBeanID returns the "user_coffee_bean" edge ID in the mutation.
func (m *UserDripRecipeMutation) UserCoffeeBeanID() (id int32, exists bool) {
	if m.user_coffee_bean != nil {
		return *m.user_coffee_bean, true
	}
	return
}

// UserCoffeeBeanIDs returns the "user_coffee_bean" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserCoffeeBeanID instead. It exists only for internal usage by the builders.
func (m *UserDripRecipeMutation) UserCoffeeBeanIDs() (ids []int32) {
	if id := m.user_coffee_bean; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUserCoffeeBean resets all changes to the "user_coffee_bean" edge.
func (m *UserDripRecipeMutation) ResetUserCoffeeBean() {
	m.user_coffee_bean = nil
	m.cleareduser_coffee_bean = false
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserDripRecipeMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserDripRecipeMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserDripRecipeMutation) UserIDs() (ids []int32) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserDripRecipeMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the UserDripRecipeMutation builder.
func (m *UserDripRecipeMutation) Where(ps ...predicate.UserDripRecipe) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserDripRecipeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserDripRecipe).
func (m *UserDripRecipeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserDripRecipeMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.user != nil {
		fields = append(fields, userdriprecipe.FieldUserID)
	}
	if m.user_coffee_bean != nil {
		fields = append(fields, userdriprecipe.FieldCoffeeBeanID)
	}
	if m.coffee_bean_weight != nil {
		fields = append(fields, userdriprecipe.FieldCoffeeBeanWeight)
	}
	if m.coffee_bean_grind != nil {
		fields = append(fields, userdriprecipe.FieldCoffeeBeanGrind)
	}
	if m.liquid_weight != nil {
		fields = append(fields, userdriprecipe.FieldLiquidWeight)
	}
	if m.temperature != nil {
		fields = append(fields, userdriprecipe.FieldTemperature)
	}
	if m.step_one != nil {
		fields = append(fields, userdriprecipe.FieldStepOne)
	}
	if m.step_two != nil {
		fields = append(fields, userdriprecipe.FieldStepTwo)
	}
	if m.memo != nil {
		fields = append(fields, userdriprecipe.FieldMemo)
	}
	if m.created_at != nil {
		fields = append(fields, userdriprecipe.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, userdriprecipe.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, userdriprecipe.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserDripRecipeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userdriprecipe.FieldUserID:
		return m.UserID()
	case userdriprecipe.FieldCoffeeBeanID:
		return m.CoffeeBeanID()
	case userdriprecipe.FieldCoffeeBeanWeight:
		return m.CoffeeBeanWeight()
	case userdriprecipe.FieldCoffeeBeanGrind:
		return m.CoffeeBeanGrind()
	case userdriprecipe.FieldLiquidWeight:
		return m.LiquidWeight()
	case userdriprecipe.FieldTemperature:
		return m.Temperature()
	case userdriprecipe.FieldStepOne:
		return m.StepOne()
	case userdriprecipe.FieldStepTwo:
		return m.StepTwo()
	case userdriprecipe.FieldMemo:
		return m.Memo()
	case userdriprecipe.FieldCreatedAt:
		return m.CreatedAt()
	case userdriprecipe.FieldUpdatedAt:
		return m.UpdatedAt()
	case userdriprecipe.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserDripRecipeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userdriprecipe.FieldUserID:
		return m.OldUserID(ctx)
	case userdriprecipe.FieldCoffeeBeanID:
		return m.OldCoffeeBeanID(ctx)
	case userdriprecipe.FieldCoffeeBeanWeight:
		return m.OldCoffeeBeanWeight(ctx)
	case userdriprecipe.FieldCoffeeBeanGrind:
		return m.OldCoffeeBeanGrind(ctx)
	case userdriprecipe.FieldLiquidWeight:
		return m.OldLiquidWeight(ctx)
	case userdriprecipe.FieldTemperature:
		return m.OldTemperature(ctx)
	case userdriprecipe.FieldStepOne:
		return m.OldStepOne(ctx)
	case userdriprecipe.FieldStepTwo:
		return m.OldStepTwo(ctx)
	case userdriprecipe.FieldMemo:
		return m.OldMemo(ctx)
	case userdriprecipe.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case userdriprecipe.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case userdriprecipe.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserDripRecipe field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserDripRecipeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userdriprecipe.FieldUserID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userdriprecipe.FieldCoffeeBeanID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoffeeBeanID(v)
		return nil
	case userdriprecipe.FieldCoffeeBeanWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoffeeBeanWeight(v)
		return nil
	case userdriprecipe.FieldCoffeeBeanGrind:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoffeeBeanGrind(v)
		return nil
	case userdriprecipe.FieldLiquidWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiquidWeight(v)
		return nil
	case userdriprecipe.FieldTemperature:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTemperature(v)
		return nil
	case userdriprecipe.FieldStepOne:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStepOne(v)
		return nil
	case userdriprecipe.FieldStepTwo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStepTwo(v)
		return nil
	case userdriprecipe.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case userdriprecipe.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case userdriprecipe.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case userdriprecipe.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserDripRecipe field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserDripRecipeMutation) AddedFields() []string {
	var fields []string
	if m.addcoffee_bean_weight != nil {
		fields = append(fields, userdriprecipe.FieldCoffeeBeanWeight)
	}
	if m.addliquid_weight != nil {
		fields = append(fields, userdriprecipe.FieldLiquidWeight)
	}
	if m.addtemperature != nil {
		fields = append(fields, userdriprecipe.FieldTemperature)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserDripRecipeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userdriprecipe.FieldCoffeeBeanWeight:
		return m.AddedCoffeeBeanWeight()
	case userdriprecipe.FieldLiquidWeight:
		return m.AddedLiquidWeight()
	case userdriprecipe.FieldTemperature:
		return m.AddedTemperature()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserDripRecipeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userdriprecipe.FieldCoffeeBeanWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCoffeeBeanWeight(v)
		return nil
	case userdriprecipe.FieldLiquidWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLiquidWeight(v)
		return nil
	case userdriprecipe.FieldTemperature:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTemperature(v)
		return nil
	}
	return fmt.Errorf("unknown UserDripRecipe numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserDripRecipeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userdriprecipe.FieldUserID) {
		fields = append(fields, userdriprecipe.FieldUserID)
	}
	if m.FieldCleared(userdriprecipe.FieldCoffeeBeanID) {
		fields = append(fields, userdriprecipe.FieldCoffeeBeanID)
	}
	if m.FieldCleared(userdriprecipe.FieldDeletedAt) {
		fields = append(fields, userdriprecipe.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserDripRecipeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserDripRecipeMutation) ClearField(name string) error {
	switch name {
	case userdriprecipe.FieldUserID:
		m.ClearUserID()
		return nil
	case userdriprecipe.FieldCoffeeBeanID:
		m.ClearCoffeeBeanID()
		return nil
	case userdriprecipe.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown UserDripRecipe nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserDripRecipeMutation) ResetField(name string) error {
	switch name {
	case userdriprecipe.FieldUserID:
		m.ResetUserID()
		return nil
	case userdriprecipe.FieldCoffeeBeanID:
		m.ResetCoffeeBeanID()
		return nil
	case userdriprecipe.FieldCoffeeBeanWeight:
		m.ResetCoffeeBeanWeight()
		return nil
	case userdriprecipe.FieldCoffeeBeanGrind:
		m.ResetCoffeeBeanGrind()
		return nil
	case userdriprecipe.FieldLiquidWeight:
		m.ResetLiquidWeight()
		return nil
	case userdriprecipe.FieldTemperature:
		m.ResetTemperature()
		return nil
	case userdriprecipe.FieldStepOne:
		m.ResetStepOne()
		return nil
	case userdriprecipe.FieldStepTwo:
		m.ResetStepTwo()
		return nil
	case userdriprecipe.FieldMemo:
		m.ResetMemo()
		return nil
	case userdriprecipe.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case userdriprecipe.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case userdriprecipe.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown UserDripRecipe field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserDripRecipeMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user_coffee_bean != nil {
		edges = append(edges, userdriprecipe.EdgeUserCoffeeBean)
	}
	if m.user != nil {
		edges = append(edges, userdriprecipe.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserDripRecipeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userdriprecipe.EdgeUserCoffeeBean:
		if id := m.user_coffee_bean; id != nil {
			return []ent.Value{*id}
		}
	case userdriprecipe.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserDripRecipeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserDripRecipeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserDripRecipeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser_coffee_bean {
		edges = append(edges, userdriprecipe.EdgeUserCoffeeBean)
	}
	if m.cleareduser {
		edges = append(edges, userdriprecipe.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserDripRecipeMutation) EdgeCleared(name string) bool {
	switch name {
	case userdriprecipe.EdgeUserCoffeeBean:
		return m.cleareduser_coffee_bean
	case userdriprecipe.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserDripRecipeMutation) ClearEdge(name string) error {
	switch name {
	case userdriprecipe.EdgeUserCoffeeBean:
		m.ClearUserCoffeeBean()
		return nil
	case userdriprecipe.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown UserDripRecipe unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserDripRecipeMutation) ResetEdge(name string) error {
	switch name {
	case userdriprecipe.EdgeUserCoffeeBean:
		m.ResetUserCoffeeBean()
		return nil
	case userdriprecipe.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown UserDripRecipe edge %s", name)
}
