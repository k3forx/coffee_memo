// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/k3forx/coffee_memo/pkg/ent/coffeebean"
	"github.com/k3forx/coffee_memo/pkg/ent/coffeeshop"
	"github.com/k3forx/coffee_memo/pkg/ent/driprecipe"
	"github.com/k3forx/coffee_memo/pkg/ent/goosedbversion"
	"github.com/k3forx/coffee_memo/pkg/ent/predicate"
	"github.com/k3forx/coffee_memo/pkg/ent/user"
	"github.com/k3forx/coffee_memo/pkg/ent/userscoffeebean"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCoffeeBean      = "CoffeeBean"
	TypeCoffeeShop      = "CoffeeShop"
	TypeDripRecipe      = "DripRecipe"
	TypeGooseDbVersion  = "GooseDbVersion"
	TypeUser            = "User"
	TypeUsersCoffeeBean = "UsersCoffeeBean"
)

// CoffeeBeanMutation represents an operation that mutates the CoffeeBean nodes in the graph.
type CoffeeBeanMutation struct {
	config
	op             Op
	typ            string
	id             *int32
	name           *string
	farm_name      *string
	country        *string
	shop_id        *int32
	addshop_id     *int32
	roasted_degree *string
	roasted_at     *time.Time
	created_at     *time.Time
	updated_at     *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*CoffeeBean, error)
	predicates     []predicate.CoffeeBean
}

var _ ent.Mutation = (*CoffeeBeanMutation)(nil)

// coffeebeanOption allows management of the mutation configuration using functional options.
type coffeebeanOption func(*CoffeeBeanMutation)

// newCoffeeBeanMutation creates new mutation for the CoffeeBean entity.
func newCoffeeBeanMutation(c config, op Op, opts ...coffeebeanOption) *CoffeeBeanMutation {
	m := &CoffeeBeanMutation{
		config:        c,
		op:            op,
		typ:           TypeCoffeeBean,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoffeeBeanID sets the ID field of the mutation.
func withCoffeeBeanID(id int32) coffeebeanOption {
	return func(m *CoffeeBeanMutation) {
		var (
			err   error
			once  sync.Once
			value *CoffeeBean
		)
		m.oldValue = func(ctx context.Context) (*CoffeeBean, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CoffeeBean.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoffeeBean sets the old CoffeeBean of the mutation.
func withCoffeeBean(node *CoffeeBean) coffeebeanOption {
	return func(m *CoffeeBeanMutation) {
		m.oldValue = func(context.Context) (*CoffeeBean, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoffeeBeanMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoffeeBeanMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CoffeeBean entities.
func (m *CoffeeBeanMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CoffeeBeanMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CoffeeBeanMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CoffeeBean.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CoffeeBeanMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CoffeeBeanMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CoffeeBean entity.
// If the CoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeBeanMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CoffeeBeanMutation) ResetName() {
	m.name = nil
}

// SetFarmName sets the "farm_name" field.
func (m *CoffeeBeanMutation) SetFarmName(s string) {
	m.farm_name = &s
}

// FarmName returns the value of the "farm_name" field in the mutation.
func (m *CoffeeBeanMutation) FarmName() (r string, exists bool) {
	v := m.farm_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFarmName returns the old "farm_name" field's value of the CoffeeBean entity.
// If the CoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeBeanMutation) OldFarmName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFarmName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFarmName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFarmName: %w", err)
	}
	return oldValue.FarmName, nil
}

// ClearFarmName clears the value of the "farm_name" field.
func (m *CoffeeBeanMutation) ClearFarmName() {
	m.farm_name = nil
	m.clearedFields[coffeebean.FieldFarmName] = struct{}{}
}

// FarmNameCleared returns if the "farm_name" field was cleared in this mutation.
func (m *CoffeeBeanMutation) FarmNameCleared() bool {
	_, ok := m.clearedFields[coffeebean.FieldFarmName]
	return ok
}

// ResetFarmName resets all changes to the "farm_name" field.
func (m *CoffeeBeanMutation) ResetFarmName() {
	m.farm_name = nil
	delete(m.clearedFields, coffeebean.FieldFarmName)
}

// SetCountry sets the "country" field.
func (m *CoffeeBeanMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *CoffeeBeanMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the CoffeeBean entity.
// If the CoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeBeanMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ClearCountry clears the value of the "country" field.
func (m *CoffeeBeanMutation) ClearCountry() {
	m.country = nil
	m.clearedFields[coffeebean.FieldCountry] = struct{}{}
}

// CountryCleared returns if the "country" field was cleared in this mutation.
func (m *CoffeeBeanMutation) CountryCleared() bool {
	_, ok := m.clearedFields[coffeebean.FieldCountry]
	return ok
}

// ResetCountry resets all changes to the "country" field.
func (m *CoffeeBeanMutation) ResetCountry() {
	m.country = nil
	delete(m.clearedFields, coffeebean.FieldCountry)
}

// SetShopID sets the "shop_id" field.
func (m *CoffeeBeanMutation) SetShopID(i int32) {
	m.shop_id = &i
	m.addshop_id = nil
}

// ShopID returns the value of the "shop_id" field in the mutation.
func (m *CoffeeBeanMutation) ShopID() (r int32, exists bool) {
	v := m.shop_id
	if v == nil {
		return
	}
	return *v, true
}

// OldShopID returns the old "shop_id" field's value of the CoffeeBean entity.
// If the CoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeBeanMutation) OldShopID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShopID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShopID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShopID: %w", err)
	}
	return oldValue.ShopID, nil
}

// AddShopID adds i to the "shop_id" field.
func (m *CoffeeBeanMutation) AddShopID(i int32) {
	if m.addshop_id != nil {
		*m.addshop_id += i
	} else {
		m.addshop_id = &i
	}
}

// AddedShopID returns the value that was added to the "shop_id" field in this mutation.
func (m *CoffeeBeanMutation) AddedShopID() (r int32, exists bool) {
	v := m.addshop_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetShopID resets all changes to the "shop_id" field.
func (m *CoffeeBeanMutation) ResetShopID() {
	m.shop_id = nil
	m.addshop_id = nil
}

// SetRoastedDegree sets the "roasted_degree" field.
func (m *CoffeeBeanMutation) SetRoastedDegree(s string) {
	m.roasted_degree = &s
}

// RoastedDegree returns the value of the "roasted_degree" field in the mutation.
func (m *CoffeeBeanMutation) RoastedDegree() (r string, exists bool) {
	v := m.roasted_degree
	if v == nil {
		return
	}
	return *v, true
}

// OldRoastedDegree returns the old "roasted_degree" field's value of the CoffeeBean entity.
// If the CoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeBeanMutation) OldRoastedDegree(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoastedDegree is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoastedDegree requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoastedDegree: %w", err)
	}
	return oldValue.RoastedDegree, nil
}

// ResetRoastedDegree resets all changes to the "roasted_degree" field.
func (m *CoffeeBeanMutation) ResetRoastedDegree() {
	m.roasted_degree = nil
}

// SetRoastedAt sets the "roasted_at" field.
func (m *CoffeeBeanMutation) SetRoastedAt(t time.Time) {
	m.roasted_at = &t
}

// RoastedAt returns the value of the "roasted_at" field in the mutation.
func (m *CoffeeBeanMutation) RoastedAt() (r time.Time, exists bool) {
	v := m.roasted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldRoastedAt returns the old "roasted_at" field's value of the CoffeeBean entity.
// If the CoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeBeanMutation) OldRoastedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoastedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoastedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoastedAt: %w", err)
	}
	return oldValue.RoastedAt, nil
}

// ClearRoastedAt clears the value of the "roasted_at" field.
func (m *CoffeeBeanMutation) ClearRoastedAt() {
	m.roasted_at = nil
	m.clearedFields[coffeebean.FieldRoastedAt] = struct{}{}
}

// RoastedAtCleared returns if the "roasted_at" field was cleared in this mutation.
func (m *CoffeeBeanMutation) RoastedAtCleared() bool {
	_, ok := m.clearedFields[coffeebean.FieldRoastedAt]
	return ok
}

// ResetRoastedAt resets all changes to the "roasted_at" field.
func (m *CoffeeBeanMutation) ResetRoastedAt() {
	m.roasted_at = nil
	delete(m.clearedFields, coffeebean.FieldRoastedAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *CoffeeBeanMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CoffeeBeanMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CoffeeBean entity.
// If the CoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeBeanMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CoffeeBeanMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CoffeeBeanMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CoffeeBeanMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CoffeeBean entity.
// If the CoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeBeanMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CoffeeBeanMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the CoffeeBeanMutation builder.
func (m *CoffeeBeanMutation) Where(ps ...predicate.CoffeeBean) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CoffeeBeanMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CoffeeBean).
func (m *CoffeeBeanMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CoffeeBeanMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.name != nil {
		fields = append(fields, coffeebean.FieldName)
	}
	if m.farm_name != nil {
		fields = append(fields, coffeebean.FieldFarmName)
	}
	if m.country != nil {
		fields = append(fields, coffeebean.FieldCountry)
	}
	if m.shop_id != nil {
		fields = append(fields, coffeebean.FieldShopID)
	}
	if m.roasted_degree != nil {
		fields = append(fields, coffeebean.FieldRoastedDegree)
	}
	if m.roasted_at != nil {
		fields = append(fields, coffeebean.FieldRoastedAt)
	}
	if m.created_at != nil {
		fields = append(fields, coffeebean.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, coffeebean.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CoffeeBeanMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coffeebean.FieldName:
		return m.Name()
	case coffeebean.FieldFarmName:
		return m.FarmName()
	case coffeebean.FieldCountry:
		return m.Country()
	case coffeebean.FieldShopID:
		return m.ShopID()
	case coffeebean.FieldRoastedDegree:
		return m.RoastedDegree()
	case coffeebean.FieldRoastedAt:
		return m.RoastedAt()
	case coffeebean.FieldCreatedAt:
		return m.CreatedAt()
	case coffeebean.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CoffeeBeanMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coffeebean.FieldName:
		return m.OldName(ctx)
	case coffeebean.FieldFarmName:
		return m.OldFarmName(ctx)
	case coffeebean.FieldCountry:
		return m.OldCountry(ctx)
	case coffeebean.FieldShopID:
		return m.OldShopID(ctx)
	case coffeebean.FieldRoastedDegree:
		return m.OldRoastedDegree(ctx)
	case coffeebean.FieldRoastedAt:
		return m.OldRoastedAt(ctx)
	case coffeebean.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case coffeebean.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CoffeeBean field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoffeeBeanMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coffeebean.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case coffeebean.FieldFarmName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFarmName(v)
		return nil
	case coffeebean.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case coffeebean.FieldShopID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShopID(v)
		return nil
	case coffeebean.FieldRoastedDegree:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoastedDegree(v)
		return nil
	case coffeebean.FieldRoastedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoastedAt(v)
		return nil
	case coffeebean.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case coffeebean.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CoffeeBean field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CoffeeBeanMutation) AddedFields() []string {
	var fields []string
	if m.addshop_id != nil {
		fields = append(fields, coffeebean.FieldShopID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CoffeeBeanMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coffeebean.FieldShopID:
		return m.AddedShopID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoffeeBeanMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coffeebean.FieldShopID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShopID(v)
		return nil
	}
	return fmt.Errorf("unknown CoffeeBean numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CoffeeBeanMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(coffeebean.FieldFarmName) {
		fields = append(fields, coffeebean.FieldFarmName)
	}
	if m.FieldCleared(coffeebean.FieldCountry) {
		fields = append(fields, coffeebean.FieldCountry)
	}
	if m.FieldCleared(coffeebean.FieldRoastedAt) {
		fields = append(fields, coffeebean.FieldRoastedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CoffeeBeanMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoffeeBeanMutation) ClearField(name string) error {
	switch name {
	case coffeebean.FieldFarmName:
		m.ClearFarmName()
		return nil
	case coffeebean.FieldCountry:
		m.ClearCountry()
		return nil
	case coffeebean.FieldRoastedAt:
		m.ClearRoastedAt()
		return nil
	}
	return fmt.Errorf("unknown CoffeeBean nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CoffeeBeanMutation) ResetField(name string) error {
	switch name {
	case coffeebean.FieldName:
		m.ResetName()
		return nil
	case coffeebean.FieldFarmName:
		m.ResetFarmName()
		return nil
	case coffeebean.FieldCountry:
		m.ResetCountry()
		return nil
	case coffeebean.FieldShopID:
		m.ResetShopID()
		return nil
	case coffeebean.FieldRoastedDegree:
		m.ResetRoastedDegree()
		return nil
	case coffeebean.FieldRoastedAt:
		m.ResetRoastedAt()
		return nil
	case coffeebean.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case coffeebean.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown CoffeeBean field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CoffeeBeanMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CoffeeBeanMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CoffeeBeanMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CoffeeBeanMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CoffeeBeanMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CoffeeBeanMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CoffeeBeanMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CoffeeBean unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CoffeeBeanMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CoffeeBean edge %s", name)
}

// CoffeeShopMutation represents an operation that mutates the CoffeeShop nodes in the graph.
type CoffeeShopMutation struct {
	config
	op            Op
	typ           string
	id            *int32
	name          *string
	shop_url      *string
	open_time     *time.Time
	close_time    *time.Time
	created_at    *time.Time
	updated_at    *time.Time
	closed_at     *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CoffeeShop, error)
	predicates    []predicate.CoffeeShop
}

var _ ent.Mutation = (*CoffeeShopMutation)(nil)

// coffeeshopOption allows management of the mutation configuration using functional options.
type coffeeshopOption func(*CoffeeShopMutation)

// newCoffeeShopMutation creates new mutation for the CoffeeShop entity.
func newCoffeeShopMutation(c config, op Op, opts ...coffeeshopOption) *CoffeeShopMutation {
	m := &CoffeeShopMutation{
		config:        c,
		op:            op,
		typ:           TypeCoffeeShop,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoffeeShopID sets the ID field of the mutation.
func withCoffeeShopID(id int32) coffeeshopOption {
	return func(m *CoffeeShopMutation) {
		var (
			err   error
			once  sync.Once
			value *CoffeeShop
		)
		m.oldValue = func(ctx context.Context) (*CoffeeShop, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CoffeeShop.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoffeeShop sets the old CoffeeShop of the mutation.
func withCoffeeShop(node *CoffeeShop) coffeeshopOption {
	return func(m *CoffeeShopMutation) {
		m.oldValue = func(context.Context) (*CoffeeShop, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoffeeShopMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoffeeShopMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CoffeeShop entities.
func (m *CoffeeShopMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CoffeeShopMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CoffeeShopMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CoffeeShop.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CoffeeShopMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CoffeeShopMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CoffeeShop entity.
// If the CoffeeShop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeShopMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CoffeeShopMutation) ResetName() {
	m.name = nil
}

// SetShopURL sets the "shop_url" field.
func (m *CoffeeShopMutation) SetShopURL(s string) {
	m.shop_url = &s
}

// ShopURL returns the value of the "shop_url" field in the mutation.
func (m *CoffeeShopMutation) ShopURL() (r string, exists bool) {
	v := m.shop_url
	if v == nil {
		return
	}
	return *v, true
}

// OldShopURL returns the old "shop_url" field's value of the CoffeeShop entity.
// If the CoffeeShop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeShopMutation) OldShopURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShopURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShopURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShopURL: %w", err)
	}
	return oldValue.ShopURL, nil
}

// ClearShopURL clears the value of the "shop_url" field.
func (m *CoffeeShopMutation) ClearShopURL() {
	m.shop_url = nil
	m.clearedFields[coffeeshop.FieldShopURL] = struct{}{}
}

// ShopURLCleared returns if the "shop_url" field was cleared in this mutation.
func (m *CoffeeShopMutation) ShopURLCleared() bool {
	_, ok := m.clearedFields[coffeeshop.FieldShopURL]
	return ok
}

// ResetShopURL resets all changes to the "shop_url" field.
func (m *CoffeeShopMutation) ResetShopURL() {
	m.shop_url = nil
	delete(m.clearedFields, coffeeshop.FieldShopURL)
}

// SetOpenTime sets the "open_time" field.
func (m *CoffeeShopMutation) SetOpenTime(t time.Time) {
	m.open_time = &t
}

// OpenTime returns the value of the "open_time" field in the mutation.
func (m *CoffeeShopMutation) OpenTime() (r time.Time, exists bool) {
	v := m.open_time
	if v == nil {
		return
	}
	return *v, true
}

// OldOpenTime returns the old "open_time" field's value of the CoffeeShop entity.
// If the CoffeeShop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeShopMutation) OldOpenTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOpenTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOpenTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOpenTime: %w", err)
	}
	return oldValue.OpenTime, nil
}

// ClearOpenTime clears the value of the "open_time" field.
func (m *CoffeeShopMutation) ClearOpenTime() {
	m.open_time = nil
	m.clearedFields[coffeeshop.FieldOpenTime] = struct{}{}
}

// OpenTimeCleared returns if the "open_time" field was cleared in this mutation.
func (m *CoffeeShopMutation) OpenTimeCleared() bool {
	_, ok := m.clearedFields[coffeeshop.FieldOpenTime]
	return ok
}

// ResetOpenTime resets all changes to the "open_time" field.
func (m *CoffeeShopMutation) ResetOpenTime() {
	m.open_time = nil
	delete(m.clearedFields, coffeeshop.FieldOpenTime)
}

// SetCloseTime sets the "close_time" field.
func (m *CoffeeShopMutation) SetCloseTime(t time.Time) {
	m.close_time = &t
}

// CloseTime returns the value of the "close_time" field in the mutation.
func (m *CoffeeShopMutation) CloseTime() (r time.Time, exists bool) {
	v := m.close_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCloseTime returns the old "close_time" field's value of the CoffeeShop entity.
// If the CoffeeShop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeShopMutation) OldCloseTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCloseTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCloseTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCloseTime: %w", err)
	}
	return oldValue.CloseTime, nil
}

// ClearCloseTime clears the value of the "close_time" field.
func (m *CoffeeShopMutation) ClearCloseTime() {
	m.close_time = nil
	m.clearedFields[coffeeshop.FieldCloseTime] = struct{}{}
}

// CloseTimeCleared returns if the "close_time" field was cleared in this mutation.
func (m *CoffeeShopMutation) CloseTimeCleared() bool {
	_, ok := m.clearedFields[coffeeshop.FieldCloseTime]
	return ok
}

// ResetCloseTime resets all changes to the "close_time" field.
func (m *CoffeeShopMutation) ResetCloseTime() {
	m.close_time = nil
	delete(m.clearedFields, coffeeshop.FieldCloseTime)
}

// SetCreatedAt sets the "created_at" field.
func (m *CoffeeShopMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CoffeeShopMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CoffeeShop entity.
// If the CoffeeShop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeShopMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CoffeeShopMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CoffeeShopMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CoffeeShopMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CoffeeShop entity.
// If the CoffeeShop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeShopMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CoffeeShopMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetClosedAt sets the "closed_at" field.
func (m *CoffeeShopMutation) SetClosedAt(t time.Time) {
	m.closed_at = &t
}

// ClosedAt returns the value of the "closed_at" field in the mutation.
func (m *CoffeeShopMutation) ClosedAt() (r time.Time, exists bool) {
	v := m.closed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldClosedAt returns the old "closed_at" field's value of the CoffeeShop entity.
// If the CoffeeShop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeShopMutation) OldClosedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClosedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClosedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClosedAt: %w", err)
	}
	return oldValue.ClosedAt, nil
}

// ClearClosedAt clears the value of the "closed_at" field.
func (m *CoffeeShopMutation) ClearClosedAt() {
	m.closed_at = nil
	m.clearedFields[coffeeshop.FieldClosedAt] = struct{}{}
}

// ClosedAtCleared returns if the "closed_at" field was cleared in this mutation.
func (m *CoffeeShopMutation) ClosedAtCleared() bool {
	_, ok := m.clearedFields[coffeeshop.FieldClosedAt]
	return ok
}

// ResetClosedAt resets all changes to the "closed_at" field.
func (m *CoffeeShopMutation) ResetClosedAt() {
	m.closed_at = nil
	delete(m.clearedFields, coffeeshop.FieldClosedAt)
}

// Where appends a list predicates to the CoffeeShopMutation builder.
func (m *CoffeeShopMutation) Where(ps ...predicate.CoffeeShop) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CoffeeShopMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CoffeeShop).
func (m *CoffeeShopMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CoffeeShopMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, coffeeshop.FieldName)
	}
	if m.shop_url != nil {
		fields = append(fields, coffeeshop.FieldShopURL)
	}
	if m.open_time != nil {
		fields = append(fields, coffeeshop.FieldOpenTime)
	}
	if m.close_time != nil {
		fields = append(fields, coffeeshop.FieldCloseTime)
	}
	if m.created_at != nil {
		fields = append(fields, coffeeshop.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, coffeeshop.FieldUpdatedAt)
	}
	if m.closed_at != nil {
		fields = append(fields, coffeeshop.FieldClosedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CoffeeShopMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coffeeshop.FieldName:
		return m.Name()
	case coffeeshop.FieldShopURL:
		return m.ShopURL()
	case coffeeshop.FieldOpenTime:
		return m.OpenTime()
	case coffeeshop.FieldCloseTime:
		return m.CloseTime()
	case coffeeshop.FieldCreatedAt:
		return m.CreatedAt()
	case coffeeshop.FieldUpdatedAt:
		return m.UpdatedAt()
	case coffeeshop.FieldClosedAt:
		return m.ClosedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CoffeeShopMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coffeeshop.FieldName:
		return m.OldName(ctx)
	case coffeeshop.FieldShopURL:
		return m.OldShopURL(ctx)
	case coffeeshop.FieldOpenTime:
		return m.OldOpenTime(ctx)
	case coffeeshop.FieldCloseTime:
		return m.OldCloseTime(ctx)
	case coffeeshop.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case coffeeshop.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case coffeeshop.FieldClosedAt:
		return m.OldClosedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CoffeeShop field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoffeeShopMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coffeeshop.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case coffeeshop.FieldShopURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShopURL(v)
		return nil
	case coffeeshop.FieldOpenTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOpenTime(v)
		return nil
	case coffeeshop.FieldCloseTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCloseTime(v)
		return nil
	case coffeeshop.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case coffeeshop.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case coffeeshop.FieldClosedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClosedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CoffeeShop field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CoffeeShopMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CoffeeShopMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoffeeShopMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CoffeeShop numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CoffeeShopMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(coffeeshop.FieldShopURL) {
		fields = append(fields, coffeeshop.FieldShopURL)
	}
	if m.FieldCleared(coffeeshop.FieldOpenTime) {
		fields = append(fields, coffeeshop.FieldOpenTime)
	}
	if m.FieldCleared(coffeeshop.FieldCloseTime) {
		fields = append(fields, coffeeshop.FieldCloseTime)
	}
	if m.FieldCleared(coffeeshop.FieldClosedAt) {
		fields = append(fields, coffeeshop.FieldClosedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CoffeeShopMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoffeeShopMutation) ClearField(name string) error {
	switch name {
	case coffeeshop.FieldShopURL:
		m.ClearShopURL()
		return nil
	case coffeeshop.FieldOpenTime:
		m.ClearOpenTime()
		return nil
	case coffeeshop.FieldCloseTime:
		m.ClearCloseTime()
		return nil
	case coffeeshop.FieldClosedAt:
		m.ClearClosedAt()
		return nil
	}
	return fmt.Errorf("unknown CoffeeShop nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CoffeeShopMutation) ResetField(name string) error {
	switch name {
	case coffeeshop.FieldName:
		m.ResetName()
		return nil
	case coffeeshop.FieldShopURL:
		m.ResetShopURL()
		return nil
	case coffeeshop.FieldOpenTime:
		m.ResetOpenTime()
		return nil
	case coffeeshop.FieldCloseTime:
		m.ResetCloseTime()
		return nil
	case coffeeshop.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case coffeeshop.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case coffeeshop.FieldClosedAt:
		m.ResetClosedAt()
		return nil
	}
	return fmt.Errorf("unknown CoffeeShop field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CoffeeShopMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CoffeeShopMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CoffeeShopMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CoffeeShopMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CoffeeShopMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CoffeeShopMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CoffeeShopMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CoffeeShop unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CoffeeShopMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CoffeeShop edge %s", name)
}

// DripRecipeMutation represents an operation that mutates the DripRecipe nodes in the graph.
type DripRecipeMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int32
	user_id               *int32
	adduser_id            *int32
	coffee_bean_id        *int32
	addcoffee_bean_id     *int32
	coffee_bean_weight    *float64
	addcoffee_bean_weight *float64
	liquid_weight         *float64
	addliquid_weight      *float64
	temperature           *float64
	addtemperature        *float64
	steam_time            *int32
	addsteam_time         *int32
	drip_time             *int32
	adddrip_time          *int32
	memo                  *string
	created_at            *time.Time
	updated_at            *time.Time
	clearedFields         map[string]struct{}
	done                  bool
	oldValue              func(context.Context) (*DripRecipe, error)
	predicates            []predicate.DripRecipe
}

var _ ent.Mutation = (*DripRecipeMutation)(nil)

// driprecipeOption allows management of the mutation configuration using functional options.
type driprecipeOption func(*DripRecipeMutation)

// newDripRecipeMutation creates new mutation for the DripRecipe entity.
func newDripRecipeMutation(c config, op Op, opts ...driprecipeOption) *DripRecipeMutation {
	m := &DripRecipeMutation{
		config:        c,
		op:            op,
		typ:           TypeDripRecipe,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDripRecipeID sets the ID field of the mutation.
func withDripRecipeID(id int32) driprecipeOption {
	return func(m *DripRecipeMutation) {
		var (
			err   error
			once  sync.Once
			value *DripRecipe
		)
		m.oldValue = func(ctx context.Context) (*DripRecipe, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DripRecipe.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDripRecipe sets the old DripRecipe of the mutation.
func withDripRecipe(node *DripRecipe) driprecipeOption {
	return func(m *DripRecipeMutation) {
		m.oldValue = func(context.Context) (*DripRecipe, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DripRecipeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DripRecipeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DripRecipe entities.
func (m *DripRecipeMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DripRecipeMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DripRecipeMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DripRecipe.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *DripRecipeMutation) SetUserID(i int32) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *DripRecipeMutation) UserID() (r int32, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the DripRecipe entity.
// If the DripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DripRecipeMutation) OldUserID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *DripRecipeMutation) AddUserID(i int32) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *DripRecipeMutation) AddedUserID() (r int32, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *DripRecipeMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetCoffeeBeanID sets the "coffee_bean_id" field.
func (m *DripRecipeMutation) SetCoffeeBeanID(i int32) {
	m.coffee_bean_id = &i
	m.addcoffee_bean_id = nil
}

// CoffeeBeanID returns the value of the "coffee_bean_id" field in the mutation.
func (m *DripRecipeMutation) CoffeeBeanID() (r int32, exists bool) {
	v := m.coffee_bean_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoffeeBeanID returns the old "coffee_bean_id" field's value of the DripRecipe entity.
// If the DripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DripRecipeMutation) OldCoffeeBeanID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoffeeBeanID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoffeeBeanID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoffeeBeanID: %w", err)
	}
	return oldValue.CoffeeBeanID, nil
}

// AddCoffeeBeanID adds i to the "coffee_bean_id" field.
func (m *DripRecipeMutation) AddCoffeeBeanID(i int32) {
	if m.addcoffee_bean_id != nil {
		*m.addcoffee_bean_id += i
	} else {
		m.addcoffee_bean_id = &i
	}
}

// AddedCoffeeBeanID returns the value that was added to the "coffee_bean_id" field in this mutation.
func (m *DripRecipeMutation) AddedCoffeeBeanID() (r int32, exists bool) {
	v := m.addcoffee_bean_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetCoffeeBeanID resets all changes to the "coffee_bean_id" field.
func (m *DripRecipeMutation) ResetCoffeeBeanID() {
	m.coffee_bean_id = nil
	m.addcoffee_bean_id = nil
}

// SetCoffeeBeanWeight sets the "coffee_bean_weight" field.
func (m *DripRecipeMutation) SetCoffeeBeanWeight(f float64) {
	m.coffee_bean_weight = &f
	m.addcoffee_bean_weight = nil
}

// CoffeeBeanWeight returns the value of the "coffee_bean_weight" field in the mutation.
func (m *DripRecipeMutation) CoffeeBeanWeight() (r float64, exists bool) {
	v := m.coffee_bean_weight
	if v == nil {
		return
	}
	return *v, true
}

// OldCoffeeBeanWeight returns the old "coffee_bean_weight" field's value of the DripRecipe entity.
// If the DripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DripRecipeMutation) OldCoffeeBeanWeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoffeeBeanWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoffeeBeanWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoffeeBeanWeight: %w", err)
	}
	return oldValue.CoffeeBeanWeight, nil
}

// AddCoffeeBeanWeight adds f to the "coffee_bean_weight" field.
func (m *DripRecipeMutation) AddCoffeeBeanWeight(f float64) {
	if m.addcoffee_bean_weight != nil {
		*m.addcoffee_bean_weight += f
	} else {
		m.addcoffee_bean_weight = &f
	}
}

// AddedCoffeeBeanWeight returns the value that was added to the "coffee_bean_weight" field in this mutation.
func (m *DripRecipeMutation) AddedCoffeeBeanWeight() (r float64, exists bool) {
	v := m.addcoffee_bean_weight
	if v == nil {
		return
	}
	return *v, true
}

// ResetCoffeeBeanWeight resets all changes to the "coffee_bean_weight" field.
func (m *DripRecipeMutation) ResetCoffeeBeanWeight() {
	m.coffee_bean_weight = nil
	m.addcoffee_bean_weight = nil
}

// SetLiquidWeight sets the "liquid_weight" field.
func (m *DripRecipeMutation) SetLiquidWeight(f float64) {
	m.liquid_weight = &f
	m.addliquid_weight = nil
}

// LiquidWeight returns the value of the "liquid_weight" field in the mutation.
func (m *DripRecipeMutation) LiquidWeight() (r float64, exists bool) {
	v := m.liquid_weight
	if v == nil {
		return
	}
	return *v, true
}

// OldLiquidWeight returns the old "liquid_weight" field's value of the DripRecipe entity.
// If the DripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DripRecipeMutation) OldLiquidWeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLiquidWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLiquidWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiquidWeight: %w", err)
	}
	return oldValue.LiquidWeight, nil
}

// AddLiquidWeight adds f to the "liquid_weight" field.
func (m *DripRecipeMutation) AddLiquidWeight(f float64) {
	if m.addliquid_weight != nil {
		*m.addliquid_weight += f
	} else {
		m.addliquid_weight = &f
	}
}

// AddedLiquidWeight returns the value that was added to the "liquid_weight" field in this mutation.
func (m *DripRecipeMutation) AddedLiquidWeight() (r float64, exists bool) {
	v := m.addliquid_weight
	if v == nil {
		return
	}
	return *v, true
}

// ResetLiquidWeight resets all changes to the "liquid_weight" field.
func (m *DripRecipeMutation) ResetLiquidWeight() {
	m.liquid_weight = nil
	m.addliquid_weight = nil
}

// SetTemperature sets the "temperature" field.
func (m *DripRecipeMutation) SetTemperature(f float64) {
	m.temperature = &f
	m.addtemperature = nil
}

// Temperature returns the value of the "temperature" field in the mutation.
func (m *DripRecipeMutation) Temperature() (r float64, exists bool) {
	v := m.temperature
	if v == nil {
		return
	}
	return *v, true
}

// OldTemperature returns the old "temperature" field's value of the DripRecipe entity.
// If the DripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DripRecipeMutation) OldTemperature(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTemperature is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTemperature requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTemperature: %w", err)
	}
	return oldValue.Temperature, nil
}

// AddTemperature adds f to the "temperature" field.
func (m *DripRecipeMutation) AddTemperature(f float64) {
	if m.addtemperature != nil {
		*m.addtemperature += f
	} else {
		m.addtemperature = &f
	}
}

// AddedTemperature returns the value that was added to the "temperature" field in this mutation.
func (m *DripRecipeMutation) AddedTemperature() (r float64, exists bool) {
	v := m.addtemperature
	if v == nil {
		return
	}
	return *v, true
}

// ResetTemperature resets all changes to the "temperature" field.
func (m *DripRecipeMutation) ResetTemperature() {
	m.temperature = nil
	m.addtemperature = nil
}

// SetSteamTime sets the "steam_time" field.
func (m *DripRecipeMutation) SetSteamTime(i int32) {
	m.steam_time = &i
	m.addsteam_time = nil
}

// SteamTime returns the value of the "steam_time" field in the mutation.
func (m *DripRecipeMutation) SteamTime() (r int32, exists bool) {
	v := m.steam_time
	if v == nil {
		return
	}
	return *v, true
}

// OldSteamTime returns the old "steam_time" field's value of the DripRecipe entity.
// If the DripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DripRecipeMutation) OldSteamTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSteamTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSteamTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSteamTime: %w", err)
	}
	return oldValue.SteamTime, nil
}

// AddSteamTime adds i to the "steam_time" field.
func (m *DripRecipeMutation) AddSteamTime(i int32) {
	if m.addsteam_time != nil {
		*m.addsteam_time += i
	} else {
		m.addsteam_time = &i
	}
}

// AddedSteamTime returns the value that was added to the "steam_time" field in this mutation.
func (m *DripRecipeMutation) AddedSteamTime() (r int32, exists bool) {
	v := m.addsteam_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetSteamTime resets all changes to the "steam_time" field.
func (m *DripRecipeMutation) ResetSteamTime() {
	m.steam_time = nil
	m.addsteam_time = nil
}

// SetDripTime sets the "drip_time" field.
func (m *DripRecipeMutation) SetDripTime(i int32) {
	m.drip_time = &i
	m.adddrip_time = nil
}

// DripTime returns the value of the "drip_time" field in the mutation.
func (m *DripRecipeMutation) DripTime() (r int32, exists bool) {
	v := m.drip_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDripTime returns the old "drip_time" field's value of the DripRecipe entity.
// If the DripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DripRecipeMutation) OldDripTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDripTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDripTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDripTime: %w", err)
	}
	return oldValue.DripTime, nil
}

// AddDripTime adds i to the "drip_time" field.
func (m *DripRecipeMutation) AddDripTime(i int32) {
	if m.adddrip_time != nil {
		*m.adddrip_time += i
	} else {
		m.adddrip_time = &i
	}
}

// AddedDripTime returns the value that was added to the "drip_time" field in this mutation.
func (m *DripRecipeMutation) AddedDripTime() (r int32, exists bool) {
	v := m.adddrip_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetDripTime resets all changes to the "drip_time" field.
func (m *DripRecipeMutation) ResetDripTime() {
	m.drip_time = nil
	m.adddrip_time = nil
}

// SetMemo sets the "memo" field.
func (m *DripRecipeMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *DripRecipeMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the DripRecipe entity.
// If the DripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DripRecipeMutation) OldMemo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ResetMemo resets all changes to the "memo" field.
func (m *DripRecipeMutation) ResetMemo() {
	m.memo = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *DripRecipeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DripRecipeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the DripRecipe entity.
// If the DripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DripRecipeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DripRecipeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DripRecipeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DripRecipeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the DripRecipe entity.
// If the DripRecipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DripRecipeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DripRecipeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the DripRecipeMutation builder.
func (m *DripRecipeMutation) Where(ps ...predicate.DripRecipe) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DripRecipeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DripRecipe).
func (m *DripRecipeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DripRecipeMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.user_id != nil {
		fields = append(fields, driprecipe.FieldUserID)
	}
	if m.coffee_bean_id != nil {
		fields = append(fields, driprecipe.FieldCoffeeBeanID)
	}
	if m.coffee_bean_weight != nil {
		fields = append(fields, driprecipe.FieldCoffeeBeanWeight)
	}
	if m.liquid_weight != nil {
		fields = append(fields, driprecipe.FieldLiquidWeight)
	}
	if m.temperature != nil {
		fields = append(fields, driprecipe.FieldTemperature)
	}
	if m.steam_time != nil {
		fields = append(fields, driprecipe.FieldSteamTime)
	}
	if m.drip_time != nil {
		fields = append(fields, driprecipe.FieldDripTime)
	}
	if m.memo != nil {
		fields = append(fields, driprecipe.FieldMemo)
	}
	if m.created_at != nil {
		fields = append(fields, driprecipe.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, driprecipe.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DripRecipeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case driprecipe.FieldUserID:
		return m.UserID()
	case driprecipe.FieldCoffeeBeanID:
		return m.CoffeeBeanID()
	case driprecipe.FieldCoffeeBeanWeight:
		return m.CoffeeBeanWeight()
	case driprecipe.FieldLiquidWeight:
		return m.LiquidWeight()
	case driprecipe.FieldTemperature:
		return m.Temperature()
	case driprecipe.FieldSteamTime:
		return m.SteamTime()
	case driprecipe.FieldDripTime:
		return m.DripTime()
	case driprecipe.FieldMemo:
		return m.Memo()
	case driprecipe.FieldCreatedAt:
		return m.CreatedAt()
	case driprecipe.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DripRecipeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case driprecipe.FieldUserID:
		return m.OldUserID(ctx)
	case driprecipe.FieldCoffeeBeanID:
		return m.OldCoffeeBeanID(ctx)
	case driprecipe.FieldCoffeeBeanWeight:
		return m.OldCoffeeBeanWeight(ctx)
	case driprecipe.FieldLiquidWeight:
		return m.OldLiquidWeight(ctx)
	case driprecipe.FieldTemperature:
		return m.OldTemperature(ctx)
	case driprecipe.FieldSteamTime:
		return m.OldSteamTime(ctx)
	case driprecipe.FieldDripTime:
		return m.OldDripTime(ctx)
	case driprecipe.FieldMemo:
		return m.OldMemo(ctx)
	case driprecipe.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case driprecipe.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown DripRecipe field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DripRecipeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case driprecipe.FieldUserID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case driprecipe.FieldCoffeeBeanID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoffeeBeanID(v)
		return nil
	case driprecipe.FieldCoffeeBeanWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoffeeBeanWeight(v)
		return nil
	case driprecipe.FieldLiquidWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiquidWeight(v)
		return nil
	case driprecipe.FieldTemperature:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTemperature(v)
		return nil
	case driprecipe.FieldSteamTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSteamTime(v)
		return nil
	case driprecipe.FieldDripTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDripTime(v)
		return nil
	case driprecipe.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case driprecipe.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case driprecipe.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown DripRecipe field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DripRecipeMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, driprecipe.FieldUserID)
	}
	if m.addcoffee_bean_id != nil {
		fields = append(fields, driprecipe.FieldCoffeeBeanID)
	}
	if m.addcoffee_bean_weight != nil {
		fields = append(fields, driprecipe.FieldCoffeeBeanWeight)
	}
	if m.addliquid_weight != nil {
		fields = append(fields, driprecipe.FieldLiquidWeight)
	}
	if m.addtemperature != nil {
		fields = append(fields, driprecipe.FieldTemperature)
	}
	if m.addsteam_time != nil {
		fields = append(fields, driprecipe.FieldSteamTime)
	}
	if m.adddrip_time != nil {
		fields = append(fields, driprecipe.FieldDripTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DripRecipeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case driprecipe.FieldUserID:
		return m.AddedUserID()
	case driprecipe.FieldCoffeeBeanID:
		return m.AddedCoffeeBeanID()
	case driprecipe.FieldCoffeeBeanWeight:
		return m.AddedCoffeeBeanWeight()
	case driprecipe.FieldLiquidWeight:
		return m.AddedLiquidWeight()
	case driprecipe.FieldTemperature:
		return m.AddedTemperature()
	case driprecipe.FieldSteamTime:
		return m.AddedSteamTime()
	case driprecipe.FieldDripTime:
		return m.AddedDripTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DripRecipeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case driprecipe.FieldUserID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case driprecipe.FieldCoffeeBeanID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCoffeeBeanID(v)
		return nil
	case driprecipe.FieldCoffeeBeanWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCoffeeBeanWeight(v)
		return nil
	case driprecipe.FieldLiquidWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLiquidWeight(v)
		return nil
	case driprecipe.FieldTemperature:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTemperature(v)
		return nil
	case driprecipe.FieldSteamTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSteamTime(v)
		return nil
	case driprecipe.FieldDripTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDripTime(v)
		return nil
	}
	return fmt.Errorf("unknown DripRecipe numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DripRecipeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DripRecipeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DripRecipeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DripRecipe nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DripRecipeMutation) ResetField(name string) error {
	switch name {
	case driprecipe.FieldUserID:
		m.ResetUserID()
		return nil
	case driprecipe.FieldCoffeeBeanID:
		m.ResetCoffeeBeanID()
		return nil
	case driprecipe.FieldCoffeeBeanWeight:
		m.ResetCoffeeBeanWeight()
		return nil
	case driprecipe.FieldLiquidWeight:
		m.ResetLiquidWeight()
		return nil
	case driprecipe.FieldTemperature:
		m.ResetTemperature()
		return nil
	case driprecipe.FieldSteamTime:
		m.ResetSteamTime()
		return nil
	case driprecipe.FieldDripTime:
		m.ResetDripTime()
		return nil
	case driprecipe.FieldMemo:
		m.ResetMemo()
		return nil
	case driprecipe.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case driprecipe.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown DripRecipe field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DripRecipeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DripRecipeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DripRecipeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DripRecipeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DripRecipeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DripRecipeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DripRecipeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DripRecipe unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DripRecipeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DripRecipe edge %s", name)
}

// GooseDbVersionMutation represents an operation that mutates the GooseDbVersion nodes in the graph.
type GooseDbVersionMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	version_id    *int
	addversion_id *int
	is_applied    *bool
	tstamp        *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*GooseDbVersion, error)
	predicates    []predicate.GooseDbVersion
}

var _ ent.Mutation = (*GooseDbVersionMutation)(nil)

// goosedbversionOption allows management of the mutation configuration using functional options.
type goosedbversionOption func(*GooseDbVersionMutation)

// newGooseDbVersionMutation creates new mutation for the GooseDbVersion entity.
func newGooseDbVersionMutation(c config, op Op, opts ...goosedbversionOption) *GooseDbVersionMutation {
	m := &GooseDbVersionMutation{
		config:        c,
		op:            op,
		typ:           TypeGooseDbVersion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGooseDbVersionID sets the ID field of the mutation.
func withGooseDbVersionID(id uint64) goosedbversionOption {
	return func(m *GooseDbVersionMutation) {
		var (
			err   error
			once  sync.Once
			value *GooseDbVersion
		)
		m.oldValue = func(ctx context.Context) (*GooseDbVersion, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GooseDbVersion.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGooseDbVersion sets the old GooseDbVersion of the mutation.
func withGooseDbVersion(node *GooseDbVersion) goosedbversionOption {
	return func(m *GooseDbVersionMutation) {
		m.oldValue = func(context.Context) (*GooseDbVersion, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GooseDbVersionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GooseDbVersionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GooseDbVersion entities.
func (m *GooseDbVersionMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GooseDbVersionMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GooseDbVersionMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GooseDbVersion.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetVersionID sets the "version_id" field.
func (m *GooseDbVersionMutation) SetVersionID(i int) {
	m.version_id = &i
	m.addversion_id = nil
}

// VersionID returns the value of the "version_id" field in the mutation.
func (m *GooseDbVersionMutation) VersionID() (r int, exists bool) {
	v := m.version_id
	if v == nil {
		return
	}
	return *v, true
}

// OldVersionID returns the old "version_id" field's value of the GooseDbVersion entity.
// If the GooseDbVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GooseDbVersionMutation) OldVersionID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersionID: %w", err)
	}
	return oldValue.VersionID, nil
}

// AddVersionID adds i to the "version_id" field.
func (m *GooseDbVersionMutation) AddVersionID(i int) {
	if m.addversion_id != nil {
		*m.addversion_id += i
	} else {
		m.addversion_id = &i
	}
}

// AddedVersionID returns the value that was added to the "version_id" field in this mutation.
func (m *GooseDbVersionMutation) AddedVersionID() (r int, exists bool) {
	v := m.addversion_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersionID resets all changes to the "version_id" field.
func (m *GooseDbVersionMutation) ResetVersionID() {
	m.version_id = nil
	m.addversion_id = nil
}

// SetIsApplied sets the "is_applied" field.
func (m *GooseDbVersionMutation) SetIsApplied(b bool) {
	m.is_applied = &b
}

// IsApplied returns the value of the "is_applied" field in the mutation.
func (m *GooseDbVersionMutation) IsApplied() (r bool, exists bool) {
	v := m.is_applied
	if v == nil {
		return
	}
	return *v, true
}

// OldIsApplied returns the old "is_applied" field's value of the GooseDbVersion entity.
// If the GooseDbVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GooseDbVersionMutation) OldIsApplied(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsApplied is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsApplied requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsApplied: %w", err)
	}
	return oldValue.IsApplied, nil
}

// ResetIsApplied resets all changes to the "is_applied" field.
func (m *GooseDbVersionMutation) ResetIsApplied() {
	m.is_applied = nil
}

// SetTstamp sets the "tstamp" field.
func (m *GooseDbVersionMutation) SetTstamp(t time.Time) {
	m.tstamp = &t
}

// Tstamp returns the value of the "tstamp" field in the mutation.
func (m *GooseDbVersionMutation) Tstamp() (r time.Time, exists bool) {
	v := m.tstamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTstamp returns the old "tstamp" field's value of the GooseDbVersion entity.
// If the GooseDbVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GooseDbVersionMutation) OldTstamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTstamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTstamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTstamp: %w", err)
	}
	return oldValue.Tstamp, nil
}

// ClearTstamp clears the value of the "tstamp" field.
func (m *GooseDbVersionMutation) ClearTstamp() {
	m.tstamp = nil
	m.clearedFields[goosedbversion.FieldTstamp] = struct{}{}
}

// TstampCleared returns if the "tstamp" field was cleared in this mutation.
func (m *GooseDbVersionMutation) TstampCleared() bool {
	_, ok := m.clearedFields[goosedbversion.FieldTstamp]
	return ok
}

// ResetTstamp resets all changes to the "tstamp" field.
func (m *GooseDbVersionMutation) ResetTstamp() {
	m.tstamp = nil
	delete(m.clearedFields, goosedbversion.FieldTstamp)
}

// Where appends a list predicates to the GooseDbVersionMutation builder.
func (m *GooseDbVersionMutation) Where(ps ...predicate.GooseDbVersion) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GooseDbVersionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GooseDbVersion).
func (m *GooseDbVersionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GooseDbVersionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.version_id != nil {
		fields = append(fields, goosedbversion.FieldVersionID)
	}
	if m.is_applied != nil {
		fields = append(fields, goosedbversion.FieldIsApplied)
	}
	if m.tstamp != nil {
		fields = append(fields, goosedbversion.FieldTstamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GooseDbVersionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case goosedbversion.FieldVersionID:
		return m.VersionID()
	case goosedbversion.FieldIsApplied:
		return m.IsApplied()
	case goosedbversion.FieldTstamp:
		return m.Tstamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GooseDbVersionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case goosedbversion.FieldVersionID:
		return m.OldVersionID(ctx)
	case goosedbversion.FieldIsApplied:
		return m.OldIsApplied(ctx)
	case goosedbversion.FieldTstamp:
		return m.OldTstamp(ctx)
	}
	return nil, fmt.Errorf("unknown GooseDbVersion field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GooseDbVersionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case goosedbversion.FieldVersionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersionID(v)
		return nil
	case goosedbversion.FieldIsApplied:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsApplied(v)
		return nil
	case goosedbversion.FieldTstamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTstamp(v)
		return nil
	}
	return fmt.Errorf("unknown GooseDbVersion field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GooseDbVersionMutation) AddedFields() []string {
	var fields []string
	if m.addversion_id != nil {
		fields = append(fields, goosedbversion.FieldVersionID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GooseDbVersionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case goosedbversion.FieldVersionID:
		return m.AddedVersionID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GooseDbVersionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case goosedbversion.FieldVersionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersionID(v)
		return nil
	}
	return fmt.Errorf("unknown GooseDbVersion numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GooseDbVersionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(goosedbversion.FieldTstamp) {
		fields = append(fields, goosedbversion.FieldTstamp)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GooseDbVersionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GooseDbVersionMutation) ClearField(name string) error {
	switch name {
	case goosedbversion.FieldTstamp:
		m.ClearTstamp()
		return nil
	}
	return fmt.Errorf("unknown GooseDbVersion nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GooseDbVersionMutation) ResetField(name string) error {
	switch name {
	case goosedbversion.FieldVersionID:
		m.ResetVersionID()
		return nil
	case goosedbversion.FieldIsApplied:
		m.ResetIsApplied()
		return nil
	case goosedbversion.FieldTstamp:
		m.ResetTstamp()
		return nil
	}
	return fmt.Errorf("unknown GooseDbVersion field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GooseDbVersionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GooseDbVersionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GooseDbVersionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GooseDbVersionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GooseDbVersionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GooseDbVersionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GooseDbVersionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GooseDbVersion unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GooseDbVersionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GooseDbVersion edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int32
	username      *string
	email         *string
	password      *string
	flags         *int
	addflags      *int
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int32) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetFlags sets the "flags" field.
func (m *UserMutation) SetFlags(i int) {
	m.flags = &i
	m.addflags = nil
}

// Flags returns the value of the "flags" field in the mutation.
func (m *UserMutation) Flags() (r int, exists bool) {
	v := m.flags
	if v == nil {
		return
	}
	return *v, true
}

// OldFlags returns the old "flags" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFlags(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFlags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFlags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFlags: %w", err)
	}
	return oldValue.Flags, nil
}

// AddFlags adds i to the "flags" field.
func (m *UserMutation) AddFlags(i int) {
	if m.addflags != nil {
		*m.addflags += i
	} else {
		m.addflags = &i
	}
}

// AddedFlags returns the value that was added to the "flags" field in this mutation.
func (m *UserMutation) AddedFlags() (r int, exists bool) {
	v := m.addflags
	if v == nil {
		return
	}
	return *v, true
}

// ResetFlags resets all changes to the "flags" field.
func (m *UserMutation) ResetFlags() {
	m.flags = nil
	m.addflags = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[user.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, user.FieldDeletedAt)
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.flags != nil {
		fields = append(fields, user.FieldFlags)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, user.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldFlags:
		return m.Flags()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldFlags:
		return m.OldFlags(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldFlags:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFlags(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addflags != nil {
		fields = append(fields, user.FieldFlags)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldFlags:
		return m.AddedFlags()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldFlags:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFlags(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldDeletedAt) {
		fields = append(fields, user.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldFlags:
		m.ResetFlags()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}

// UsersCoffeeBeanMutation represents an operation that mutates the UsersCoffeeBean nodes in the graph.
type UsersCoffeeBeanMutation struct {
	config
	op                Op
	typ               string
	id                *int32
	user_id           *int32
	adduser_id        *int32
	coffee_bean_id    *int32
	addcoffee_bean_id *int32
	created_at        *time.Time
	updated_at        *time.Time
	deleted_at        *time.Time
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*UsersCoffeeBean, error)
	predicates        []predicate.UsersCoffeeBean
}

var _ ent.Mutation = (*UsersCoffeeBeanMutation)(nil)

// userscoffeebeanOption allows management of the mutation configuration using functional options.
type userscoffeebeanOption func(*UsersCoffeeBeanMutation)

// newUsersCoffeeBeanMutation creates new mutation for the UsersCoffeeBean entity.
func newUsersCoffeeBeanMutation(c config, op Op, opts ...userscoffeebeanOption) *UsersCoffeeBeanMutation {
	m := &UsersCoffeeBeanMutation{
		config:        c,
		op:            op,
		typ:           TypeUsersCoffeeBean,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUsersCoffeeBeanID sets the ID field of the mutation.
func withUsersCoffeeBeanID(id int32) userscoffeebeanOption {
	return func(m *UsersCoffeeBeanMutation) {
		var (
			err   error
			once  sync.Once
			value *UsersCoffeeBean
		)
		m.oldValue = func(ctx context.Context) (*UsersCoffeeBean, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UsersCoffeeBean.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUsersCoffeeBean sets the old UsersCoffeeBean of the mutation.
func withUsersCoffeeBean(node *UsersCoffeeBean) userscoffeebeanOption {
	return func(m *UsersCoffeeBeanMutation) {
		m.oldValue = func(context.Context) (*UsersCoffeeBean, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UsersCoffeeBeanMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UsersCoffeeBeanMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UsersCoffeeBean entities.
func (m *UsersCoffeeBeanMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UsersCoffeeBeanMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UsersCoffeeBeanMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UsersCoffeeBean.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *UsersCoffeeBeanMutation) SetUserID(i int32) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UsersCoffeeBeanMutation) UserID() (r int32, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UsersCoffeeBean entity.
// If the UsersCoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersCoffeeBeanMutation) OldUserID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *UsersCoffeeBeanMutation) AddUserID(i int32) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *UsersCoffeeBeanMutation) AddedUserID() (r int32, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UsersCoffeeBeanMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetCoffeeBeanID sets the "coffee_bean_id" field.
func (m *UsersCoffeeBeanMutation) SetCoffeeBeanID(i int32) {
	m.coffee_bean_id = &i
	m.addcoffee_bean_id = nil
}

// CoffeeBeanID returns the value of the "coffee_bean_id" field in the mutation.
func (m *UsersCoffeeBeanMutation) CoffeeBeanID() (r int32, exists bool) {
	v := m.coffee_bean_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoffeeBeanID returns the old "coffee_bean_id" field's value of the UsersCoffeeBean entity.
// If the UsersCoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersCoffeeBeanMutation) OldCoffeeBeanID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoffeeBeanID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoffeeBeanID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoffeeBeanID: %w", err)
	}
	return oldValue.CoffeeBeanID, nil
}

// AddCoffeeBeanID adds i to the "coffee_bean_id" field.
func (m *UsersCoffeeBeanMutation) AddCoffeeBeanID(i int32) {
	if m.addcoffee_bean_id != nil {
		*m.addcoffee_bean_id += i
	} else {
		m.addcoffee_bean_id = &i
	}
}

// AddedCoffeeBeanID returns the value that was added to the "coffee_bean_id" field in this mutation.
func (m *UsersCoffeeBeanMutation) AddedCoffeeBeanID() (r int32, exists bool) {
	v := m.addcoffee_bean_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetCoffeeBeanID resets all changes to the "coffee_bean_id" field.
func (m *UsersCoffeeBeanMutation) ResetCoffeeBeanID() {
	m.coffee_bean_id = nil
	m.addcoffee_bean_id = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UsersCoffeeBeanMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UsersCoffeeBeanMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UsersCoffeeBean entity.
// If the UsersCoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersCoffeeBeanMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UsersCoffeeBeanMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UsersCoffeeBeanMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UsersCoffeeBeanMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the UsersCoffeeBean entity.
// If the UsersCoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersCoffeeBeanMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UsersCoffeeBeanMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UsersCoffeeBeanMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UsersCoffeeBeanMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the UsersCoffeeBean entity.
// If the UsersCoffeeBean object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersCoffeeBeanMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UsersCoffeeBeanMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[userscoffeebean.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UsersCoffeeBeanMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[userscoffeebean.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UsersCoffeeBeanMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, userscoffeebean.FieldDeletedAt)
}

// Where appends a list predicates to the UsersCoffeeBeanMutation builder.
func (m *UsersCoffeeBeanMutation) Where(ps ...predicate.UsersCoffeeBean) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UsersCoffeeBeanMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UsersCoffeeBean).
func (m *UsersCoffeeBeanMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UsersCoffeeBeanMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.user_id != nil {
		fields = append(fields, userscoffeebean.FieldUserID)
	}
	if m.coffee_bean_id != nil {
		fields = append(fields, userscoffeebean.FieldCoffeeBeanID)
	}
	if m.created_at != nil {
		fields = append(fields, userscoffeebean.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, userscoffeebean.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, userscoffeebean.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UsersCoffeeBeanMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userscoffeebean.FieldUserID:
		return m.UserID()
	case userscoffeebean.FieldCoffeeBeanID:
		return m.CoffeeBeanID()
	case userscoffeebean.FieldCreatedAt:
		return m.CreatedAt()
	case userscoffeebean.FieldUpdatedAt:
		return m.UpdatedAt()
	case userscoffeebean.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UsersCoffeeBeanMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userscoffeebean.FieldUserID:
		return m.OldUserID(ctx)
	case userscoffeebean.FieldCoffeeBeanID:
		return m.OldCoffeeBeanID(ctx)
	case userscoffeebean.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case userscoffeebean.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case userscoffeebean.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown UsersCoffeeBean field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UsersCoffeeBeanMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userscoffeebean.FieldUserID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userscoffeebean.FieldCoffeeBeanID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoffeeBeanID(v)
		return nil
	case userscoffeebean.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case userscoffeebean.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case userscoffeebean.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown UsersCoffeeBean field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UsersCoffeeBeanMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, userscoffeebean.FieldUserID)
	}
	if m.addcoffee_bean_id != nil {
		fields = append(fields, userscoffeebean.FieldCoffeeBeanID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UsersCoffeeBeanMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userscoffeebean.FieldUserID:
		return m.AddedUserID()
	case userscoffeebean.FieldCoffeeBeanID:
		return m.AddedCoffeeBeanID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UsersCoffeeBeanMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userscoffeebean.FieldUserID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case userscoffeebean.FieldCoffeeBeanID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCoffeeBeanID(v)
		return nil
	}
	return fmt.Errorf("unknown UsersCoffeeBean numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UsersCoffeeBeanMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userscoffeebean.FieldDeletedAt) {
		fields = append(fields, userscoffeebean.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UsersCoffeeBeanMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UsersCoffeeBeanMutation) ClearField(name string) error {
	switch name {
	case userscoffeebean.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown UsersCoffeeBean nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UsersCoffeeBeanMutation) ResetField(name string) error {
	switch name {
	case userscoffeebean.FieldUserID:
		m.ResetUserID()
		return nil
	case userscoffeebean.FieldCoffeeBeanID:
		m.ResetCoffeeBeanID()
		return nil
	case userscoffeebean.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case userscoffeebean.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case userscoffeebean.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown UsersCoffeeBean field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UsersCoffeeBeanMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UsersCoffeeBeanMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UsersCoffeeBeanMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UsersCoffeeBeanMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UsersCoffeeBeanMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UsersCoffeeBeanMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UsersCoffeeBeanMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UsersCoffeeBean unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UsersCoffeeBeanMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UsersCoffeeBean edge %s", name)
}
