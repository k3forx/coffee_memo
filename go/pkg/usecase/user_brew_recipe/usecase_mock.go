// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase.go

// Package user_brew_recipe is a generated GoMock package.
package user_brew_recipe

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	result "github.com/k3forx/coffee_memo/pkg/result"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsecase) Create(ctx context.Context, in CreateInput) *result.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*result.Result)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUsecaseMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsecase)(nil).Create), ctx, in)
}
